<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ahamoment</title><link>https://ahamoment.cn/</link><description>Recent content on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 15 Apr 2021 10:03:48 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/index.xml" rel="self" type="application/rss+xml"/><item><title>二叉树的中序遍历</title><link>https://ahamoment.cn/post/algorithm-tree-inorder/</link><pubDate>Thu, 15 Apr 2021 10:03:48 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-tree-inorder/</guid><description>
&lt;p>二叉树的遍历方法分为先序遍历，中序遍历，后序遍历以及层序遍历这四种，其中先序，中序以及后序又可以用递归和非递归的方式来实现，层序遍历一般则是用一个队列来实现。关于这几种遍历方式和代码可以参考本博客的之前的一篇文章---&amp;gt;&lt;a href="https://chenxq.xyz/post/algorithm-binary-tree/#5-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86">传送门&lt;/a>&lt;/p>
&lt;p>这里我们通过一道 leetcode 题目来对二叉树的中序遍历法展开讨论。这道题的描述如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>leetcode 94 [https://leetcode-cn.com/problems/binary-tree-inorder-traversal/]
&lt;span class="ln"> 2&lt;/span>给定一个二叉树的根节点 root ，返回它的 中序 遍历。
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>示例1：
&lt;span class="ln"> 5&lt;/span> 1
&lt;span class="ln"> 6&lt;/span> \
&lt;span class="ln"> 7&lt;/span> 2
&lt;span class="ln"> 8&lt;/span> /
&lt;span class="ln"> 9&lt;/span> 3
&lt;span class="ln">10&lt;/span>输入：root = [1,null,2,3]
&lt;span class="ln">11&lt;/span>输出：[1,3,2]
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1-递归">1. 递归&lt;/h2>
&lt;p>首先我们需要了解什么是二叉树的中序遍历：按照访问&lt;strong>左子树——根节点——右子树&lt;/strong>的方式遍历这棵树，而在访问左子树或者右子树的时候我们按照同样的方式遍历，直到遍历完整棵树。因此整个遍历过程天然具有递归的性质，我们可以直接用递归函数来模拟这一过程。&lt;/p>
&lt;p>定义 &lt;code>inorder(root)&lt;/code> 表示当前遍历到&lt;code>root&lt;/code>节点的答案，那么按照定义，我们只要递归调用 &lt;code>inorder(root.left)&lt;/code> 来遍历 &lt;code>root&lt;/code> 节点的左子树，然后将 &lt;code>root&lt;/code> 节点的值加入答案，再递归调用 &lt;code>inorder(root.right)&lt;/code> 来遍历 &lt;code>root&lt;/code> 节点的右子树即可，递归终止的条件为碰到空节点。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">inorderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">inorder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">inorder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">inorder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">inorder&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="2-迭代">2. 迭代&lt;/h2>
&lt;p>方法一的递归函数我们也可以用迭代的方式实现，两种方式是等价的，区别在于递归的时候隐式地维护了一个栈，而我们在迭代的时候需要显式地将这个栈模拟出来，其他都相同，具体实现可以看下面的代码。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">inorderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">// 定义一个栈
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Deque&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">stk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 节点不为空，并且栈不为空
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">stk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// 一直走到最左的节点，边走边压栈
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">stk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">// 从最左的节点开始弹栈,并且判断右节点是否为空
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stk&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">pop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-morris-中序遍历">3. Morris 中序遍历&lt;/h2>
&lt;p>Morris 遍历算法是另一种遍历二叉树的方法，它能将非递归的中序遍历空间复杂度降为 &lt;code>O(1)&lt;/code>。&lt;/p>
&lt;p>Morris 遍历算法整体步骤如下（假设当前遍历到的节点为 &lt;code>x&lt;/code>）：&lt;/p>
&lt;ol>
&lt;li>如果 x 无左孩子，先将 x 的值加入答案数组，再访问 x 的右孩子，即 &lt;code>x=x.right&lt;/code>。&lt;/li>
&lt;li>如果 x 有左孩子，则找到 x 左子树上最右的节点（即左子树中序遍历的最后一个节点，x 在中序遍历中的前驱节点），我们记为 predecessor。根据 predecessor 的右孩子是否为空，进行如下操作。
如果 predecessor 的右孩子为空，则将其右孩子指向 x，然后访问 x 的左孩子，即 x=x.left。
如果 predecessor 的右孩子不为空，则此时其右孩子指向 x，说明我们已经遍历完 x 的左子树，我们将 predecessor 的右孩子置空，将 x 的值加入答案数组，然后访问 x 的右孩子，即 x=x.right。&lt;/li>
&lt;li>重复上述操作，直至访问完整棵树。&lt;/li>
&lt;/ol>
&lt;p>其实整个过程我们就多做一步：假设当前遍历到的节点为 x，将 x 的左子树中最右边的节点的右孩子指向 x，这样在左子树遍历完成后我们通过这个指向走回了 x，且能通过这个指向知晓我们已经遍历完成了左子树，而不用再通过栈来维护，省去了栈的空间复杂度。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">Solution&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">inorderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">res&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">TreeNode&lt;/span> &lt;span class="n">predecessor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// predecessor 节点就是当前 root 节点向左走一步，然后一直向右走至无法走为止
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">predecessor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">predecessor&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">// 让 predecessor 的右指针指向 root，继续遍历左子树
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">// 说明左子树已经访问完了，我们需要断开链接
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">predecessor&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1">// 如果没有左孩子，则直接访问右孩子
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">val&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">root&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">root&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">res&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>复杂度分析&lt;/strong>&lt;/p>
&lt;p>时间复杂度：O(n)，其中 n 为二叉搜索树的节点个数。Morris 遍历中每个节点会被访问两次，因此总时间复杂度为 O(2n)=O(n)。&lt;/p>
&lt;p>空间复杂度：O(1)。&lt;/p></description></item><item><title>Go 语言中的 new 关键字和 make 关键字的区别</title><link>https://ahamoment.cn/post/go-new-vs-make/</link><pubDate>Thu, 01 Apr 2021 16:23:40 +0800</pubDate><guid>https://ahamoment.cn/post/go-new-vs-make/</guid><description>
&lt;p>Go 语言分配内存的函数包括 new 和 make。new 用来获取类型对应的指针类型，即要获取指针类型的内存分配。make 只用来分配引用类型，即为channel，map，slice分配内存。&lt;/p>
&lt;p>对于值类型的变量，我们通过var 声明，系统会默认为他分配内存空间，并赋该类型的零值。如下，我们声明一个int类型变量i，输出为0。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而如果我们声明一个指针类型的变量，系统不会为他分配内存，改变量默认就是nil。此时如果你想直接使用，那么系统会抛异常。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1">//panic: runtime error: invalid memory address or nil pointer dereference
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，空指针还没有内存分配，是不能使用的。那么要想使用，此时就需要new出场啦。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>0xc00000a0e0
&lt;span class="ln">2&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明指针类型变量后，通过new为他分配内存，有了内存空间，这个变量就可以自由的使用啦。&lt;/p>
&lt;p>我们来看一下new函数&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="c1">// The new built-in function allocates memory. The first argument is a type,
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">// not a value, and the value returned is a pointer to a newly
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">// allocated zero value of that type.
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它只接受一个参数，这个参数是一个类型，分配好内存后，返回一个指向该类型内存地址的指针。同时把分配的内存置为零，也就是类型的零值。&lt;/p>
&lt;p>接着，我们来看一下make函数。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// The make built-in function allocates and initializes an object of type
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">// slice, map, or chan (only). Like new, the first argument is a type, not a
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">// value. Unlike new, make&amp;#39;s return type is the same as the type of its
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">// argument, not a pointer to it. The specification of the result depends on
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">// the type:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">// Slice: The size specifies the length. The capacity of the slice is
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">// equal to its length. A second integer argument may be provided to
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">// specify a different capacity; it must be no smaller than the
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">// length. For example, make([]int, 0, 10) allocates an underlying array
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">// of size 10 and returns a slice of length 0 and capacity 10 that is
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">// backed by this underlying array.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">// Map: An empty map is allocated with enough space to hold the
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">// specified number of elements. The size may be omitted, in which case
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">// a small starting size is allocated.
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">// Channel: The channel&amp;#39;s buffer is initialized with the specified
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">// buffer capacity. If zero, or the size is omitted, the channel is
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">// unbuffered.
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="nx">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">IntegerType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>make 是分配内存并初始化，初始化并不是置为零值。&lt;/li>
&lt;li>与new一样，它的第一个参数也是一个类型，但是不一样的是，make返回的是传入的类型，而不是指针！&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%#v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//(chan int)(nil)
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%#v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//(chan int)(0xc000062060)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明管道类型变量c，此时c还是nil，不可用；通过make来分配内存并初始化，c就获得了内存可以使用了。&lt;/p></description></item><item><title>Mac 命令汇总</title><link>https://ahamoment.cn/post/tool-mac-os-commands/</link><pubDate>Thu, 25 Mar 2021 16:03:00 +0800</pubDate><guid>https://ahamoment.cn/post/tool-mac-os-commands/</guid><description>
&lt;h2 id="常用快捷键">常用快捷键&lt;/h2>
&lt;h3 id="overall">Overall&lt;/h3>
&lt;p>&lt;a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键&lt;/a>&lt;/p>
&lt;h3 id="修饰键">修饰键&lt;/h3>
&lt;ul>
&lt;li>Command（或 Cmd）⌘&lt;/li>
&lt;li>Shift ⇧&lt;/li>
&lt;li>Option（或 Alt）⌥&lt;/li>
&lt;li>Control（或 Ctrl）⌃&lt;/li>
&lt;li>Caps Lock ⇪&lt;/li>
&lt;li>Fn&lt;/li>
&lt;/ul>
&lt;p>在 Windows PC 专用键盘上，请用 Alt 键代替 Option 键，用 Windows 标志键代替 Command 键。&lt;/p>
&lt;h3 id="截图">截图&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>全屏&lt;/p>
&lt;p>&lt;code>shift + command + 3&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>截取部分&lt;/p>
&lt;p>&lt;code>shift + command + 4&lt;/code>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>打开截屏工具&lt;/p>
&lt;p>&lt;code>shift + command + 5&lt;/code>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="文稿编辑">文稿编辑&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Fn-上箭头&lt;/strong>：Page Up：向上滚动一页。&lt;/li>
&lt;li>&lt;strong>Fn–下箭头&lt;/strong>：Page Down：向下滚动一页。&lt;/li>
&lt;li>**Fn–左箭头：**Home：滚动到文稿开头。&lt;/li>
&lt;li>&lt;strong>Fn–右箭头&lt;/strong>：End：滚动到文稿末尾。&lt;/li>
&lt;li>&lt;strong>Command–上箭头&lt;/strong>：将插入点移至文稿开头。&lt;/li>
&lt;li>&lt;strong>Command–下箭头&lt;/strong>：将插入点移至文稿末尾。&lt;/li>
&lt;li>&lt;strong>Command–左箭头&lt;/strong>：将插入点移至当前行的行首。&lt;/li>
&lt;li>&lt;strong>Command–右箭头&lt;/strong>：将插入点移至当前行的行尾。&lt;/li>
&lt;li>&lt;strong>Option–左箭头&lt;/strong>：将插入点移至上一字词的词首。&lt;/li>
&lt;li>&lt;strong>Option–右箭头&lt;/strong>：将插入点移至下一字词的词尾。&lt;/li>
&lt;/ul></description></item><item><title>安装 Tensorflow2</title><link>https://ahamoment.cn/post/ml-tensorflow2.0-install/</link><pubDate>Thu, 25 Mar 2021 15:48:23 +0800</pubDate><guid>https://ahamoment.cn/post/ml-tensorflow2.0-install/</guid><description>
&lt;h2 id="安装-anaconda">安装 Anaconda&lt;/h2>
&lt;p>&lt;a href="https://www.anaconda.com/products/individual">https://www.anaconda.com/products/individual&lt;/a>&lt;/p>
&lt;p>根据系统选择下载不同的 anaconda 安装：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%B1%8F2021-03-25%20%E4%B8%8B%E5%8D%885.17.08.png" alt="">&lt;/p>
&lt;p>这里安装的是 MacOS 的软件包，安装完成后使用 conda 命令查看是否安装成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ conda --version
&lt;span class="ln">2&lt;/span>conda 4.9.2
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="更换-conda-镜像源">更换 conda 镜像源&lt;/h2>
&lt;p>查看用户目录下的 &lt;code>.condarc&lt;/code> 文件：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/%E6%88%AA%E5%B1%8F2021-03-25%20%E4%B8%8B%E5%8D%884.00.22.png" alt="">&lt;/p>
&lt;p>更换成&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/anaconda/">清华大学镜像源&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>channels:
&lt;span class="ln"> 2&lt;/span> - defaults
&lt;span class="ln"> 3&lt;/span>show_channel_urls: &lt;span class="nb">true&lt;/span>
&lt;span class="ln"> 4&lt;/span>default_channels:
&lt;span class="ln"> 5&lt;/span> - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main
&lt;span class="ln"> 6&lt;/span> - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/r
&lt;span class="ln"> 7&lt;/span> - https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/msys2
&lt;span class="ln"> 8&lt;/span>custom_channels:
&lt;span class="ln"> 9&lt;/span> conda-forge: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;span class="ln">10&lt;/span> msys2: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;span class="ln">11&lt;/span> bioconda: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;span class="ln">12&lt;/span> menpo: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;span class="ln">13&lt;/span> pytorch: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;span class="ln">14&lt;/span> simpleitk: https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行 &lt;code>conda clean -i&lt;/code> 清除索引缓存，保证用的是镜像站提供的索引。&lt;/p>
&lt;p>运行 &lt;code>conda create -n myenv numpy&lt;/code> 测试一下吧。&lt;/p>
&lt;h2 id="更换-pip-的镜像源">更换 pip 的镜像源&lt;/h2>
&lt;p>默认的 pip 下载地址速度较慢，我们将其更换成清华大学的镜像地址：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ pip config &lt;span class="nb">set&lt;/span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple
&lt;span class="ln">2&lt;/span>Writing to /Users/yaoxiaojiao/.config/pip/pip.conf
&lt;/code>&lt;/pre>&lt;/div>&lt;p>详情查看：&lt;a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/">pypi 镜像使用帮助&lt;/a>&lt;/p>
&lt;h2 id="安装-tensorflow-22">安装 Tensorflow 2.2&lt;/h2>
&lt;p>创建一个 TF2.2 的 conda 实验环境并安装相关软件包：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>conda create -n TF2.2 &lt;span class="nv">python&lt;/span>&lt;span class="o">=&lt;/span>3.8
&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入 TF2.2 环境中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>conda activate TF2.2
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="安装英伟达显卡的-sdk">安装英伟达显卡的 SDK&lt;/h3>
&lt;p>Tensorflow2.1 匹配的 cuda toolkit 是 10.1，由于我的电脑上没有英伟达的显卡，无法安装，先记录下安装命令，后续找台有英伟达显卡的机器实验：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>conda install &lt;span class="nv">cudatoolkit&lt;/span>&lt;span class="o">=&lt;/span>10.1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>tf2.1对应的英伟达显卡的深度学习软件包版本为 cudnn7.6&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>conda install &lt;span class="nv">cudnn&lt;/span>&lt;span class="o">=&lt;/span>7.6
&lt;/code>&lt;/pre>&lt;/div>&lt;p>mac pro 由于没有英伟达的显卡，我们可以尝试通过 pycharm 远程连接解释器的方式，在远程一台有显卡的服务器上进行解析。详情参考：&lt;a href="https://www.jetbrains.com/help/pycharm/remote-debugging-with-product.html">Remote Debugging with PyCharm&lt;/a>&lt;/p>
&lt;p>安装 tensorflow 2.2&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>pip install &lt;span class="nv">tensorflow&lt;/span>&lt;span class="o">==&lt;/span>2.2.0
&lt;/code>&lt;/pre>&lt;/div>&lt;p>验证 tensorflow2.0 安装成功：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-python" data-lang="python">&lt;span class="ln">1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">tensorflow&lt;/span> &lt;span class="kn">as&lt;/span> &lt;span class="nn">tf&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">tf&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">__version__&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/87123943">https://zhuanlan.zhihu.com/p/87123943&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://www.jetbrains.com/help/pycharm/remote-debugging-with-product.html#remote-debug-config">https://www.jetbrains.com/help/pycharm/remote-debugging-with-product.html#remote-debug-config&lt;/a>&lt;/p></description></item><item><title>Vim 折腾记</title><link>https://ahamoment.cn/post/tool-vim/</link><pubDate>Tue, 16 Mar 2021 16:12:24 +0800</pubDate><guid>https://ahamoment.cn/post/tool-vim/</guid><description>
&lt;p>折腾了两天的vim，想要把它变成我的机器上默认的IDE，方便在没有环境的时候，快速查阅代码，做一些基本的开发任务，折腾过程记录在这篇博客上&lt;/p>
&lt;h2 id="环境">环境&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># cat /etc/*release&lt;/span>
&lt;span class="ln">2&lt;/span>CentOS Linux release 7.9.2009 &lt;span class="o">(&lt;/span>Core&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>系统自带的vim是&lt;code>7.x&lt;/code>，对于很多的插件来说(例如 ycm)都已经不兼容了，所以第一步就是要将 vim 的版本更新到 8.0 以上&lt;/p>
&lt;h2 id="安装软件">安装软件&lt;/h2>
&lt;p>编译vim之前先卸载掉旧版本的vim&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>yum remove vim-enhanced vim-common vim-filesystem vim-minimal
&lt;/code>&lt;/pre>&lt;/div>&lt;p>为了编译能够正常，需要安装上一些依赖和常用的工具包：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># install devtoolset-8&lt;/span>
&lt;span class="ln">2&lt;/span>yum install centos-release-scl
&lt;span class="ln">3&lt;/span>yum-config-manager --enable rhel-server-rhscl-7-rpms
&lt;span class="ln">4&lt;/span>yum install devtoolset-8
&lt;span class="ln">5&lt;/span>scl &lt;span class="nb">enable&lt;/span> devtoolset-8 bash
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="c1"># install cmake, python3-devel, etc.&lt;/span>
&lt;span class="ln">8&lt;/span>yum -y install git ncurses-devel ruby ruby-devel lua lua-devel perl perl-devel python3 python3-devel python2-devel perl-ExtUtils-Embed lrzsz cmake wget gcc gcc-c++ unzi
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中有部分工具是给后面安装插件使用的。&lt;/p>
&lt;p>下载vim的源代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>git clone https://github.com/vim/vim.git
&lt;span class="ln"> 2&lt;/span>&lt;span class="nb">cd&lt;/span> vim
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># if you build vim before&lt;/span>
&lt;span class="ln"> 4&lt;/span>make distclean
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1"># config&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1"># --enable-fail-if-missing 表示问题会提示报错，并停止&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1"># --enable-***interp=yes 表示加入***支持&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1"># --with-***-config-dir=*** 表示指定配置文件路径&lt;/span>
&lt;span class="ln"> 9&lt;/span>./configure --with-features&lt;span class="o">=&lt;/span>huge &lt;span class="se">\
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="se">&lt;/span> --enable-rubyinterp&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="se">&lt;/span> --enable-luainterp&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="se">&lt;/span> --enable-perlinterp&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="se">&lt;/span> --enable-python3interp&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="se">&lt;/span> --enable-pythoninterp&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="se">&lt;/span> --with-python-config-dir&lt;span class="o">=&lt;/span>/usr/lib64/python2.7/config &lt;span class="se">\
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="se">&lt;/span> --with-python3-config-dir&lt;span class="o">=&lt;/span>/usr/lib64/python3.6/config-3.6m-x86_64-linux-gnu &lt;span class="se">\
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="se">&lt;/span> --enable-fontset&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="se">&lt;/span> --enable-cscope&lt;span class="o">=&lt;/span>yes &lt;span class="se">\
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="se">&lt;/span> --enable-multibyte &lt;span class="se">\
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="se">&lt;/span> --disable-gui &lt;span class="se">\
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="se">&lt;/span> --enable-fail-if-missing &lt;span class="se">\
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="se">&lt;/span> --prefix&lt;span class="o">=&lt;/span>/usr/local &lt;span class="se">\
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="se">&lt;/span> --with-compiledby&lt;span class="o">=&lt;/span>&lt;span class="s1">&amp;#39;Professional operations&amp;#39;&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="c1"># 编译&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c1"># make VIMRUNTIMEDIR=*** 表示指定VIM可执行文件的位置&lt;/span>
&lt;span class="ln">26&lt;/span>make &lt;span class="nv">VIMRUNTIMEDIR&lt;/span>&lt;span class="o">=&lt;/span>/usr/local/share/vim/vim82 &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> make install
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译完成之后，查看一下vim的版本：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ vim --version
&lt;span class="ln">2&lt;/span>VIM - Vi IMproved 8.2 &lt;span class="o">(&lt;/span>&lt;span class="m">2019&lt;/span> Dec 12, compiled Mar &lt;span class="m">16&lt;/span> &lt;span class="m">2021&lt;/span> 16:12:42&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="配置与插件">配置与插件&lt;/h2>
&lt;p>为了支持go代码的开发，这里先以go的IDE环境为示例，&lt;/p>
&lt;p>首先，插件的管理工具，这里选择 vim-plug。在Linux环境下直接用curl下载即可：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>curl -fLo ~/.vim/autoload/plug.vim --create-dirs &lt;span class="se">\
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="se">&lt;/span> https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
&lt;/code>&lt;/pre>&lt;/div>&lt;p>插件的配置也非常简单，只要将所有的插件配置在 &lt;code>call plug#begin('~/.vim/plugged')&lt;/code> 和 &lt;code>call plug#end()&lt;/code> 之间即可，常见的插件基本上都可以从 github 中找到，如果 github 找不到的话基本上 vim.org 的脚本都可以在 &lt;a href="https://github.com/vim-scripts">vim-script&lt;/a> 中找到备份&lt;/p>
&lt;p>来看一下 &lt;code>~/.vimrc&lt;/code> 的最终配置：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="s2">&amp;#34; 显示行数
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="s2">set number
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 显示光标所在的当前行的行号，其他行都为相对于该行的相对行号。
&lt;span class="ln"> 5&lt;/span>&lt;span class="s2">&amp;#34; set relativenumber
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 光标所在当前行高亮
&lt;span class="ln"> 8&lt;/span>&lt;span class="s2">&amp;#34; set cursorline
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 10&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 自动折行，即太长的行分成几行显示。
&lt;span class="ln"> 11&lt;/span>&lt;span class="s2">&amp;#34; 关闭自动折行
&lt;/span>&lt;span class="ln"> 12&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nb">set&lt;/span> nowrap
&lt;span class="ln"> 13&lt;/span>&lt;span class="nb">set&lt;/span> wrap
&lt;span class="ln"> 14&lt;/span>
&lt;span class="ln"> 15&lt;/span>&lt;span class="s2">&amp;#34; 只有遇到指定的符号（比如空格、连词号和其他标点符号），才发生折行。也就是说，不会在单词内部折行。
&lt;/span>&lt;span class="ln"> 16&lt;/span>&lt;span class="s2">set linebreak
&lt;/span>&lt;span class="ln"> 17&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 18&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 指定折行处与编辑窗口的右边缘之间空出的字符数。
&lt;span class="ln"> 19&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">wrapmargin&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln"> 20&lt;/span>
&lt;span class="ln"> 21&lt;/span>&lt;span class="s2">&amp;#34; 避免 backspace 不能使用
&lt;/span>&lt;span class="ln"> 22&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">0&lt;/span> same as “:set &lt;span class="nv">backspace&lt;/span>&lt;span class="o">=&lt;/span>” &lt;span class="o">(&lt;/span>Vi compatible&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 23&lt;/span>&lt;span class="s2">&amp;#34; 1 same as “:set backspace=indent,eol”
&lt;/span>&lt;span class="ln"> 24&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="m">2&lt;/span> same as “:set &lt;span class="nv">backspace&lt;/span>&lt;span class="o">=&lt;/span>indent,eol,start”
&lt;span class="ln"> 25&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">backspace&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln"> 26&lt;/span>
&lt;span class="ln"> 27&lt;/span>&lt;span class="s2">&amp;#34; 自动将tab键转为空格
&lt;/span>&lt;span class="ln"> 28&lt;/span>&lt;span class="s2">set expandtab
&lt;/span>&lt;span class="ln"> 29&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 30&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> tab 转为多少个空格
&lt;span class="ln"> 31&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">softtabstop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln"> 32&lt;/span>
&lt;span class="ln"> 33&lt;/span>&lt;span class="s2">&amp;#34; 设置语法高亮
&lt;/span>&lt;span class="ln"> 34&lt;/span>&lt;span class="s2">syntax enable
&lt;/span>&lt;span class="ln"> 35&lt;/span>&lt;span class="s2">syntax on
&lt;/span>&lt;span class="ln"> 36&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 37&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 按下回车键后，下一行的缩进会自动跟上一行的缩进保持一致。
&lt;span class="ln"> 38&lt;/span>&lt;span class="nb">set&lt;/span> autoindent
&lt;span class="ln"> 39&lt;/span>
&lt;span class="ln"> 40&lt;/span>&lt;span class="s2">&amp;#34; 光标遇到圆括号、方括号、大括号时，自动高亮对应的另一个圆括号、方括号和大括号
&lt;/span>&lt;span class="ln"> 41&lt;/span>&lt;span class="s2">set showmatch
&lt;/span>&lt;span class="ln"> 42&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 43&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 按下tab键时，vim显示的空格数
&lt;span class="ln"> 44&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">tabstop&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">4&lt;/span>
&lt;span class="ln"> 45&lt;/span>
&lt;span class="ln"> 46&lt;/span>&lt;span class="s2">&amp;#34; 统一缩进为4
&lt;/span>&lt;span class="ln"> 47&lt;/span>&lt;span class="s2">set shiftwidth=4
&lt;/span>&lt;span class="ln"> 48&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 49&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 在底部显示，当前处于命令模式还是插入模式
&lt;span class="ln"> 50&lt;/span>&lt;span class="nb">set&lt;/span> showmode
&lt;span class="ln"> 51&lt;/span>
&lt;span class="ln"> 52&lt;/span>&lt;span class="s2">&amp;#34; 支持使用鼠标
&lt;/span>&lt;span class="ln"> 53&lt;/span>&lt;span class="s2">set mouse-=a
&lt;/span>&lt;span class="ln"> 54&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 55&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 使用 utf-8 编码
&lt;span class="ln"> 56&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">encoding&lt;/span>&lt;span class="o">=&lt;/span>utf-8
&lt;span class="ln"> 57&lt;/span>
&lt;span class="ln"> 58&lt;/span>&lt;span class="s2">&amp;#34; 开启文件类型检查，并且载入与该类型对应的缩进规则。比如，如果编辑的是.py文件，Vim 就是会找 Python 的缩进规则~/.vim/indent/python.vim。
&lt;/span>&lt;span class="ln"> 59&lt;/span>&lt;span class="s2">filetype indent on
&lt;/span>&lt;span class="ln"> 60&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 61&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>--------------------------------------
&lt;span class="ln"> 62&lt;/span>&lt;span class="s2">&amp;#34; 搜索
&lt;/span>&lt;span class="ln"> 63&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>--------------------------------------
&lt;span class="ln"> 64&lt;/span>&lt;span class="s2">&amp;#34; 搜索时，高亮显示匹配结果
&lt;/span>&lt;span class="ln"> 65&lt;/span>&lt;span class="s2">set hlsearch
&lt;/span>&lt;span class="ln"> 66&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 67&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 搜索时忽略大小写
&lt;span class="ln"> 68&lt;/span>&lt;span class="nb">set&lt;/span> ignorecase
&lt;span class="ln"> 69&lt;/span>&lt;span class="s2">&amp;#34;--------------------------------------
&lt;/span>&lt;span class="ln"> 70&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 搜索&lt;span class="o">(&lt;/span>END&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 71&lt;/span>&lt;span class="s2">&amp;#34;--------------------------------------
&lt;/span>&lt;span class="ln"> 72&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 73&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>--------------------------------------
&lt;span class="ln"> 74&lt;/span>&lt;span class="s2">&amp;#34; 编辑
&lt;/span>&lt;span class="ln"> 75&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>--------------------------------------
&lt;span class="ln"> 76&lt;/span>&lt;span class="s2">&amp;#34; 打开英语单词的拼写检查
&lt;/span>&lt;span class="ln"> 77&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nb">set&lt;/span> spell &lt;span class="nv">spelllang&lt;/span>&lt;span class="o">=&lt;/span>en_us
&lt;span class="ln"> 78&lt;/span>
&lt;span class="ln"> 79&lt;/span>&lt;span class="s2">&amp;#34; 不创建交换文件。交换文件主要用于系统崩溃时恢复文件，文件名的开头是.、结尾是.swp。
&lt;/span>&lt;span class="ln"> 80&lt;/span>&lt;span class="s2">set noswapfile
&lt;/span>&lt;span class="ln"> 81&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln"> 82&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 启用自动补全
&lt;span class="ln"> 83&lt;/span>filetype plugin indent on
&lt;span class="ln"> 84&lt;/span>
&lt;span class="ln"> 85&lt;/span>&lt;span class="s2">&amp;#34; 退出插入模式指定类型的文件自动保存
&lt;/span>&lt;span class="ln"> 86&lt;/span>&lt;span class="s2">au InsertLeave *.go,*.sh,*.php write
&lt;/span>&lt;span class="ln"> 87&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>--------------------------------------
&lt;span class="ln"> 88&lt;/span>&lt;span class="s2">&amp;#34; 编辑(结束)
&lt;/span>&lt;span class="ln"> 89&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>-------------------------------------
&lt;span class="ln"> 90&lt;/span>&lt;span class="nb">set&lt;/span> nocompatible &lt;span class="s2">&amp;#34; 去除VI一致性,必须
&lt;/span>&lt;span class="ln"> 91&lt;/span>&lt;span class="s2">filetype off &amp;#34;&lt;/span> 必须
&lt;span class="ln"> 92&lt;/span>
&lt;span class="ln"> 93&lt;/span>
&lt;span class="ln"> 94&lt;/span>&lt;span class="s2">&amp;#34;--------------------------------------
&lt;/span>&lt;span class="ln"> 95&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> vim-plug
&lt;span class="ln"> 96&lt;/span>&lt;span class="s2">&amp;#34;--------------------------------------
&lt;/span>&lt;span class="ln"> 97&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34; 插件开始的位置
&lt;/span>&lt;span class="ln"> 98&lt;/span>&lt;span class="s2">call plug#begin(&amp;#39;~/.vim/plugged&amp;#39;)
&lt;/span>&lt;span class="ln"> 99&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">100&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> Shorthand notation&lt;span class="p">;&lt;/span> fetches https://github.com/junegunn/vim-easy-align
&lt;span class="ln">101&lt;/span>&lt;span class="s2">&amp;#34; 可以快速对齐的插件
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="s2">Plug &amp;#39;junegunn/vim-easy-align&amp;#39;
&lt;/span>&lt;span class="ln">103&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">104&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 用来提供一个导航目录的侧边栏
&lt;span class="ln">105&lt;/span>Plug &lt;span class="s1">&amp;#39;scrooloose/nerdtree&amp;#39;&lt;/span>
&lt;span class="ln">106&lt;/span>
&lt;span class="ln">107&lt;/span>&lt;span class="s2">&amp;#34; 可以使 nerdtree 的 tab 更加友好些
&lt;/span>&lt;span class="ln">108&lt;/span>&lt;span class="s2">Plug &amp;#39;jistr/vim-nerdtree-tabs&amp;#39;
&lt;/span>&lt;span class="ln">109&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">110&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 可以在导航目录中看到 git 版本信息
&lt;span class="ln">111&lt;/span>Plug &lt;span class="s1">&amp;#39;Xuyuanp/nerdtree-git-plugin&amp;#39;&lt;/span>
&lt;span class="ln">112&lt;/span>
&lt;span class="ln">113&lt;/span>&lt;span class="s2">&amp;#34; 查看当前代码文件中的变量和函数列表的插件，
&lt;/span>&lt;span class="ln">114&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 可以切换和跳转到代码中对应的变量和函数的位置
&lt;span class="ln">115&lt;/span>&lt;span class="s2">&amp;#34; 大纲式导航, Go 需要 https://github.com/jstemmer/gotags 支持
&lt;/span>&lt;span class="ln">116&lt;/span>&lt;span class="s2">Plug &amp;#39;majutsushi/tagbar&amp;#39;
&lt;/span>&lt;span class="ln">117&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">118&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 自动补全括号的插件，包括小括号，中括号，以及花括号
&lt;span class="ln">119&lt;/span>Plug &lt;span class="s1">&amp;#39;jiangmiao/auto-pairs&amp;#39;&lt;/span>
&lt;span class="ln">120&lt;/span>
&lt;span class="ln">121&lt;/span>&lt;span class="s2">&amp;#34; Vim状态栏插件，包括显示行号，列号，文件类型，文件名，以及Git状态
&lt;/span>&lt;span class="ln">122&lt;/span>&lt;span class="s2">Plug &amp;#39;vim-airline/vim-airline&amp;#39;
&lt;/span>&lt;span class="ln">123&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">124&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 有道词典在线翻译
&lt;span class="ln">125&lt;/span>&lt;span class="s2">&amp;#34; Plug &amp;#39;ianva/vim-youdao-translater&amp;#39;
&lt;/span>&lt;span class="ln">126&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">127&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 代码自动完成，安装完插件还需要额外配置才可以使用
&lt;span class="ln">128&lt;/span>Plug &lt;span class="s1">&amp;#39;Valloric/YouCompleteMe&amp;#39;&lt;/span>
&lt;span class="ln">129&lt;/span>
&lt;span class="ln">130&lt;/span>&lt;span class="s2">&amp;#34; 可以在文档中显示 git 信息
&lt;/span>&lt;span class="ln">131&lt;/span>&lt;span class="s2">Plug &amp;#39;airblade/vim-gitgutter&amp;#39;
&lt;/span>&lt;span class="ln">132&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">133&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">134&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 下面两个插件要配合使用，可以自动生成代码块
&lt;span class="ln">135&lt;/span>&lt;span class="s2">&amp;#34;Plug &amp;#39;SirVer/ultisnips&amp;#39;
&lt;/span>&lt;span class="ln">136&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>Plug &lt;span class="s1">&amp;#39;honza/vim-snippets&amp;#39;&lt;/span>
&lt;span class="ln">137&lt;/span>
&lt;span class="ln">138&lt;/span>&lt;span class="s2">&amp;#34; 可以在 vim 中使用 tab 补全
&lt;/span>&lt;span class="ln">139&lt;/span>&lt;span class="s2">Plug &amp;#39;vim-scripts/SuperTab&amp;#39;
&lt;/span>&lt;span class="ln">140&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">141&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 可以在 vim 中自动完成
&lt;span class="ln">142&lt;/span>&lt;span class="s2">&amp;#34;Plug &amp;#39;Shougo/neocomplete.vim&amp;#39;
&lt;/span>&lt;span class="ln">143&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">144&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">145&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 配色方案
&lt;span class="ln">146&lt;/span>&lt;span class="s2">&amp;#34; colorscheme neodark
&lt;/span>&lt;span class="ln">147&lt;/span>&lt;span class="s2">Plug &amp;#39;KeitaNakamura/neodark.vim&amp;#39;
&lt;/span>&lt;span class="ln">148&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> colorscheme monokai
&lt;span class="ln">149&lt;/span>Plug &lt;span class="s1">&amp;#39;crusoexia/vim-monokai&amp;#39;&lt;/span>
&lt;span class="ln">150&lt;/span>&lt;span class="s2">&amp;#34; colorscheme github
&lt;/span>&lt;span class="ln">151&lt;/span>&lt;span class="s2">Plug &amp;#39;acarapetis/vim-colors-github&amp;#39;
&lt;/span>&lt;span class="ln">152&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> colorscheme one
&lt;span class="ln">153&lt;/span>Plug &lt;span class="s1">&amp;#39;rakr/vim-one&amp;#39;&lt;/span>
&lt;span class="ln">154&lt;/span>
&lt;span class="ln">155&lt;/span>&lt;span class="s2">&amp;#34; go 主要插件
&lt;/span>&lt;span class="ln">156&lt;/span>&lt;span class="s2">Plug &amp;#39;fatih/vim-go&amp;#39;, { &amp;#39;tag&amp;#39;: &amp;#39;*&amp;#39; }
&lt;/span>&lt;span class="ln">157&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> go 中的代码追踪，输入 gd 就可以自动跳转
&lt;span class="ln">158&lt;/span>&lt;span class="s2">&amp;#34; Plug &amp;#39;dgryski/vim-godef&amp;#39;
&lt;/span>&lt;span class="ln">159&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">160&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> markdown 插件
&lt;span class="ln">161&lt;/span>Plug &lt;span class="s1">&amp;#39;iamcco/mathjax-support-for-mkdp&amp;#39;&lt;/span>
&lt;span class="ln">162&lt;/span>Plug &lt;span class="s1">&amp;#39;iamcco/markdown-preview.vim&amp;#39;&lt;/span>
&lt;span class="ln">163&lt;/span>
&lt;span class="ln">164&lt;/span>&lt;span class="s2">&amp;#34; 插件结束的位置，插件全部放在此行上面
&lt;/span>&lt;span class="ln">165&lt;/span>&lt;span class="s2">call plug#end()
&lt;/span>&lt;span class="ln">166&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>-------------------------------------
&lt;span class="ln">167&lt;/span>&lt;span class="s2">&amp;#34; VIM-PLUG(end)
&lt;/span>&lt;span class="ln">168&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>-------------------------------------
&lt;span class="ln">169&lt;/span>
&lt;span class="ln">170&lt;/span>&lt;span class="s2">&amp;#34;==============================================================================
&lt;/span>&lt;span class="ln">171&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 主题配色
&lt;span class="ln">172&lt;/span>&lt;span class="s2">&amp;#34;==============================================================================
&lt;/span>&lt;span class="ln">173&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 使用256色
&lt;span class="ln">174&lt;/span>&lt;span class="s2">&amp;#34; set t_Co=256
&lt;/span>&lt;span class="ln">175&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">176&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 开启24bit的颜色，开启这个颜色会更漂亮一些
&lt;span class="ln">177&lt;/span>&lt;span class="nb">set&lt;/span> termguicolors
&lt;span class="ln">178&lt;/span>&lt;span class="s2">&amp;#34; 配色方案, 可以从上面插件安装中的选择一个使用
&lt;/span>&lt;span class="ln">179&lt;/span>&lt;span class="s2">colorscheme one &amp;#34;&lt;/span> 主题
&lt;span class="ln">180&lt;/span>&lt;span class="nb">set&lt;/span> &lt;span class="nv">background&lt;/span>&lt;span class="o">=&lt;/span>dark &lt;span class="s2">&amp;#34; 主题背景 dark-深色; light-浅色
&lt;/span>&lt;span class="ln">181&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">182&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">183&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">184&lt;/span>&lt;span class="s2">&amp;#34; vim-go 插件
&lt;/span>&lt;span class="ln">185&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">186&lt;/span>&lt;span class="nb">let&lt;/span> g:go_fmt_command &lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;goimports&amp;#34;&lt;/span> &lt;span class="s2">&amp;#34; 格式化将默认的 gofmt 替换
&lt;/span>&lt;span class="ln">187&lt;/span>&lt;span class="s2">let g:go_autodetect_gopath = 1
&lt;/span>&lt;span class="ln">188&lt;/span>&lt;span class="s2">let g:go_list_type = &amp;#34;&lt;/span>quickfix&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="ln">189&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">190&lt;/span>&lt;span class="s2">let g:go_version_warning = 1
&lt;/span>&lt;span class="ln">191&lt;/span>&lt;span class="s2">let g:go_highlight_types = 1
&lt;/span>&lt;span class="ln">192&lt;/span>&lt;span class="s2">let g:go_highlight_fields = 1
&lt;/span>&lt;span class="ln">193&lt;/span>&lt;span class="s2">let g:go_highlight_functions = 1
&lt;/span>&lt;span class="ln">194&lt;/span>&lt;span class="s2">let g:go_highlight_function_calls = 1
&lt;/span>&lt;span class="ln">195&lt;/span>&lt;span class="s2">let g:go_highlight_operators = 1
&lt;/span>&lt;span class="ln">196&lt;/span>&lt;span class="s2">let g:go_highlight_extra_types = 1
&lt;/span>&lt;span class="ln">197&lt;/span>&lt;span class="s2">let g:go_highlight_methods = 1
&lt;/span>&lt;span class="ln">198&lt;/span>&lt;span class="s2">let g:go_highlight_generate_tags = 1
&lt;/span>&lt;span class="ln">199&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">200&lt;/span>&lt;span class="s2">let g:godef_split=2
&lt;/span>&lt;span class="ln">201&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">202&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">203&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">204&lt;/span>&lt;span class="s2">&amp;#34; NERDTree 插件
&lt;/span>&lt;span class="ln">205&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">206&lt;/span>
&lt;span class="ln">207&lt;/span>&lt;span class="s2">&amp;#34; 打开和关闭NERDTree快捷键
&lt;/span>&lt;span class="ln">208&lt;/span>&lt;span class="s2">map &amp;lt;F3&amp;gt; :NERDTreeToggle&amp;lt;CR&amp;gt;
&lt;/span>&lt;span class="ln">209&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 显示行号
&lt;span class="ln">210&lt;/span>&lt;span class="nb">let&lt;/span> &lt;span class="nv">NERDTreeShowLineNumbers&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">1&lt;/span>
&lt;span class="ln">211&lt;/span>&lt;span class="s2">&amp;#34; 打开文件时是否显示目录
&lt;/span>&lt;span class="ln">212&lt;/span>&lt;span class="s2">let NERDTreeAutoCenter=1
&lt;/span>&lt;span class="ln">213&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 是否显示隐藏文件
&lt;span class="ln">214&lt;/span>&lt;span class="nb">let&lt;/span> &lt;span class="nv">NERDTreeShowHidden&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">215&lt;/span>&lt;span class="s2">&amp;#34; 设置宽度
&lt;/span>&lt;span class="ln">216&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> &lt;span class="nb">let&lt;/span> &lt;span class="nv">NERDTreeWinSize&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">31&lt;/span>
&lt;span class="ln">217&lt;/span>&lt;span class="s2">&amp;#34; 忽略一下文件的显示
&lt;/span>&lt;span class="ln">218&lt;/span>&lt;span class="s2">let NERDTreeIgnore=[&amp;#39;\.pyc&amp;#39;,&amp;#39;\~&lt;/span>$&lt;span class="s2">&amp;#39;,&amp;#39;\.swp&amp;#39;]
&lt;/span>&lt;span class="ln">219&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> 打开 vim 文件及显示书签列表
&lt;span class="ln">220&lt;/span>&lt;span class="nb">let&lt;/span> &lt;span class="nv">NERDTreeShowBookmarks&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">2&lt;/span>
&lt;span class="ln">221&lt;/span>
&lt;span class="ln">222&lt;/span>&lt;span class="s2">&amp;#34; 在终端启动vim时，共享NERDTree
&lt;/span>&lt;span class="ln">223&lt;/span>&lt;span class="s2">let g:nerdtree_tabs_open_on_console_startup=1
&lt;/span>&lt;span class="ln">224&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">225&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">226&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">227&lt;/span>&lt;span class="s2">&amp;#34; majutsushi/tagbar 插件
&lt;/span>&lt;span class="ln">228&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">229&lt;/span>
&lt;span class="ln">230&lt;/span>&lt;span class="s2">&amp;#34; majutsushi/tagbar 插件打开关闭快捷键
&lt;/span>&lt;span class="ln">231&lt;/span>&lt;span class="s2">nmap &amp;lt;F9&amp;gt; :TagbarToggle&amp;lt;CR&amp;gt;
&lt;/span>&lt;span class="ln">232&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">233&lt;/span>&lt;span class="s2">let g:tagbar_type_go = {
&lt;/span>&lt;span class="ln">234&lt;/span>&lt;span class="s2"> \ &amp;#39;ctagstype&amp;#39; : &amp;#39;go&amp;#39;,
&lt;/span>&lt;span class="ln">235&lt;/span>&lt;span class="s2"> \ &amp;#39;kinds&amp;#39; : [
&lt;/span>&lt;span class="ln">236&lt;/span>&lt;span class="s2"> \ &amp;#39;p:package&amp;#39;,
&lt;/span>&lt;span class="ln">237&lt;/span>&lt;span class="s2"> \ &amp;#39;i:imports:1&amp;#39;,
&lt;/span>&lt;span class="ln">238&lt;/span>&lt;span class="s2"> \ &amp;#39;c:constants&amp;#39;,
&lt;/span>&lt;span class="ln">239&lt;/span>&lt;span class="s2"> \ &amp;#39;v:variables&amp;#39;,
&lt;/span>&lt;span class="ln">240&lt;/span>&lt;span class="s2"> \ &amp;#39;t:types&amp;#39;,
&lt;/span>&lt;span class="ln">241&lt;/span>&lt;span class="s2"> \ &amp;#39;n:interfaces&amp;#39;,
&lt;/span>&lt;span class="ln">242&lt;/span>&lt;span class="s2"> \ &amp;#39;w:fields&amp;#39;,
&lt;/span>&lt;span class="ln">243&lt;/span>&lt;span class="s2"> \ &amp;#39;e:embedded&amp;#39;,
&lt;/span>&lt;span class="ln">244&lt;/span>&lt;span class="s2"> \ &amp;#39;m:methods&amp;#39;,
&lt;/span>&lt;span class="ln">245&lt;/span>&lt;span class="s2"> \ &amp;#39;r:constructor&amp;#39;,
&lt;/span>&lt;span class="ln">246&lt;/span>&lt;span class="s2"> \ &amp;#39;f:functions&amp;#39;
&lt;/span>&lt;span class="ln">247&lt;/span>&lt;span class="s2"> \ ],
&lt;/span>&lt;span class="ln">248&lt;/span>&lt;span class="s2"> \ &amp;#39;sro&amp;#39; : &amp;#39;.&amp;#39;,
&lt;/span>&lt;span class="ln">249&lt;/span>&lt;span class="s2"> \ &amp;#39;kind2scope&amp;#39; : {
&lt;/span>&lt;span class="ln">250&lt;/span>&lt;span class="s2"> \ &amp;#39;t&amp;#39; : &amp;#39;ctype&amp;#39;,
&lt;/span>&lt;span class="ln">251&lt;/span>&lt;span class="s2"> \ &amp;#39;n&amp;#39; : &amp;#39;ntype&amp;#39;
&lt;/span>&lt;span class="ln">252&lt;/span>&lt;span class="s2"> \ },
&lt;/span>&lt;span class="ln">253&lt;/span>&lt;span class="s2"> \ &amp;#39;scope2kind&amp;#39; : {
&lt;/span>&lt;span class="ln">254&lt;/span>&lt;span class="s2"> \ &amp;#39;ctype&amp;#39; : &amp;#39;t&amp;#39;,
&lt;/span>&lt;span class="ln">255&lt;/span>&lt;span class="s2"> \ &amp;#39;ntype&amp;#39; : &amp;#39;n&amp;#39;
&lt;/span>&lt;span class="ln">256&lt;/span>&lt;span class="s2"> \ },
&lt;/span>&lt;span class="ln">257&lt;/span>&lt;span class="s2"> \ &amp;#39;ctagsbin&amp;#39; : &amp;#39;gotags&amp;#39;,
&lt;/span>&lt;span class="ln">258&lt;/span>&lt;span class="s2"> \ &amp;#39;ctagsargs&amp;#39; : &amp;#39;-sort -silent&amp;#39;
&lt;/span>&lt;span class="ln">259&lt;/span>&lt;span class="s2">\ }
&lt;/span>&lt;span class="ln">260&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">261&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">262&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">263&lt;/span>&lt;span class="s2">&amp;#34; nerdtree-git-plugin 插件
&lt;/span>&lt;span class="ln">264&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">265&lt;/span>&lt;span class="nb">let&lt;/span> g:NERDTreeGitStatusIndicatorMapCustom &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">266&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Modified&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✹&amp;#34;&lt;/span>,
&lt;span class="ln">267&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Staged&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✚&amp;#34;&lt;/span>,
&lt;span class="ln">268&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Untracked&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✭&amp;#34;&lt;/span>,
&lt;span class="ln">269&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Renamed&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;➜&amp;#34;&lt;/span>,
&lt;span class="ln">270&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Unmerged&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;═&amp;#34;&lt;/span>,
&lt;span class="ln">271&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Deleted&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✖&amp;#34;&lt;/span>,
&lt;span class="ln">272&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Dirty&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✗&amp;#34;&lt;/span>,
&lt;span class="ln">273&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Clean&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;✔︎&amp;#34;&lt;/span>,
&lt;span class="ln">274&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s1">&amp;#39;Ignored&amp;#39;&lt;/span> : &lt;span class="s1">&amp;#39;☒&amp;#39;&lt;/span>,
&lt;span class="ln">275&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="s2">&amp;#34;Unknown&amp;#34;&lt;/span> : &lt;span class="s2">&amp;#34;?&amp;#34;&lt;/span>
&lt;span class="ln">276&lt;/span> &lt;span class="se">\ &lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">277&lt;/span>
&lt;span class="ln">278&lt;/span>&lt;span class="nb">let&lt;/span> g:NERDTreeGitStatusShowIgnored &lt;span class="o">=&lt;/span> &lt;span class="m">1&lt;/span>
&lt;span class="ln">279&lt;/span>
&lt;span class="ln">280&lt;/span>
&lt;span class="ln">281&lt;/span>
&lt;span class="ln">282&lt;/span>&lt;span class="s2">&amp;#34;==============================================================================
&lt;/span>&lt;span class="ln">283&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> Valloric/YouCompleteMe 插件
&lt;span class="ln">284&lt;/span>&lt;span class="s2">&amp;#34;==============================================================================
&lt;/span>&lt;span class="ln">285&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">286&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> make YCM compatible with UltiSnips &lt;span class="o">(&lt;/span>using supertab&lt;span class="o">)&lt;/span>
&lt;span class="ln">287&lt;/span>&lt;span class="nb">let&lt;/span> g:ycm_key_list_select_completion &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;C-n&amp;gt;&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;&amp;lt;space&amp;gt;&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="ln">288&lt;/span>&lt;span class="nb">let&lt;/span> g:ycm_key_list_previous_completion &lt;span class="o">=&lt;/span> &lt;span class="o">[&lt;/span>&lt;span class="s1">&amp;#39;&amp;lt;C-p&amp;gt;&amp;#39;&lt;/span>, &lt;span class="s1">&amp;#39;&amp;lt;Up&amp;gt;&amp;#39;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;span class="ln">289&lt;/span>&lt;span class="nb">let&lt;/span> g:SuperTabDefaultCompletionType &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;&amp;lt;C-n&amp;gt;&amp;#39;&lt;/span>
&lt;span class="ln">290&lt;/span>
&lt;span class="ln">291&lt;/span>&lt;span class="s2">&amp;#34; better key bindings for UltiSnipsExpandTrigger
&lt;/span>&lt;span class="ln">292&lt;/span>&lt;span class="s2">let g:UltiSnipsExpandTrigger = &amp;#34;&lt;/span>&amp;lt;tab&amp;gt;&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="ln">293&lt;/span>&lt;span class="s2">let g:UltiSnipsJumpForwardTrigger = &amp;#34;&lt;/span>&amp;lt;tab&amp;gt;&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="ln">294&lt;/span>&lt;span class="s2">let g:UltiSnipsJumpBackwardTrigger = &amp;#34;&lt;/span>&amp;lt;s-tab&amp;gt;&lt;span class="s2">&amp;#34;
&lt;/span>&lt;span class="ln">295&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">296&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">297&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">298&lt;/span>&lt;span class="s2">&amp;#34; 其他插件配置
&lt;/span>&lt;span class="ln">299&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="o">==============================================================================&lt;/span>
&lt;span class="ln">300&lt;/span>
&lt;span class="ln">301&lt;/span>&lt;span class="s2">&amp;#34; markdwon 的快捷键
&lt;/span>&lt;span class="ln">302&lt;/span>&lt;span class="s2">map &amp;lt;silent&amp;gt; &amp;lt;F5&amp;gt; &amp;lt;Plug&amp;gt;MarkdownPreview
&lt;/span>&lt;span class="ln">303&lt;/span>&lt;span class="s2">map &amp;lt;silent&amp;gt; &amp;lt;F6&amp;gt; &amp;lt;Plug&amp;gt;StopMarkdownPreview
&lt;/span>&lt;span class="ln">304&lt;/span>&lt;span class="s2">
&lt;/span>&lt;span class="ln">305&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> tab 标签页切换快捷键
&lt;span class="ln">306&lt;/span>:nn &amp;lt;Leader&amp;gt;1 1gt
&lt;span class="ln">307&lt;/span>:nn &amp;lt;Leader&amp;gt;2 2gt
&lt;span class="ln">308&lt;/span>:nn &amp;lt;Leader&amp;gt;3 3gt
&lt;span class="ln">309&lt;/span>:nn &amp;lt;Leader&amp;gt;4 4gt
&lt;span class="ln">310&lt;/span>:nn &amp;lt;Leader&amp;gt;5 5gt
&lt;span class="ln">311&lt;/span>:nn &amp;lt;Leader&amp;gt;6 6gt
&lt;span class="ln">312&lt;/span>:nn &amp;lt;Leader&amp;gt;7 7gt
&lt;span class="ln">313&lt;/span>:nn &amp;lt;Leader&amp;gt;8 8gt
&lt;span class="ln">314&lt;/span>:nn &amp;lt;Leader&amp;gt;9 8gt
&lt;span class="ln">315&lt;/span>:nn &amp;lt;Leader&amp;gt;0 :tablast&amp;lt;CR&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;p>&lt;a href="https://learnku.com/articles/24924">将 VIM 打造成 go 语言的 ide&lt;/a>&lt;/p></description></item><item><title>Go 语言工作目录</title><link>https://ahamoment.cn/post/go-project-catalogs/</link><pubDate>Mon, 15 Mar 2021 10:16:45 +0800</pubDate><guid>https://ahamoment.cn/post/go-project-catalogs/</guid><description>
&lt;p>GOPATH 是 Go语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录。&lt;/p>
&lt;p>工作目录是一个工程开发的相对参考目录，好比当你要在公司编写一套服务器代码，你的工位所包含的桌面、计算机及椅子就是你的工作区。工作区的概念与工作目录的概念也是类似的。如果不使用工作目录的概念，在多人开发时，每个人有一套自己的目录结构，读取配置文件的位置不统一，输出的二进制运行文件也不统一，这样会导致开发的标准不统一，影响开发效率。&lt;/p>
&lt;p>GOPATH 适合处理大量 Go语言源码、多个包组合而成的复杂工程。&lt;/p>
&lt;p>在命令行中运行 &lt;code>go env&lt;/code> 来查看当前 GOPATH 路径设置情况：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># go env&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nv">GO111MODULE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">GOARCH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">GOBIN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">GOCACHE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/.cache/go-build&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">GOENV&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/.config/go/env&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">GOEXE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">GOFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">GOHOSTARCH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nv">GOHOSTOS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;linux&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">GOINSECURE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">GOMODCACHE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/go/pkg/mod&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">GONOPROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nv">GONOSUMDB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nv">GOOS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;linux&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/go&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nv">GOPROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://proxy.golang.org,direct&amp;#34;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/go&amp;#34;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nv">GOSUMDB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;sum.golang.org&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="nv">GOTMPDIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">GOTOOLDIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/go/pkg/tool/linux_amd64&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="nv">GOVCS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="nv">GOVERSION&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;go1.16&amp;#34;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="nv">GCCGO&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gccgo&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nv">AR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ar&amp;#34;&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="nv">CC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gcc&amp;#34;&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="nv">CXX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;g++&amp;#34;&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nv">CGO_ENABLED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="nv">GOMOD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="nv">CGO_CFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="nv">CGO_CPPFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="nv">CGO_CXXFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="nv">CGO_FFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="nv">CGO_LDFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="nv">PKG_CONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;pkg-config&amp;#34;&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="nv">GOGCCFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build439564896=/tmp/go-build -gno-record-gcc-switches&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令行输出的说明如下：&lt;/p>
&lt;ul>
&lt;li>GOARCH 表示目标处理器的架构&lt;/li>
&lt;li>GOBIN 表示编译器和链接器的安装位置&lt;/li>
&lt;li>GOOS 表示目标操作系统&lt;/li>
&lt;li>GOPATH 表示当前工作目录&lt;/li>
&lt;li>GOROOT 表示GO开发包的安装目录&lt;/li>
&lt;/ul>
&lt;p>从命令行输出可以看出，当前GOPATH 的路径为： /root/go。&lt;/p>
&lt;p>在 GOPATH 指定的工作目录下，代码总是会保存在 &lt;code>$GOPATH/src&lt;/code> 目录下。在工程经过 go build、go install 或 go get 等指令后，会将产生的二进制可执行文件放在 &lt;code>$GOPATH/bin&lt;/code> 目录下，生成的中间缓存文件会被保存在 &lt;code>$GOPATH/pkg&lt;/code> 下。&lt;/p>
&lt;p>如果需要将整个源码添加到版本管理工具（Version Control System，VCS）中时，只需要添加 $GOPATH/src 目录的源码即可。bin 和 pkg 目录的内容都可以由 src 目录生成。&lt;/p>
&lt;h2 id="设置和使用-gopath">设置和使用 GOPATH&lt;/h2>
&lt;p>本节以 Linux 为演示平台，为大家演示使用 GOPATH 的方法。&lt;/p>
&lt;h3 id="1-设置当前目录为gopath">1. 设置当前目录为GOPATH&lt;/h3>
&lt;p>选择一个目录，在目录中的命令行中执行下面的指令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该指令中的 pwd 将输出当前的目录，使用反引号将 pwd 指令括起来表示命令行替换，也就是说，使用&lt;code>pwd&lt;/code>将获得 pwd 返回的当前目录的值。例如，假设你的当前目录&lt;code>是“/home/davy/go”，那么使用&lt;/code>pwd将获得返回值“/home/davy/go”。&lt;/p>
&lt;p>使用 export 指令可以将当前目录的值设置到环境变量 GOPATH中。&lt;/p>
&lt;h3 id="2-建立gopath中的源码目录">2. 建立GOPATH中的源码目录&lt;/h3>
&lt;p>使用下面的指令创建 GOPATH 中的src目录，在 src 目录下还有一个 hello 目录，该目录用于保存源代码。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>mkdir -p src/hello
&lt;/code>&lt;/pre>&lt;/div>&lt;p>mkdir 指令的 -p 可以连续创建一个路径。&lt;/p>
&lt;h3 id="3-添加-maingo-源码文件">3. 添加 main.go 源码文件&lt;/h3>
&lt;p>使用 Linux 编辑器将下面的源码保存为 main.go 并保存到 &lt;code>$GOPATH/src/hello&lt;/code> 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-编译源码运行">4. 编译源码运行&lt;/h3>
&lt;p>此时我们已经设置了 GOPATH， 因此在 GO 语言中可以通过 GOPATH 找到工程的位置。&lt;/p>
&lt;p>在命令行中执行如下指令编译源码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>go install hell
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译完成的可执行文件会保存在&lt;code>$GOPATH/bin&lt;/code> 目录下。&lt;/p>
&lt;p>在 bin 目录中执行 ./hello，命令行输出如下：&lt;/p>
&lt;p>hello world&lt;/p>
&lt;h2 id="在多项目工程中使用-gopath">在多项目工程中使用 GOPATH&lt;/h2>
&lt;p>在很多与 Go语言相关的书籍、文章中描述的 GOPATH 都是通过修改系统全局的环境变量来实现的。然而，根据笔者多年的 Go语言使用和实践经验及周边朋友、同事的反馈，这种设置全局 GOPATH 的方法可能会导致当前项目错误引用了其他目录的 Go 源码文件从而造成编译输出错误的版本或编译报出一些无法理解的错误提示。&lt;/p>
&lt;p>比如说，将某项目代码保存在 /home/davy/projectA 目录下，将该目录设置为 GOPATH。随着开发进行，需要再次获取一份工程项目的源码，此时源码保存在 /home/davy/projectB 目录下，如果此时需要编译 projectB 目录的项目，但开发者忘记设置 GOPATH 而直接使用命令行编译，则当前的 GOPATH 指向的是 /home/davy/projectA 目录，而不是开发者编译时期望的 projectB 目录。编译完成后，开发者就会将错误的工程版本发布到外网。&lt;/p>
&lt;p>因此，建议大家无论是使用命令行或者使用集成开发环境编译 Go 源码时，GOPATH 跟随项目设定。在 Jetbrains 公司的 GoLand 集成开发环境（IDE）中的 GOPATH 设置分为全局 GOPATH 和项目 GOPATH，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20210315105726821.png" alt="image-20210315105726821">&lt;/p>
&lt;p>图中的 Global GOPATH 代表全局 GOPATH，一般来源于系统环境变量中的 GOPATH；Project GOPATH 代表项目所使用的 GOPATH，该设置会被保存在工作目录的 .idea 目录下，不会被设置到环境变量的 GOPATH 中，但会在编译时使用到这个目录。建议在开发时只填写项目 GOPATH，每一个项目尽量只设置一个 GOPATH，不使用多个 GOPATH 和全局的 GOPATH。&lt;/p>
&lt;h4 id="提示">提示&lt;/h4>
&lt;p>Visual Studio 早期在设计时，允许 C++ 语言在全局拥有一个包含路径。当一个工程多个版本的编译，或者两个项目混杂有不同的共享全局包含时，会发生难以察觉的错误。在新版本 Visual Studio 中已经废除了这种全局包含的路径设计，并建议开发者将包含目录与项目关联。&lt;/p>
&lt;p>Go语言中的 GOPATH 也是一种类似全局包含的设计，因此鉴于 Visual Studio 在设计上的失误，建议开发者不要设置全局的 GOPATH，而是随项目设置 GOPATH&lt;/p></description></item><item><title>bazel 外部存储库缓存</title><link>https://ahamoment.cn/post/tool-bazel/</link><pubDate>Wed, 10 Feb 2021 14:05:07 +0800</pubDate><guid>https://ahamoment.cn/post/tool-bazel/</guid><description>
&lt;h2 id="bazel-简介">bazel 简介&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>centos7：https://docs.bazel.build/versions/4.0.0/install-redhat.html&lt;/p>
&lt;p>Step1：&lt;/p>
&lt;p>从 &lt;a href="https://copr.fedorainfracloud.org/coprs/vbatts/bazel/repo/epel-7/vbatts-bazel-epel-7.repo">Fedora COPR&lt;/a> 下载 &lt;code>.repo&lt;/code> 文件并复制到 &lt;code>/etc/yum.repos.d/&lt;/code> 目录。&lt;/p>
&lt;p>Step2:&lt;/p>
&lt;p>运行 &lt;code>yum install bazel3&lt;/code> 命令安装。&lt;/p>
&lt;h3 id="教程">教程&lt;/h3>
&lt;p>&lt;strong>&lt;a href="https://docs.bazel.build/versions/master/tutorial/java.html">java&lt;/a>&lt;/strong> / &lt;strong>&lt;a href="https://docs.bazel.build/versions/master/tutorial/cpp.html">c++&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="常用命令">常用命令&lt;/h3>
&lt;p>命令文档：https://docs.bazel.build/versions/master/command-line-reference.html#fetch-options&lt;/p>
&lt;p>查询依赖关系：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel query --notool_deps --noimplicit_deps &lt;span class="s2">&amp;#34;deps(//:ProjectRunner)&amp;#34;&lt;/span> --output graph
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可视化网站：&lt;/p>
&lt;p>&lt;a href="http://www.webgraphviz.com/">http://www.webgraphviz.com/&lt;/a>&lt;/p>
&lt;p>编译命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel build //:ProjectRunner
&lt;/code>&lt;/pre>&lt;/div>&lt;p>清除命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel clean
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>bazel clean&lt;/code>在 &lt;code>outputPath&lt;/code>和&lt;code>action_cache&lt;/code>目录上执行&lt;code>rm -rf&lt;/code>。它还会删除工作空间符号链接。 &lt;code>--expunge&lt;/code>选项将清除整个&lt;code>outputBase&lt;/code>。&lt;/p>
&lt;h2 id="输出目录">输出目录&lt;/h2>
&lt;p>&lt;a href="https://docs.bazel.build/versions/master/output_directories.html">https://docs.bazel.build/versions/master/output_directories.html&lt;/a>&lt;/p>
&lt;ul>
&lt;li>必须从包含WORKSPACE文件的目录（“工作区目录”）或其子目录中调用Bazel。如果不是，它将报告错误。&lt;/li>
&lt;li>&lt;code>outputRoot&lt;/code>目录在Linux上默认为&lt;code>〜/.cache/bazel&lt;/code>，在macOS上默认为&lt;code>/ private/var/tmp&lt;/code>，在Windows上默认为&lt;code>％HOME％&lt;/code>（如果设置），否则默认为&lt;code>％USERPROFILE％&lt;/code>，否则调用&lt;code>SHGetKnownFolderPath()&lt;/code>的结果设置了&lt;code>FOLDERID_Profile&lt;/code>标志。如果设置了环境变量&lt;code>$ TEST_TMPDIR&lt;/code>（如测试bazel本身），则该值将覆盖默认值。&lt;/li>
&lt;li>我们将Bazel用户的构建状态保留在&lt;code>outputRoot/_bazel_$USER&lt;/code>下。这称为 &lt;code>outputUserRoot&lt;/code> 目录。&lt;/li>
&lt;li>在&lt;code>outputUserRoot&lt;/code>目录下，我们创建一个&lt;code>installBase&lt;/code>目录，其名称为&lt;code> install&lt;/code>加上Bazel安装清单的MD5哈希。&lt;/li>
&lt;li>在&lt;code>outputUserRoot&lt;/code>目录下，我们还创建了一个&lt;code>outputBase&lt;/code>目录，该目录的名称是工作区目录的路径名的MD5哈希。因此，例如，如果Bazel在工作空间目录&lt;code>/ home/user/src/my-projec&lt;/code>t中（或在与该目录符号链接的目录中）运行，则我们将创建一个输出基本目录，名为：&lt;code>/home/user/.cache/bazel/ _bazel_user/7ffd56a6e4cb724ea575aba15733d113&lt;/code>。&lt;/li>
&lt;li>用户可以使用Bazel的&lt;code>--output_base&lt;/code>启动选项来覆盖默认的输出基本目录。例如，&lt;code>bazel --output_base = /tmp/bazel/output build x/y:z&lt;/code>。&lt;/li>
&lt;li>用户还可以使用Bazel的&lt;code>--output_user_root&lt;/code>启动选项来覆盖默认的安装基础目录和输出基础目录。例如：&lt;code>bazel --output_user_root=/tmp/bazel build x/y:z&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>我们在工作区目录中放置了符号链接“bazel-&lt;workspace-name>”, “bazel-out”, “bazel-testlogs”, and “bazel-bin” 。这些符号链接指向输出目录内特定于目标的目录内的某些目录。这些符号链接只是为了方便用户，因为Bazel本身并不使用它们。另外，我们仅在工作空间目录可写时才这样做。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">#机器上所有Bazel输出的根目录：outputRoot&lt;/span>
&lt;span class="ln"> 2&lt;/span>/home/user/.cache/bazel/
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">#给定用户的顶级目录取决于用户名：outputUserRoot&lt;/span>
&lt;span class="ln"> 4&lt;/span> _bazel_&lt;span class="nv">$USER&lt;/span>/
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">#Bazel安装清单的哈希：installBase&lt;/span>
&lt;span class="ln"> 6&lt;/span> install/
&lt;span class="ln"> 7&lt;/span> fba9a2c87ee9589d72889caf082f1029/
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">#包含从的数据部分解压缩的二进制文件和脚本首次运行时的bazel可执行文件（例如帮助程序脚本和主Java文件BazelServer_deploy.jar）&lt;/span>
&lt;span class="ln"> 9&lt;/span> _embedded_binaries/
&lt;span class="ln">10&lt;/span> &lt;span class="c1">#客户端工作区目录的哈希(/home/some-user/src/my-project):outputBase&lt;/span>
&lt;span class="ln">11&lt;/span> 7ffd56a6e4cb724ea575aba15733d113/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="缓存">缓存&lt;/h2>
&lt;h3 id="外部依赖缓存">外部依赖缓存&lt;/h3>
&lt;p>使用 &lt;code>bazel fetch //repo:...&lt;/code>，可以从具有存储库功能的远程源（例如http_archive()或maven_jar())下载外部存储库和工件。有时，网络访问不可用，或者重新下载已下载的存储库是浪费的。&lt;/p>
&lt;p>使用中央缓存，Bazel可以在访问网络之前检查它是否包含请求的存储库。允许多个工作空间共享同一存储库高速缓存，并且缓存也是可移植的。&lt;/p>
&lt;p>&lt;strong>相关联的issue：&lt;/strong>&lt;/p>
&lt;p>Make maven_jar and friends smarter by re-using previously fetched artifacts across different projects&lt;a href="https://github.com/bazelbuild/bazel/issues/1752">＃1752&lt;/a>&lt;/p>
&lt;p>&lt;strong>缓存选项&lt;/strong>&lt;/p>
&lt;p>&lt;code>--experimental_repository_cache&lt;/code>&lt;/p>
&lt;p>&lt;code>--repository_cache&lt;/code>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>参考文档：&lt;/p>
&lt;p>&lt;a href="https://bazel.build/designs/2016/09/30/repository-cache.html">https://bazel.build/designs/2016/09/30/repository-cache.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/bazelbuild/bazel/issues/1752">https://github.com/bazelbuild/bazel/issues/1752&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Linux 常用命令</title><link>https://ahamoment.cn/post/linux-commands/</link><pubDate>Wed, 10 Feb 2021 11:54:23 +0800</pubDate><guid>https://ahamoment.cn/post/linux-commands/</guid><description>
&lt;p>设置 JAVA_HOME&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bas" data-lang="bas">&lt;span class="ln">1&lt;/span>&lt;span class="vg">export&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">JAVA_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;$(dirname $(dirname $(realpath $(which javac))))&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tee">tee&lt;/h2>
&lt;p>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件。&lt;/p>
&lt;h3 id="语法">语法&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>tee &lt;span class="o">[&lt;/span>OPTION&lt;span class="o">]&lt;/span>... &lt;span class="o">[&lt;/span>FILE&lt;span class="o">]&lt;/span>...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="说明">说明&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>-a, --append
&lt;span class="ln">2&lt;/span>添加内容到指定文件，不会覆盖源文件内容
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>-i, --ignore-interrupts
&lt;span class="ln">5&lt;/span>忽略输入
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="cat">cat&lt;/h2>
&lt;p>将文件内容输出到控制台。&lt;/p></description></item><item><title>MyBatis Generator 使用与原理(上)</title><link>https://ahamoment.cn/post/framework-mybatis-generator/</link><pubDate>Tue, 26 Jan 2021 20:06:07 +0800</pubDate><guid>https://ahamoment.cn/post/framework-mybatis-generator/</guid><description>
&lt;p>这两天在看一个开源的小说管理平台的代码，发现它的项目使用了MyBatis Generator来生成代码操作数据库，花了两个早上的时间研究了一下，确实是很不错的工具，能在我们的开发过程中省掉不少的工作。&lt;/p>
&lt;p>mybatis generator 的使用大致分成几步：&lt;/p>
&lt;ol>
&lt;li>创建配置文件&lt;/li>
&lt;li>保存配置文件到本地&lt;/li>
&lt;li>执行 MyBatis Generator&lt;/li>
&lt;/ol>
&lt;p>我们以一个例子来说明如何使用 MyBaits Generator，项目的结构如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>├── pom.xml
&lt;span class="ln"> 2&lt;/span>├── README.md
&lt;span class="ln"> 3&lt;/span>├── src
&lt;span class="ln"> 4&lt;/span>│   ├── main
&lt;span class="ln"> 5&lt;/span>│   │   ├── java
&lt;span class="ln"> 6&lt;/span>│   │   │   └── com
&lt;span class="ln"> 7&lt;/span>│   │   │   └── xueqiang
&lt;span class="ln"> 8&lt;/span>│   │   │   └── footmark
&lt;span class="ln"> 9&lt;/span>│   │   │   ├── controller
&lt;span class="ln">10&lt;/span>│   │   │   ├── FootmarkApplication.java
&lt;span class="ln">11&lt;/span>│   │   │   ├── model
&lt;span class="ln">12&lt;/span>│   │   │   ├── service
&lt;span class="ln">13&lt;/span>│   │   │   └── utils
&lt;span class="ln">14&lt;/span>│   │   └── resources
&lt;span class="ln">15&lt;/span>│   │   ├── application.properties
&lt;span class="ln">16&lt;/span>│   │   ├── log4j.properties
&lt;span class="ln">17&lt;/span>│   │   ├── mybatis
&lt;span class="ln">18&lt;/span>│   │   │   └── generator-configuration.xml
&lt;span class="ln">19&lt;/span>│   └── &lt;span class="nb">test&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="1-配置文件">1. 配置文件&lt;/h2>
&lt;p>在 &lt;code>resources/mybatis/&lt;/code> 目录下创建配置文件 &lt;code>generator-configuration.xml&lt;/code>，该文件的具体内容如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34;?&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&amp;lt;!DOCTYPE generatorConfiguration
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cp"> PUBLIC &amp;#34;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&amp;#34;
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cp"> &amp;#34;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&amp;#34;&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nt">&amp;lt;generatorConfiguration&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c">&amp;lt;!-- 全局配置文件，下面可以通过占位符的形式读取文件中的值 --&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c">&amp;lt;!-- &amp;lt;properties resource=&amp;#34;db.properties&amp;#34;/&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c">&amp;lt;!-- 用来指定数据源驱动包（jar/zip）的绝对路径 --&amp;gt;&lt;/span>
&lt;span class="ln"> 10&lt;/span> &lt;span class="nt">&amp;lt;classPathEntry&lt;/span> &lt;span class="na">location=&lt;/span>&lt;span class="s">&amp;#34;D:\Users\xueqiang.chen\.m2\repository\mysql\mysql-connector-java\8.0.11\mysql-connector-java-8.0.11.jar&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 11&lt;/span> &lt;span class="c">&amp;lt;!-- 用于运行时的解析模式和具体的代码生成行为，对应org.mybatis.generator.config.Context类 --&amp;gt;&lt;/span>
&lt;span class="ln"> 12&lt;/span> &lt;span class="c">&amp;lt;!--
&lt;/span>&lt;span class="ln"> 13&lt;/span>&lt;span class="c"> id:Context示例的唯一ID，用于输出错误信息时候作为唯一标记
&lt;/span>&lt;span class="ln"> 14&lt;/span>&lt;span class="c"> targetRuntime:用于执行代码生成模式。可选值：
&lt;/span>&lt;span class="ln"> 15&lt;/span>&lt;span class="c"> MyBatis3DynamicSql：动态SQL
&lt;/span>&lt;span class="ln"> 16&lt;/span>&lt;span class="c"> MyBatis3Kotlin：基于Kotlin生成
&lt;/span>&lt;span class="ln"> 17&lt;/span>&lt;span class="c"> MyBatis3：提供基本的基于动态SQL的CRUD方法和XXXByExample方法，会生成XML映射文件
&lt;/span>&lt;span class="ln"> 18&lt;/span>&lt;span class="c"> MyBatis3Simple：提供基本的基于动态SQL的CRUD方法，会生成XML映射文件
&lt;/span>&lt;span class="ln"> 19&lt;/span>&lt;span class="c"> MyBatis3DynamicSqlV1：已经过时，不推荐使用
&lt;/span>&lt;span class="ln"> 20&lt;/span>&lt;span class="c"> defaultModeType:控制Domain类的生成行为。执行引擎为MyBatis3DynamicSql或者MyBatis3Kotlin时忽略此配置，可选值：
&lt;/span>&lt;span class="ln"> 21&lt;/span>&lt;span class="c"> conditional：默认值，类似hierarchical，但是只有一个主键的时候会合并所有属性生成在同一个类。
&lt;/span>&lt;span class="ln"> 22&lt;/span>&lt;span class="c"> flat：所有内容全部生成在一个对象中。
&lt;/span>&lt;span class="ln"> 23&lt;/span>&lt;span class="c"> hierarchical：键生成一个XXKey对象，Blob等单独生成一个对象，其他简单属性在一个对象中
&lt;/span>&lt;span class="ln"> 24&lt;/span>&lt;span class="c"> --&amp;gt;&lt;/span>
&lt;span class="ln"> 25&lt;/span> &lt;span class="c">&amp;lt;!--
&lt;/span>&lt;span class="ln"> 26&lt;/span>&lt;span class="c"> context的内容需要按照顺序排列,否则会报错：
&lt;/span>&lt;span class="ln"> 27&lt;/span>&lt;span class="c"> property-&amp;gt;plugin-&amp;gt;commentGenerator-&amp;gt;connectionFactory|jdbcConnection-&amp;gt;javaTypeResolver-&amp;gt;javaModelGenerator-&amp;gt;sqlMapGenerator-&amp;gt;javaClientGenerator-&amp;gt;table
&lt;/span>&lt;span class="ln"> 28&lt;/span>&lt;span class="c"> --&amp;gt;&lt;/span>
&lt;span class="ln"> 29&lt;/span> &lt;span class="nt">&amp;lt;context&lt;/span> &lt;span class="na">id=&lt;/span>&lt;span class="s">&amp;#34;default&amp;#34;&lt;/span> &lt;span class="na">targetRuntime=&lt;/span>&lt;span class="s">&amp;#34;MyBatis3DynamicSql&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln"> 30&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;javaFileEncoding&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;UTF-8&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 31&lt;/span>
&lt;span class="ln"> 32&lt;/span>&lt;span class="c">&amp;lt;!-- &amp;lt;plugin type=&amp;#34;org.mybatis.generator.plugins.SerializablePlugin&amp;#34;/&amp;gt;--&amp;gt;&lt;/span>
&lt;span class="ln"> 33&lt;/span>
&lt;span class="ln"> 34&lt;/span> &lt;span class="c">&amp;lt;!--用于控制生成的实体的注释内容
&lt;/span>&lt;span class="ln"> 35&lt;/span>&lt;span class="c"> suppressAllComments:是否生成注释
&lt;/span>&lt;span class="ln"> 36&lt;/span>&lt;span class="c"> suppressDate:是否在注释中添加生成的时间戳
&lt;/span>&lt;span class="ln"> 37&lt;/span>&lt;span class="c"> dateFormat:配合suppressDate使用，指定输出时间戳的格式
&lt;/span>&lt;span class="ln"> 38&lt;/span>&lt;span class="c"> addRemarkComments:是否输出表和列的Comment信息--&amp;gt;&lt;/span>
&lt;span class="ln"> 39&lt;/span> &lt;span class="nt">&amp;lt;commentGenerator&amp;gt;&lt;/span>
&lt;span class="ln"> 40&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;suppressDate&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 41&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;suppressAllComments&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 42&lt;/span> &lt;span class="nt">&amp;lt;/commentGenerator&amp;gt;&lt;/span>
&lt;span class="ln"> 43&lt;/span>
&lt;span class="ln"> 44&lt;/span> &lt;span class="c">&amp;lt;!--用于指定数据源的连接信息，对应的类为org.mybatis.generator.config.JDBCConnectionConfiguration
&lt;/span>&lt;span class="ln"> 45&lt;/span>&lt;span class="c"> driverClass:数据源驱动的全类名
&lt;/span>&lt;span class="ln"> 46&lt;/span>&lt;span class="c"> connectionURL:JDBC的连接URL
&lt;/span>&lt;span class="ln"> 47&lt;/span>&lt;span class="c"> userId:用户名
&lt;/span>&lt;span class="ln"> 48&lt;/span>&lt;span class="c"> password:密码--&amp;gt;&lt;/span>
&lt;span class="ln"> 49&lt;/span> &lt;span class="nt">&amp;lt;jdbcConnection&lt;/span> &lt;span class="na">driverClass=&lt;/span>&lt;span class="s">&amp;#34;com.mysql.jdbc.Driver&amp;#34;&lt;/span>
&lt;span class="ln"> 50&lt;/span> &lt;span class="na">connectionURL=&lt;/span>&lt;span class="s">&amp;#34;jdbc:mysql://127.0.0.1:3306/footmark&amp;#34;&lt;/span>
&lt;span class="ln"> 51&lt;/span> &lt;span class="na">userId=&lt;/span>&lt;span class="s">&amp;#34;root&amp;#34;&lt;/span>
&lt;span class="ln"> 52&lt;/span> &lt;span class="na">password=&lt;/span>&lt;span class="s">&amp;#34;mysql&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln"> 53&lt;/span> &lt;span class="nt">&amp;lt;/jdbcConnection&amp;gt;&lt;/span>
&lt;span class="ln"> 54&lt;/span>
&lt;span class="ln"> 55&lt;/span> &lt;span class="c">&amp;lt;!--用于解析和计算数据库列类型和Java类型的映射关系，该标签只包含一个type属性，用于指定org.mybatis.generator.api.JavaTypeResolver接口的实现类
&lt;/span>&lt;span class="ln"> 56&lt;/span>&lt;span class="c"> forceBigDecimals:是否强制把所有的数字类型强制使用java.math.BigDecimal类型表示
&lt;/span>&lt;span class="ln"> 57&lt;/span>&lt;span class="c"> useJSR310Types:是否支持JSR310，主要是JSR310的新日期类型
&lt;/span>&lt;span class="ln"> 58&lt;/span>&lt;span class="c"> 数据库JDBC类型 Java类型
&lt;/span>&lt;span class="ln"> 59&lt;/span>&lt;span class="c"> DATE java.time.LocalDate
&lt;/span>&lt;span class="ln"> 60&lt;/span>&lt;span class="c"> TIME java.time.LocalTime
&lt;/span>&lt;span class="ln"> 61&lt;/span>&lt;span class="c"> TIMESTAMP java.time.LocalDateTime
&lt;/span>&lt;span class="ln"> 62&lt;/span>&lt;span class="c"> TIME_WITH_TIMEZONE java.time.OffsetTime
&lt;/span>&lt;span class="ln"> 63&lt;/span>&lt;span class="c"> TIMESTAMP_WITH_TIMEZONE java.time.OffsetDateTime--&amp;gt;&lt;/span>
&lt;span class="ln"> 64&lt;/span> &lt;span class="nt">&amp;lt;javaTypeResolver&amp;gt;&lt;/span>
&lt;span class="ln"> 65&lt;/span> &lt;span class="c">&amp;lt;!-- 不强制把所有的数字类型转化为BigDecimal --&amp;gt;&lt;/span>
&lt;span class="ln"> 66&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;forceBigDecimals&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 67&lt;/span> &lt;span class="nt">&amp;lt;/javaTypeResolver&amp;gt;&lt;/span>
&lt;span class="ln"> 68&lt;/span>
&lt;span class="ln"> 69&lt;/span> &lt;span class="c">&amp;lt;!--主要用于控制实体（Model）类的代码生成行为
&lt;/span>&lt;span class="ln"> 70&lt;/span>&lt;span class="c"> targetPackage:生成的实体类的包名
&lt;/span>&lt;span class="ln"> 71&lt;/span>&lt;span class="c"> targetProject:生成的实体类文件相对于项目（根目录）的位置
&lt;/span>&lt;span class="ln"> 72&lt;/span>&lt;span class="c">
&lt;/span>&lt;span class="ln"> 73&lt;/span>&lt;span class="c"> property:
&lt;/span>&lt;span class="ln"> 74&lt;/span>&lt;span class="c"> constructorBased:是否生成一个带有所有字段属性的构造函数
&lt;/span>&lt;span class="ln"> 75&lt;/span>&lt;span class="c"> enableSubPackages:是否允许通过Schema生成子包
&lt;/span>&lt;span class="ln"> 76&lt;/span>&lt;span class="c"> exampleTargetPackage:生成的伴随实体类的Example类的包名
&lt;/span>&lt;span class="ln"> 77&lt;/span>&lt;span class="c"> exampleTargetProject:生成的伴随实体类的Example类文件相对于项目（根目录）的位置
&lt;/span>&lt;span class="ln"> 78&lt;/span>&lt;span class="c"> immutable:是否不可变
&lt;/span>&lt;span class="ln"> 79&lt;/span>&lt;span class="c"> rootClass:为生成的实体类添加父类
&lt;/span>&lt;span class="ln"> 80&lt;/span>&lt;span class="c"> trimStrings:Setter方法是否对字符串类型进行一次trim操作--&amp;gt;&lt;/span>
&lt;span class="ln"> 81&lt;/span> &lt;span class="nt">&amp;lt;javaModelGenerator&lt;/span> &lt;span class="na">targetPackage=&lt;/span>&lt;span class="s">&amp;#34;com.xueqiang.footmark.model.entity&amp;#34;&lt;/span> &lt;span class="na">targetProject=&lt;/span>&lt;span class="s">&amp;#34;src/main/java&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln"> 82&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;enableSubPackages&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 83&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;trimStrings&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 84&lt;/span> &lt;span class="nt">&amp;lt;/javaModelGenerator&amp;gt;&lt;/span>
&lt;span class="ln"> 85&lt;/span>
&lt;span class="ln"> 86&lt;/span> &lt;span class="c">&amp;lt;!--主要用于控制XML映射文件的代码生成行为
&lt;/span>&lt;span class="ln"> 87&lt;/span>&lt;span class="c"> targetPackage:生成的XML映射文件的包名
&lt;/span>&lt;span class="ln"> 88&lt;/span>&lt;span class="c"> targetProject:生成的XML映射文件相对于项目（根目录）的位置,例如:src/main/resources
&lt;/span>&lt;span class="ln"> 89&lt;/span>&lt;span class="c">
&lt;/span>&lt;span class="ln"> 90&lt;/span>&lt;span class="c"> property:
&lt;/span>&lt;span class="ln"> 91&lt;/span>&lt;span class="c"> enableSubPackages:是否允许通过Schema生成子包--&amp;gt;&lt;/span>
&lt;span class="ln"> 92&lt;/span> &lt;span class="nt">&amp;lt;sqlMapGenerator&lt;/span> &lt;span class="na">targetPackage=&lt;/span>&lt;span class="s">&amp;#34;mapper&amp;#34;&lt;/span> &lt;span class="na">targetProject=&lt;/span>&lt;span class="s">&amp;#34;src/main/resources&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln"> 93&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;enableSubPackages&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln"> 94&lt;/span> &lt;span class="nt">&amp;lt;/sqlMapGenerator&amp;gt;&lt;/span>
&lt;span class="ln"> 95&lt;/span>
&lt;span class="ln"> 96&lt;/span> &lt;span class="c">&amp;lt;!--主要用于控制Mapper接口的代码生成行为
&lt;/span>&lt;span class="ln"> 97&lt;/span>&lt;span class="c"> type:Mapper接口生成策略.(&amp;lt;context&amp;gt;标签的targetRuntime属性为MyBatis3DynamicSql或者MyBatis3Kotlin时此属性配置忽略)
&lt;/span>&lt;span class="ln"> 98&lt;/span>&lt;span class="c"> ANNOTATEDMAPPER:Mapper接口生成的时候依赖于注解和SqlProviders（也就是纯注解实现），不会生成XML映射文件。
&lt;/span>&lt;span class="ln"> 99&lt;/span>&lt;span class="c"> XMLMAPPER:Mapper接口生成接口方法，对应的实现代码生成在XML映射文件中（也就是纯映射文件实现）
&lt;/span>&lt;span class="ln">100&lt;/span>&lt;span class="c"> MIXEDMAPPER:Mapper接口生成的时候复杂的方法实现生成在XML映射文件中，而简单的实现通过注解和SqlProviders实现（也就是注解和映射文件混合实现）。
&lt;/span>&lt;span class="ln">101&lt;/span>&lt;span class="c"> targetPackage:生成的Mapper接口的包名
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="c"> targetProject:生成的Mapper接口文件相对于项目（根目录）的位置--&amp;gt;&lt;/span>
&lt;span class="ln">103&lt;/span> &lt;span class="c">&amp;lt;!--property属性：
&lt;/span>&lt;span class="ln">104&lt;/span>&lt;span class="c"> enableSubPackages:是否允许通过Schema生成子包
&lt;/span>&lt;span class="ln">105&lt;/span>&lt;span class="c"> useLegacyBuilder:是否通过SQL Builder生成动态SQL
&lt;/span>&lt;span class="ln">106&lt;/span>&lt;span class="c"> rootInterface:为生成的Mapper接口添加父接口--&amp;gt;&lt;/span>
&lt;span class="ln">107&lt;/span> &lt;span class="nt">&amp;lt;javaClientGenerator&lt;/span> &lt;span class="na">type=&lt;/span>&lt;span class="s">&amp;#34;ANNOTATEDMAPPER&amp;#34;&lt;/span> &lt;span class="na">targetPackage=&lt;/span>&lt;span class="s">&amp;#34;com.xueqiang.footmark.model.mapper&amp;#34;&lt;/span> &lt;span class="na">targetProject=&lt;/span>&lt;span class="s">&amp;#34;src/main/java&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln">108&lt;/span> &lt;span class="nt">&amp;lt;property&lt;/span> &lt;span class="na">name=&lt;/span>&lt;span class="s">&amp;#34;enableSubPackages&amp;#34;&lt;/span> &lt;span class="na">value=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span> &lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln">109&lt;/span> &lt;span class="nt">&amp;lt;/javaClientGenerator&amp;gt;&lt;/span>
&lt;span class="ln">110&lt;/span>
&lt;span class="ln">111&lt;/span> &lt;span class="c">&amp;lt;!--enableInsert 动态SQL提供类SqlProvider的类名称
&lt;/span>&lt;span class="ln">112&lt;/span>&lt;span class="c"> enableSelectByPrimaryKey 是否允许生成selectByPrimaryKey方法
&lt;/span>&lt;span class="ln">113&lt;/span>&lt;span class="c"> enableSelectByExample 是否允许生成selectByExample方法
&lt;/span>&lt;span class="ln">114&lt;/span>&lt;span class="c"> enableUpdateByPrimaryKey 是否允许生成updateByPrimaryKey方法
&lt;/span>&lt;span class="ln">115&lt;/span>&lt;span class="c"> enableDeleteByPrimaryKey 是否允许生成deleteByPrimaryKey方法
&lt;/span>&lt;span class="ln">116&lt;/span>&lt;span class="c"> enableDeleteByExample 是否允许生成deleteByExample方法
&lt;/span>&lt;span class="ln">117&lt;/span>&lt;span class="c"> enableCountByExample 是否允许生成countByExample方法
&lt;/span>&lt;span class="ln">118&lt;/span>&lt;span class="c"> enableUpdateByExample 是否允许生成updateByExample方法
&lt;/span>&lt;span class="ln">119&lt;/span>&lt;span class="c"> selectByPrimaryKeyQueryId value指定对应的主键列提供列表查询功能
&lt;/span>&lt;span class="ln">120&lt;/span>&lt;span class="c"> selectByExampleQueryId value指定对应的查询ID提供列表查询功能--&amp;gt;&lt;/span>
&lt;span class="ln">121&lt;/span> &lt;span class="nt">&amp;lt;table&lt;/span> &lt;span class="na">tableName=&lt;/span>&lt;span class="s">&amp;#34;t_order&amp;#34;&lt;/span>
&lt;span class="ln">122&lt;/span> &lt;span class="na">enableCountByExample=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>
&lt;span class="ln">123&lt;/span> &lt;span class="na">enableDeleteByExample=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>
&lt;span class="ln">124&lt;/span> &lt;span class="na">enableSelectByExample=&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>
&lt;span class="ln">125&lt;/span> &lt;span class="na">enableUpdateByExample=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>
&lt;span class="ln">126&lt;/span> &lt;span class="na">domainObjectName=&lt;/span>&lt;span class="s">&amp;#34;Order&amp;#34;&lt;/span>
&lt;span class="ln">127&lt;/span> &lt;span class="na">mapperName=&lt;/span>&lt;span class="s">&amp;#34;OrderMapper&amp;#34;&lt;/span>&lt;span class="nt">&amp;gt;&lt;/span>
&lt;span class="ln">128&lt;/span> &lt;span class="nt">&amp;lt;generatedKey&lt;/span> &lt;span class="na">column=&lt;/span>&lt;span class="s">&amp;#34;id&amp;#34;&lt;/span> &lt;span class="na">sqlStatement=&lt;/span>&lt;span class="s">&amp;#34;MySql&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;span class="ln">129&lt;/span> &lt;span class="nt">&amp;lt;/table&amp;gt;&lt;/span>
&lt;span class="ln">130&lt;/span>
&lt;span class="ln">131&lt;/span> &lt;span class="nt">&amp;lt;/context&amp;gt;&lt;/span>
&lt;span class="ln">132&lt;/span>&lt;span class="nt">&amp;lt;/generatorConfiguration&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的这个配置文件主要是按&lt;code>t_order&lt;/code>这个数据库表的属性生成整个 xml 配置文件的元素意义我们可以参考&lt;a href="http://mybatis.org/generator/configreference/xmlconfig.html">官方文档&lt;/a>的介绍。&lt;/p></description></item><item><title>Docker 和 Kubernetes 面试题</title><link>https://ahamoment.cn/post/interview-docker-k8s/</link><pubDate>Mon, 28 Dec 2020 11:16:35 +0800</pubDate><guid>https://ahamoment.cn/post/interview-docker-k8s/</guid><description>
&lt;h2 id="1-docker-问题">1. Docker 问题&lt;/h2>
&lt;h3 id="11-docker-后端存储驱动-devicemapperoverlay-几种的区别">1.1. docker 后端存储驱动 devicemapper、overlay 几种的区别？&lt;/h3>
&lt;p>刚开始拿到这道题我有点蒙，因为我只知道目前我们用的是vg-pool devicemapper 来存储镜像和容器，后来面试官问我镜像分层的技术知道吗？我说知道，就是**联合文件系统，多层文件系统联合组成一个统一的文件系统视角，当需要修改文件时采用写时复制（CopyW）的技术从上往下查找，找到之后复制到可写的容器层，进行修改并保存至容器层，**说完之后面试官再问我，那每次修改文件都需要从上往下查找，层数又那么多，性能是否比较差，现在才反应回来，原先面试官想考察我aufs、overlay 或者是 devicemapper 等几种存储驱动的区别。&lt;/p>
&lt;p>&lt;strong>AUFS&lt;/strong>&lt;/p>
&lt;p>AUFS （Another UnionFS）是一种 Union FS，是文件级的存储驱动，AUFS 简单理解就是将多层的文件系统联合挂载成统一的文件系统，这种文件系统可以一层一层地叠加修改文件，只有最上层是可写层，底下所有层都是只读层，对应到 Docker，最上层就是 container 层，底层就是 image 层，结构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/aufs.webp" alt="">&lt;/p>
&lt;p>&lt;strong>Overlay&lt;/strong>&lt;/p>
&lt;p>Overlay 也是一种 Union FS，和 AUFS 多层相比，Overlay 只有两层：一个 upper 文件系统和一个 lower 文件系统，分别代表 Docker 的容器层（upper）和镜像层（lower）。当需要修改一个文件时，使用 CopyW 将文件从只读的 lower 层复制到可写层 upper，结果也保存在 upper 层，结构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/overlay.webp" alt="">&lt;/p>
&lt;p>&lt;strong>Devicemapper&lt;/strong>&lt;/p>
&lt;p>Device mapper，提供的是一种从逻辑设备到物理设备的映射框架机制，前面讲的 AUFS 和 OverlayFS 都是文件级存储，而 Device mapper 是块级存储，所有的操作都是直接对块进行操作，而不是文件。Device mapper 驱动会先在块设备上创建一个资源池，然后在资源池上创建一个带有文件系统的基本设备，所有镜像都是这个基本设备的快照，而容器则是镜像的快照。所以在容器里看到文件系统是资源池上基本设备的文件系统的快照。当要写入一个新文件时，在容器的镜像内为其分配新的块并写入数据，这个叫用时分配。当要修改已有文件时，再使用CoW为容器快照分配块空间，将要修改的数据复制到在容器快照中新的块里再进行修改。Devicemapper 驱动默认会创建一个100G 的文件包含镜像和容器。每一个容器被限制在 10G 大小的卷内，可以自己配置调整。结构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/devicemapper.webp" alt="">&lt;/p>
&lt;p>详细内容请参考：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=http%3A%2F%2Fdockone.io%2Farticle%2F1513">Docker 五种存储驱动&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://links.jianshu.com/go?to=http%3A%2F%2Fdockone.io%2Farticle%2F1765">深入了解 Docker 存储驱动&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="12-容器隔离不彻底memory-和-cpu-隔离不彻底怎么处理解决这个问题">1.2. 容器隔离不彻底，Memory 和 CPU 隔离不彻底，怎么处理解决这个问题？&lt;/h3>
&lt;p>由于 /proc 文件系统是以只读的方式挂载到容器内部，所以在容器内看到的都是宿主机的信息，包括 CPU 和 Memory，docker 是以 cgroups 来进行资源限制的，而 jdk1.9 以下版本目前无法自动识别容器的资源配额，1.9以上版本会自动识别和正常读取 cgroups 中为容器限制的资源大小。&lt;/p>
&lt;p>&lt;em>&lt;strong>Memory 隔离不彻底&lt;/strong>&lt;/em>&lt;/p>
&lt;hr>
&lt;p>Docker 通过 cgroups 完成对内存的限制，而 /proc 文件目录是以只读的形式挂载到容器中，由于默认情况下，Java 压根就看不到 cgroups 限制的内容的大小，而默认使用 /proc/meminfo 中的信息作为内存信息进行启动，默认情况下，JVM 初始堆大小为内存总量的 1/4，这种情况会导致，如果容器分配的内存小于 JVM 的内存， JVM 进程会被 linux killer 杀死。&lt;/p>
&lt;p>那么目前有几种解决方式：&lt;/p>
&lt;p>（1）升级 JDK 版本到1.9以上，让 JVM 能自动识别 cgroups 对容器的资源限制，从而自动调整 JVM 的参数并启动 JVM 进程。&lt;/p>
&lt;p>（2）对于较低版本的JDK，一定要设置 JVM 初始堆大小，并且JVM 的最大堆内存不能超过容器的最大内存值，正常理论值应该是：容器 limit-memory = JVM 最大堆内存 + 750MB。&lt;/p>
&lt;p>（3）使用 lxcfs ，这是一种用户态文件系统，用来支持LXC 容器，lxcfs 通过用户态文件系统，在容器中提供下列 procfs 的文件，启动时，把宿主机对应的目录 /var/lib/lxcfu/proc/meminfo 文件挂载到 Docker 容器的 /proc/meminfo 位置后，容器中进程（JVM）读取相应文件内容时，lxcfs 的 fuse 将会从容器对应的 cgroups 中读取正确的内存限制，从而获得正确的资源约束设定。&lt;/p>
&lt;p>&lt;em>&lt;strong>CPU 隔离不彻底&lt;/strong>&lt;/em>&lt;/p>
&lt;hr>
&lt;p>JVM GC （垃圾回收）对于 java 程序执行性能有一定的影响，默认的 JVM 使用如下公式： ParallelGCThreads = ( ncpu &amp;lt;= 8 ) ? ncpu：3 + （ncpu * 5）/ 8 来计算并行 GC 的线程数，但是在容器里面，ncpu 获取的就是所在宿主机的 cpu 个数，这会导致 JVM 启动过多的 GC 线程，直接的结果就是 GC 的性能下降，java 服务的感受就是：延时增加， TPS 吞度量下降，针对这种问题，也有以下几种解决方案：&lt;/p>
&lt;p>（1）显示传递 JVM 启动参数：“-XX: ParallelGCThreads&amp;quot; 告诉 JVM 应该启动多少个并行 GC 线程，缺点是需要业务感知，而且需要为不同配置的容器传递不同的 JVM 参数。&lt;/p>
&lt;p>（2）在容器内使用 Hack 过的 glibc ，使 JVM 通过 sysconf 系统调用能正确获取容器内 CPU 资源核数，优点是业务无感知，并且能自动适配不同配置的容器，缺点是有一定的维护成本。具体参考：&lt;a href="https://chenxq.xyz/post/cloud-container-get-cpu/">容器内获取 CPU 核数问题&lt;/a>&lt;/p>
&lt;h3 id="13-介绍一下容器实现的基础-namespace-and-cgroups">1.3. 介绍一下容器实现的基础: Namespace and Cgroups&lt;/h3>
&lt;p>主要用到了Linux的两种技术：Namespace 和 CGroup。Namespace 做隔离，Cgroups 做限制。&lt;/p>
&lt;p>Namespace 技术实际上修改了应用进程看待整个计算机“视图”，即它的“视线”被操作系统做了限制，只能“看到”某些指定的内容。在创建进程的时候，Linux 系统提供了Mount、UTS、IPC、Network和User这些Namespace，用来对各种不同的进程上下文进行隔离操作。所以，Docker 容器实际上是在创建容器进程时，指定了这个进程所需要启用的一组 Namespace 参数。这样，容器就只能“看”到当前 Namespace 所限定的资源、文件、设备、状态，或者配置。而对于宿主机以及其他不相关的程序，它就完全看不到了。所以说，容器，其实是一种特殊的进程而已。&lt;/p>
&lt;p>Linux Cgroups 就是 Linux 内核中用来为进程设置资源限制的一个重要功能。它最主要的作用，就是限制一个进程组能够使用的资源上限，包括 CPU、内存、磁盘、网络带宽等等。&lt;/p>
&lt;p>一个正在运行的 Docker 容器，其实就是一个启用了多个 Linux Namespace 的应用进程，而这个进程能够使用的资源量，则受 Cgroups 配置的限制。&lt;/p>
&lt;p>详情请参考：https://coolshell.cn/articles/17049.html&lt;/p>
&lt;h3 id="14-docker-load-加载一个镜像-docker-images-查看不到是哪些原因">1.4. docker load 加载一个镜像， docker images 查看不到，是哪些原因？&lt;/h3>
&lt;h3 id="14-有没有遇到容器-oom-的问题怎么处理的">1.4 有没有遇到容器 OOM 的问题？怎么处理的？&lt;/h3>
&lt;p>OOM 可能的原因：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>容器隔离不彻底。默认情况下，JVM 初始堆大小为内存总量的 1/4，例如这台宿主机的内存为32G，那么初始堆的大小为8G，这种情况会导致，如果容器分配的内存小于 JVM 的内存， JVM 进程会被 linux killer 杀死。&lt;/p>
&lt;/li>
&lt;li>&lt;/li>
&lt;/ol>
&lt;p>处理方法：&lt;/p>
&lt;ol>
&lt;li>升级jdk版本或者设置初始堆大小和堆内存最大值，即-Xms 和 -Xmx。&lt;/li>
&lt;/ol>
&lt;h2 id="2-kubernetes-问题">2. Kubernetes 问题&lt;/h2>
&lt;h3 id="21-k8s-的架构体系了解吗简单描述一下">2.1. k8s 的架构体系了解吗？简单描述一下&lt;/h3>
&lt;p>这道题主要考察 k8s 体系，涉及的范围其实太广泛，可以从本身 k8s 组件、存储、网络、监控等方面阐述，当时我主要将 k8s 的每个组件功能都大概说了一下。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/k8s-infra.png" alt="">&lt;/p>
&lt;p>&lt;strong>Master节点&lt;/strong>&lt;/p>
&lt;p>Master节点主要有四个组件，分别是：api-server、controller-manager、kube-scheduler 和 etcd。&lt;/p>
&lt;hr>
&lt;p>&lt;em>&lt;strong>api-server&lt;/strong>&lt;/em>&lt;/p>
&lt;p>负责API服务。kube-apiserver 作为 k8s 集群的核心，负责整个集群功能模块的交互和通信，集群内的各个功能模块如 kubelet、controller、scheduler 等都通过 api-server 提供的接口将信息存入到 etcd 中，当需要这些信息时，又通过 api-server 提供的 restful 接口，如get、watch 接口来获取，从而实现整个 k8s 集群功能模块的数据交互。&lt;/p>
&lt;p>&lt;em>&lt;strong>controller-manager&lt;/strong>&lt;/em>&lt;/p>
&lt;p>负责容器编排。controller-manager 作为 k8s 集群的管理控制中心，负责集群内 Node、Namespace、Service、Token、Replication 等资源对象的管理，使集群内的资源对象维持在预期的工作状态。&lt;/p>
&lt;p>每一个 controller 通过 api-server 提供的 restful 接口实时监控集群内每个资源对象的状态，当发生故障，导致资源对象的工作状态发生变化，就进行干预，尝试将资源对象从当前状态恢复为预期的工作状态，常见的 controller 有 Namespace Controller、Node Controller、Service Controller、ServiceAccount Controller、Token Controller、ResourceQuote Controller、Replication Controller等。&lt;/p>
&lt;p>&lt;em>&lt;strong>kube-scheduler&lt;/strong>&lt;/em>&lt;/p>
&lt;p>kube-scheduler 简单理解为通过特定的调度算法和策略为待调度的 Pod 列表中的每个 Pod 选择一个最合适的节点进行调度，调度主要分为两个阶段，预选阶段和优选阶段，其中预选阶段是遍历所有的 node 节点，根据策略和限制筛选出候选节点，优选阶段是在第一步的基础上，通过相应的策略为每一个候选节点进行打分，分数最高者胜出，随后目标节点的 kubelet 进程通过 api-server 提供的接口监控到 kube-scheduler 产生的 pod 绑定事件，从 etcd 中获取 Pod 的清单，然后下载镜像，启动容器。&lt;/p>
&lt;p>&lt;strong>预选阶段的策略有：&lt;/strong>&lt;/p>
&lt;p>(1) MatchNodeSelector：判断节点的 label 是否满足 Pod 的 nodeSelector 属性值。&lt;/p>
&lt;p>(2) PodFitResource：判断节点的资源是否满足 Pod 的需求，批判的标准是：当前节点已运行的所有 Pod 的 request值 + 待调度的 Pod 的 request 值是否超过节点的资源容量。&lt;/p>
&lt;p>(3) PodFitHostName：判断节点的主机名称是否满足 Pod 的 nodeName 属性值。&lt;/p>
&lt;p>(4) PodFitHostPort：判断 Pod 的端口所映射的节点端口是否被节点其他 Pod 所占用。&lt;/p>
&lt;p>(5) CheckNodeMemoryPressure：判断 Pod 是否可以调度到内存有压力的节点，这取决于 Pod 的 Qos 配置，如果是 BestEffort（尽量满足，优先级最低），则不允许调度。&lt;/p>
&lt;p>(6) CheckNodeDiskPressure：如果当前节点磁盘有压力，则不允许调度。&lt;/p>
&lt;p>&lt;strong>优选阶段的策略有：&lt;/strong>&lt;/p>
&lt;p>(1) SelectorSpreadPriority：尽量减少节点上同属一个 SVC/RC/RS 的 Pod 副本数，为了更好的实现容灾，对于同属一个 SVC/RC/RS 的 Pod 实例，应尽量调度到不同的 node 节点。&lt;/p>
&lt;p>(2) LeastRequestPriority：优先调度到请求资源较少的节点，节点的优先级由节点的空闲资源与节点总容量的比值决定的，即（节点总容量 - 已经运行的 Pod 所需资源）/ 节点总容量，CPU 和 Memory 具有相同的权重，最终的值由这两部分组成。&lt;/p>
&lt;p>(3) BalancedResourceAllocation：该策略不能单独使用，必须和 LeaseRequestPriority 策略一起结合使用，尽量调度到 CPU 和 Memory 使用均衡的节点上。&lt;/p>
&lt;p>&lt;em>&lt;strong>ETCD&lt;/strong>&lt;/em>&lt;/p>
&lt;p>强一致性的键值对存储，k8s 集群中的所有资源对象都存储在 etcd 中。&lt;/p>
&lt;p>&lt;strong>Node节点&lt;/strong>&lt;/p>
&lt;hr>
&lt;p>在 Kubernetes 项目中，kubelet 主要负责同容器运行时（比如 Docker 项目）打交道。而这个交互所依赖的，是一个称作 CRI（Container Runtime Interface）的远程调用接口，这个接口定义了容器运行时的各项核心操作。而具体的容器运行时，比如 Docker 项目，则一般通过 OCI 这个容器运行时规范同底层的 Linux 操作系统进行交互。此外，kubelet 还通过 gRPC 协议同一个叫作 Device Plugin 的插件进行交互。这个插件，是 Kubernetes 项目用来管理 GPU 等宿主机物理设备的主要组件，也是基于 Kubernetes 项目进行机器学习训练、高性能作业支持等工作必须关注的功能。而 kubelet 的另一个重要功能，则是调用网络插件和存储插件为容器配置网络和持久化存储。这两个插件与 kubelet 进行交互的接口，分别是 CNI（Container Networking Interface）和 CSI（Container Storage Interface）。&lt;/p>
&lt;p>Node节点主要有三个组件：分别是 kubelet、kube-proxy 和 容器运行时 docker 或者 rkt。&lt;/p>
&lt;p>&lt;em>&lt;strong>kubelet&lt;/strong>&lt;/em>&lt;/p>
&lt;p>在 k8s 集群中，每个 node 节点都会运行一个 kubelet 进程，该进程用来处理 Master 节点下达到该节点的任务，同时，通过 api-server 提供的接口定期向 Master 节点报告自身的资源使用情况，并通过 cadvisor 组件监控节点和容器的使用情况。&lt;/p>
&lt;p>&lt;em>&lt;strong>kube-proxy&lt;/strong>&lt;/em>&lt;/p>
&lt;p>kube-proxy 就是一个智能的软件负载均衡器，将 service 的请求转发到后端具体的 Pod 实例上，并提供负载均衡和会话保持机制，目前有三种工作模式，分别是：用户模式（userspace）、iptables 模式和 IPVS 模式。&lt;/p>
&lt;p>&lt;em>&lt;strong>容器运行时——docker&lt;/strong>&lt;/em>&lt;/p>
&lt;p>负责管理 node 节点上的所有容器和容器 IP 的分配。&lt;/p>
&lt;h3 id="22-k8s-创建一个pod的详细流程涉及的组件怎么通信的">2.2. k8s 创建一个pod的详细流程，涉及的组件怎么通信的？&lt;/h3>
&lt;p>k8s 创建一个 Pod 的详细流程如下：&lt;/p>
&lt;p>(1) 客户端提交创建请求，可以通过 api-server 提供的 restful 接口，或者是通过 kubectl 命令行工具，支持的数据类型包括 JSON 和 YAML。&lt;/p>
&lt;p>(2) api-server 处理用户请求，将 pod 信息存储至 etcd 中。&lt;/p>
&lt;p>(3) kube-scheduler 通过 api-server 提供的接口监控到未绑定的 pod，尝试为 pod 分配 node 节点，主要分为两个阶段，预选阶段和优选阶段，其中预选阶段是遍历所有的 node 节点，根据策略筛选出候选节点，而优选阶段是在第一步的基础上，为每一个候选节点进行打分，分数最高者胜出。&lt;/p>
&lt;p>(4) 选择分数最高的节点，进行 pod binding 操作，并将结果存储至 etcd 中。&lt;/p>
&lt;p>(5) 随后目标节点的 kubelet 进程通过 api-server 提供的接口监测到 kube-scheduler 产生的 pod 绑定事件，然后从 etcd 获取 pod 清单，下载镜像并启动容器。&lt;/p>
&lt;hr>
&lt;p>整个事件流可以参考下图：&lt;/p>
&lt;p>&lt;img src="https:////upload-images.jianshu.io/upload_images/16605471-363ddd93976fbd60.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/759/format/webp" alt="img">&lt;/p>
&lt;p>参考文章：&lt;a href="http://dockone.io/article/9134">kubectl 创建 Pod 背后到底发生了什么？&lt;/a>&lt;/p>
&lt;h3 id="23-k8s-中服务级别怎样设置服务的级别才是最高的">2.3. k8s 中服务级别，怎样设置服务的级别才是最高的&lt;/h3>
&lt;p>这道题主要考察 k8s Qos 类别。在 k8s 中，Qos 主要有三种类别，分别是 BestEffort、Burstable 和 Guaranteed，三种类别区别如下：&lt;/p>
&lt;p>&lt;em>&lt;strong>BestEffort&lt;/strong>&lt;/em>&lt;/p>
&lt;p>什么都不设置（CPU or Memory），佛系申请资源。&lt;/p>
&lt;p>&lt;em>&lt;strong>Burstable&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Pod 中的容器至少一个设置了CPU 或者 Memory 的请求&lt;/p>
&lt;p>&lt;em>&lt;strong>Guaranteed&lt;/strong>&lt;/em>&lt;/p>
&lt;p>Pod 中的所有容器必须设置 CPU 和 Memory，并且 request 和 limit 值相等。&lt;/p>
&lt;p>详情可以参考这篇博客：&lt;a href="https://www.jianshu.com/p/b02e6bb20f03">K8s Qos&lt;/a>&lt;/p>
&lt;h3 id="24-有状态的容器如何上云">2.4. 有状态的容器如何上云？&lt;/h3>
&lt;h3 id="25-解释一下crd和operator有没有自己开发过crd或者operator">2.5. 解释一下CRD和Operator？有没有自己开发过CRD或者Operator？&lt;/h3>
&lt;h3 id="26-什么是-cni-平时-k8s-集群用的是哪个网络插件">2.6. 什么是 CNI? 平时 K8S 集群用的是哪个网络插件？&lt;/h3>
&lt;h3 id="27-为什么-pod-中关于资源有-request-和-limit-两个字段有想过这么设计的原因吗">2.7. 为什么 Pod 中关于资源有 request 和 limit 两个字段？有想过这么设计的原因吗？&lt;/h3>
&lt;h3 id="28-pod被调度到一个节点上的具体过程">2.8. Pod被调度到一个节点上的具体过程？&lt;/h3>
&lt;h3 id="29-一个请求到-pod-接收响应中间经历了哪些过程">2.9. 一个请求到 Pod 接收响应，中间经历了哪些过程？&lt;/h3>
&lt;h2 id="3-参考资料">3. 参考资料&lt;/h2>
&lt;p>[1] &lt;a href="https://www.jianshu.com/p/2de643caefc1">docker &amp;amp; kubernetes 面试&lt;/a>&lt;/p></description></item><item><title>面试题目录</title><link>https://ahamoment.cn/post/interview-questions/</link><pubDate>Tue, 22 Dec 2020 14:00:47 +0800</pubDate><guid>https://ahamoment.cn/post/interview-questions/</guid><description>
&lt;blockquote>
&lt;p>面试题目录&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-数据结构">1. 数据结构&lt;/h2>
&lt;ol>
&lt;li>&lt;a href="../algorithm-sort">排序算法&lt;/a>&lt;/li>
&lt;li>链表和数组的区别？跳表的实现&lt;/li>
&lt;li>二分查找的时间复杂度和优点？&lt;/li>
&lt;li>哈希表，解决冲突的方式&lt;/li>
&lt;li>二叉树和B+树&lt;/li>
&lt;li>&lt;a href="https://flykite.me/?p=41">二个亿的无序整数，如何找到中间值&lt;/a>&lt;/li>
&lt;/ol>
&lt;p>常见的编程题：链表反转、动态规划、二叉树遍历&lt;/p>
&lt;h2 id="2-操作系统">2. 操作系统&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>进程与线程&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进程间的通信方式&lt;/p>
&lt;/li>
&lt;li>
&lt;p>进程调度&lt;/p>
&lt;/li>
&lt;li>
&lt;p>死锁的条件与解除&lt;/p>
&lt;/li>
&lt;li>
&lt;p>僵尸进程是什么&lt;/p>
&lt;/li>
&lt;li>
&lt;p>用户态与内核态&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="3-linux">3. Linux&lt;/h2>
&lt;ol>
&lt;li>select 与 epoll 的区别&lt;/li>
&lt;li>fork的底层原理&lt;/li>
&lt;li>查看文件中的100-200行，其中有error相关的附近日志&lt;/li>
&lt;li>top分析&lt;/li>
&lt;li>查看端口占用&lt;/li>
&lt;li>查看打开的文件&lt;/li>
&lt;li>tcpdump 抓包&lt;/li>
&lt;li>awk，grep的使用&lt;/li>
&lt;/ol>
&lt;h2 id="4-计算机网络">4. 计算机网络&lt;/h2>
&lt;ol>
&lt;li>七层协议与tcp四层协议？五层协议&lt;/li>
&lt;/ol>
&lt;h3 id="41-tcp">4.1. TCP&lt;/h3>
&lt;ol>
&lt;li>tcp与udp的区别&lt;/li>
&lt;li>tcp的三次握手和四次挥手&lt;/li>
&lt;li>syn包丢了最多会重传多少次&lt;/li>
&lt;li>time_wait 的作用与危害，tcp_reuse 的机制&lt;/li>
&lt;li>TCP 如何确保可靠传输&lt;/li>
&lt;li>TCP 拥塞控制和流量控制&lt;/li>
&lt;li>TCP 的negla算法，如何解决粘包和半包(丢包？)问题&lt;/li>
&lt;li>TCP的链接保活计时器&lt;/li>
&lt;li>基于UDP设计一个可靠的传输协议(参考quic)&lt;/li>
&lt;/ol>
&lt;h3 id="42-http">4.2. HTTP&lt;/h3>
&lt;ol>
&lt;li>一次url访问会经过什么过程&lt;/li>
&lt;li>GET 和 POST 的区别，PUT 和 POST 的区别&lt;/li>
&lt;li>http 常见错误码&lt;/li>
&lt;li>http与https，https的原理&lt;/li>
&lt;li>session与cookie&lt;/li>
&lt;/ol>
&lt;h2 id="5-数据库">5. 数据库&lt;/h2>
&lt;h3 id="51-mysql">5.1. MySQL&lt;/h3>
&lt;ol>
&lt;li>常见的存储引擎有哪些，他们有什么区别&lt;/li>
&lt;li>常见的索引实现方式，B+树索引，哈希索引他们分别适用什么场景&lt;/li>
&lt;li>Innodb 引擎的索引存储方式，聚簇索引与非聚簇索引&lt;/li>
&lt;li>什么情况下索引不命中？MySQL 如何优化联合索引不满足最左规则的查询(索引下推)&lt;/li>
&lt;li>一级索引与二级索引的查询方式，如何优化(覆盖索引)&lt;/li>
&lt;li>如何优化慢查询(explain 分析)&lt;/li>
&lt;li>事务的隔离级别&lt;/li>
&lt;li>innodb 引擎是如何解决RR级别下的幻读问题(mvcc,next-key)&lt;/li>
&lt;li>MySQL为什么RC级别下会出现不可重复度的问题，而RR不会（read View）&lt;/li>
&lt;li>乐观锁与悲观锁&lt;/li>
&lt;li>mysql的锁机制（对索引加锁）（共享锁，排他锁，意向锁，gap锁）&lt;/li>
&lt;li>mysql如何保证事务的正确性（redolog，undo log）&lt;/li>
&lt;li>mysql是怎么保证数据持久，不丢失的（binlog）&lt;/li>
&lt;li>mysql主从复制的方式（同步复制，半同步复制，异步复制），如何解决主从延迟（多线程执行，组提交）&lt;/li>
&lt;li>MySQL 查询的IN和EXIST有什么区别？&lt;/li>
&lt;li>MySQL 死锁是如何形成的？MySQL是如何解决死锁问题的？&lt;/li>
&lt;/ol>
&lt;h3 id="52-redis">5.2. Redis&lt;/h3>
&lt;ol>
&lt;li>常见的数据类型(String, List, Hash, Set, Sort Set)&lt;/li>
&lt;li>字符串类型是怎么实现(sds结构)&lt;/li>
&lt;li>hash 是怎么实现（渐进性hash）&lt;/li>
&lt;li>sort set 是怎么实现的（跳表）&lt;/li>
&lt;li>redis 实现分布式锁，实现可重入锁（lua,setnxex），如何解决宿主机宕机后，主从切换可能会导致同时有两个线程获取锁（红锁）&lt;/li>
&lt;li>redis实现乐观锁（Multi，watch，Exec）&lt;/li>
&lt;li>redis 持久化机制&lt;/li>
&lt;li>redis 主从复制（全量复制，增量复制，runid，复制缓冲区，复制偏移量）&lt;/li>
&lt;li>sentinel是如何做到高可用的（主观下线，客观下线，raft选主，主从切换）&lt;/li>
&lt;li>redis cluster是如何做到高可用的&lt;/li>
&lt;/ol>
&lt;h2 id="6-java">6. Java&lt;/h2>
&lt;h3 id="61-基础">6.1. 基础&lt;/h3>
&lt;h3 id="62-多线程">6.2. 多线程&lt;/h3>
&lt;ol>
&lt;li>什么是线程安全问题？&lt;/li>
&lt;li>实现多线程的几种方式？&lt;/li>
&lt;li>线程池的关闭方式有哪些？&lt;/li>
&lt;/ol>
&lt;h2 id="7-常用框架与第三方组件">7. 常用框架与第三方组件&lt;/h2>
&lt;h3 id="71-spring">7.1. Spring&lt;/h3>
&lt;ol>
&lt;li>Spring AOP的实现原理&lt;/li>
&lt;li>spring IOC 的好处&lt;/li>
&lt;li>spring 用了什么设计模式&lt;/li>
&lt;li>Transaction 什么时候会生效？事务的实现原理是什么？&lt;/li>
&lt;li>spring mvc的controller参数是如何映射的？&lt;/li>
&lt;li>多例注入的实现原理及其生命周期&lt;/li>
&lt;li>Spring 中的 Controller 注解是单例的还是多例的？会不会有并发问题？&lt;/li>
&lt;/ol>
&lt;h3 id="72-springbootinterview-spring">7.2. &lt;a href="../interview-spring">SpringBoot&lt;/a>&lt;/h3>
&lt;ol>
&lt;li>常用的SpringBoot的注解有哪些？&lt;/li>
&lt;/ol>
&lt;h3 id="73-mybatis">7.3 Mybatis&lt;/h3>
&lt;ol>
&lt;li>Mybatis 的一级缓存和二级缓存&lt;/li>
&lt;li>Mybatis 插件的原理，用到了什么设计模式&lt;/li>
&lt;li>Mybatis 是怎么找到指定的mapper的&lt;/li>
&lt;/ol>
&lt;h3 id="74-本地缓存">7.4. 本地缓存&lt;/h3>
&lt;ol>
&lt;li>guava，caffeine，ohc&lt;/li>
&lt;/ol>
&lt;h2 id="8-分布式">8. 分布式&lt;/h2>
&lt;ol>
&lt;li>CAP理论&lt;/li>
&lt;li>BASE理论&lt;/li>
&lt;/ol>
&lt;h3 id="81-缓存">8.1. 缓存&lt;/h3>
&lt;ol>
&lt;li>穿透，击穿，雪崩是什么，如何避免（随机过期时间，异步刷新，单线程回源）&lt;/li>
&lt;/ol>
&lt;h3 id="82-一致性协议">8.2. 一致性协议&lt;/h3>
&lt;ol>
&lt;li>raft协议原理&lt;/li>
&lt;li>Paxos 算法&lt;/li>
&lt;li>如何解决脑裂问题&lt;/li>
&lt;li>多主一致性协议 gossip 原理&lt;/li>
&lt;/ol>
&lt;h3 id="83-负载均衡">8.3. 负载均衡&lt;/h3>
&lt;ol>
&lt;li>常见的负载均衡算法（轮询，加权轮询，哈希，一致性哈希）&lt;/li>
&lt;li>一致性哈希&lt;/li>
&lt;/ol>
&lt;h3 id="84-分布式锁">8.4 分布式锁&lt;/h3>
&lt;ol>
&lt;li>使用zk怎么实现分布式锁&lt;/li>
&lt;li>使用redis怎么实现分布式锁&lt;/li>
&lt;/ol>
&lt;h3 id="85-分布式事务">8.5. 分布式事务&lt;/h3>
&lt;ol>
&lt;li>2pc，3pc提交&lt;/li>
&lt;/ol>
&lt;h3 id="86-分布式会话">8.6. 分布式会话&lt;/h3>
&lt;ol>
&lt;li>分布式 session 如何设计（集成redis）&lt;/li>
&lt;/ol>
&lt;h3 id="87-分布式id">8.7 分布式ID&lt;/h3>
&lt;h3 id="88-zookeeper">8.8 Zookeeper&lt;/h3>
&lt;h2 id="9-开发相关">9. 开发相关&lt;/h2>
&lt;ol>
&lt;li>常见的设计模式有哪些？&lt;/li>
&lt;li>单例模式的实现方式？&lt;/li>
&lt;/ol>
&lt;h2 id="10-微服务">10. 微服务&lt;/h2>
&lt;h2 id="11-系统设计">11. 系统设计&lt;/h2>
&lt;h3 id="111-高并发">11.1. 高并发&lt;/h3>
&lt;ol>
&lt;li>消息队列&lt;/li>
&lt;li>读写分离&lt;/li>
&lt;li>分库分表&lt;/li>
&lt;li>负载均衡&lt;/li>
&lt;/ol>
&lt;h3 id="112-高可用">11.2. 高可用&lt;/h3>
&lt;ol>
&lt;li>限流&lt;/li>
&lt;li>降级&lt;/li>
&lt;li>熔断&lt;/li>
&lt;li>排队&lt;/li>
&lt;/ol>
&lt;h2 id="12-消息中间件">12. 消息中间件&lt;/h2>
&lt;ol>
&lt;li>Kafka是如何保证消息的有效性的？&lt;/li>
&lt;li>使用 Kafka 的过程中有没有遇到过什么问题?如何解决？&lt;/li>
&lt;/ol>
&lt;h2 id="13-容器云">13. 容器云&lt;/h2>
&lt;ol>
&lt;li>&lt;/li>
&lt;/ol></description></item><item><title>分布式面试题</title><link>https://ahamoment.cn/post/interview-distributed-system/</link><pubDate>Fri, 18 Dec 2020 09:12:07 +0800</pubDate><guid>https://ahamoment.cn/post/interview-distributed-system/</guid><description>
&lt;blockquote>
&lt;p>本文收集有关分布式面试题的内容&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-分布式理论">1. 分布式理论&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>CAP 理论和 BASE 理论&lt;/p>
&lt;p>任何一个分布式系统都无法同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance），最多只能同时满足两项。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>一致性协议&lt;/p>
&lt;p>raft 协议、paxos 算法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如何解决脑裂问题&lt;/p>
&lt;/li>
&lt;li>
&lt;p>gossip 原理&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="2-分布式锁">2. 分布式锁&lt;/h2>
&lt;h2 id="3-分布式事务">3. 分布式事务&lt;/h2>
&lt;h2 id="4-分布式会话">4. 分布式会话&lt;/h2>
&lt;h2 id="5-分布式id">5. 分布式id&lt;/h2>
&lt;h2 id="6-负载均衡">6. 负载均衡&lt;/h2>
&lt;h2 id="7-zookeeper-vs-etcd">7. zookeeper vs etcd&lt;/h2>
&lt;p>存储数据时，zookeeper 使用树形结构，其中的每个节点称作 ZNode，访问一个 ZNode 时，需要提供从 root 开始的绝对路径。&lt;/p>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/96690890">https://zhuanlan.zhihu.com/p/96690890&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://imesha.me/apache-curator-vs-etcd3-9c1362600b26">https://imesha.me/apache-curator-vs-etcd3-9c1362600b26&lt;/a>&lt;/p></description></item><item><title>Spring系列面试题</title><link>https://ahamoment.cn/post/interview-spring/</link><pubDate>Thu, 17 Dec 2020 14:21:46 +0800</pubDate><guid>https://ahamoment.cn/post/interview-spring/</guid><description>
&lt;blockquote>
&lt;p>本文包含spring, spring boot, spring mvc 以及 mybatis的面试题&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-spring">1. Spring&lt;/h2>
&lt;h2 id="2-springboot">2. SpringBoot&lt;/h2>
&lt;h3 id="21-springboot-的常用注解有哪些">2.1. SpringBoot 的常用注解有哪些？&lt;/h3>
&lt;p>&lt;code>@SpringBootApplication&lt;/code>: 标识springboot项目的启动类。&lt;/p>
&lt;p>&lt;code>@Configuration&lt;/code>: 用于定义配置类，指出该类是 Bean 配置的信息源，相当于传统的xml配置文件，一般加在主类上。如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。&lt;/p>
&lt;p>&lt;code>@ComponentScan&lt;/code>: 组件扫描。让spring Boot扫描到Configuration类并把它加入到程序上下文。默认就会装配标识了&lt;code>@Controller&lt;/code>，&lt;code>@Service&lt;/code>，&lt;code>@Repository&lt;/code>，&lt;code>@Component&lt;/code>注解的类到spring容器中。&lt;/p>
&lt;p>&lt;code>@EnableAutoConfiguration&lt;/code>: 允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。&lt;/p>
&lt;p>&lt;code>@RestController&lt;/code>: 用于标注控制层组件，表示这是个控制器bean，并且是将函数的返回值直接填入HTTP响应体中，是REST风格的控制器；它是&lt;code>@Controller&lt;/code>和@&lt;code>ResponseBody&lt;/code>的合集。&lt;/p>
&lt;p>&lt;code>@ResponseBody&lt;/code>: 表示该方法的返回结果直接写入HTTP response body中。一般在异步获取数据时使用，在使用&lt;code>@RequestMapping&lt;/code>后，返回值通常解析为跳转路径，加上&lt;code>@responsebody&lt;/code>后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上&lt;code>@Responsebody&lt;/code>后，会直接返回json数据。&lt;/p>
&lt;p>&lt;code>@RequestMapping&lt;/code>: RequestMapping是一个用来处理请求地址映射的注解；提供路由信息，负责URL到Controller中的具体函数的映射，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。&lt;/p>
&lt;p>&lt;code>@AutoWired&lt;/code>: 把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。&lt;/p>
&lt;p>&lt;code>@Qualifier&lt;/code>: 当有多个同一类型的Bean时，可以用@Qualifier(&amp;quot;name&amp;quot;)来指定。与&lt;code>@Autowired&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>@Bean&lt;/code>: 放在方法上面，而不是类上面，意思是该方法产生的Bean，交给 Spring 来管理。&lt;/p>
&lt;p>&lt;code>@Component&lt;/code>: 泛指组件，当组件不好归类的时候，我们可以使用这个注解来标注。&lt;/p>
&lt;p>&lt;code>@Service&lt;/code>: 一般作用于 service 层的组件。&lt;/p>
&lt;p>&lt;code>@Repository&lt;/code>: 用于标注数据访问组件，即DAO组件。&lt;/p>
&lt;h3 id="22-springboot-异常处理">2.2. SpringBoot 异常处理&lt;/h3>
&lt;p>通过&lt;code>@ControllerAdvice&lt;/code>和&lt;code>@ExceptionHandler&lt;/code>来处理全局异常。&lt;/p>
&lt;p>详细内容参考文章：&lt;a href="https://snailclimb.gitee.io/springboot-guide/#/./docs/advanced/springboot-handle-exception">《SpringBoot异常处理》&lt;/a>&lt;/p>
&lt;h3 id="23-springboot-中如何实现过滤器和拦截器">2.3. SpringBoot 中如何实现过滤器和拦截器？&lt;/h3>
&lt;p>&lt;strong>（1）过滤器&lt;/strong>&lt;/p>
&lt;p>spring boot 中自定义过滤器只需要实现 Filter 接口，重写里面的&lt;code>init()&lt;/code> ,&lt;code>doFilter()&lt;/code>,&lt;code>destroy()&lt;/code>方法即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Filter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//初始化过滤器后执行的操作
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FilterConfig&lt;/span> &lt;span class="n">filterConfig&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 对请求进行过滤
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">var2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// 销毁过滤器后执行的操作，主要用户对某些资源的回收
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">destroy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在配置中注册自定义的过滤器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyFilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">MyFilter&lt;/span> &lt;span class="n">myFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">thirdFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myFilter&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/api/*&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有多个过滤器，可以在配置中设置一下顺序，&lt;code>filterRegistrationBean.setOrder(xx);&lt;/code>&lt;/p>
&lt;p>详情可以参考文章：&lt;a href="https://snailclimb.gitee.io/springboot-guide/#/./docs/basis/springboot-filter">《SpringBoot 实现过滤器》&lt;/a>&lt;/p>
&lt;p>&lt;strong>（2）拦截器&lt;/strong>&lt;/p>
&lt;p>如果你需要自定义 &lt;strong>Interceptor&lt;/strong> 的话必须实现 &lt;code>org.springframework.web.servlet.HandlerInterceptor&lt;/code>接口或继承 &lt;code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter&lt;/code>类，并且需要重写下面下面3个方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">preHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">modelAndView&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意： &lt;strong>preHandle&lt;/strong>方法返回 &lt;strong>true&lt;/strong>或 &lt;strong>false&lt;/strong>。如果返回 &lt;strong>true&lt;/strong>，则意味着请求将继续到达 &lt;strong>Controller&lt;/strong> 被处理。&lt;/p>
&lt;h2 id="3-mybatis">3. MyBatis&lt;/h2></description></item><item><title>Java 基础面试题</title><link>https://ahamoment.cn/post/interview-java/</link><pubDate>Wed, 16 Dec 2020 09:44:34 +0800</pubDate><guid>https://ahamoment.cn/post/interview-java/</guid><description>
&lt;blockquote>
&lt;p>本文收集Java基础知识点相关的面试题目&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-java-基础">1. Java 基础&lt;/h2>
&lt;h3 id="11-语法">1.1. 语法&lt;/h3>
&lt;h4 id="111-java-泛型了解么什么是类型擦除介绍一下常用的通配符">1.1.1 Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？&lt;/h4>
&lt;p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。&lt;/p>
&lt;p>&lt;strong>Java 的泛型是伪泛型，这是因为 Java 在编译期间，所有的泛型信息都会被擦掉，这也就是通常所说类型擦除 。&lt;/strong> 更多关于类型擦除的问题，可以查看这篇文章：&lt;a href="https://www.cnblogs.com/wuqinglong/p/9456193.html">《Java 泛型类型擦除以及类型擦除带来的问题》&lt;/a> 。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="n">List&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">list&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">12&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">//这里直接添加会报错
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="n">Class&lt;/span>&lt;span class="o">&amp;lt;?&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">clazz&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getClass&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="n">Method&lt;/span> &lt;span class="n">add&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">clazz&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getDeclaredMethod&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;add&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">//但是通过反射添加，是可以的
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">invoke&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;kl&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。&lt;/p>
&lt;p>&lt;strong>1.泛型类&lt;/strong>：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">//此处T可以随便写为任意标识，常见的如T、E、K、V等形式的参数常用于表示泛型
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">//在实例化泛型类时，必须指定T的具体类型
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Generic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;{&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Generic&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">key&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">getKey&lt;/span>&lt;span class="o">(){&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如何实例化泛型类：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="n">Generic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">genericInteger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Generic&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">&amp;gt;(&lt;/span>&lt;span class="n">123456&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>2.泛型接口&lt;/strong> ：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Generator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现泛型接口，不指定类型：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">GeneratorImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>实现泛型接口，指定类型：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">class&lt;/span> &lt;span class="nc">GeneratorImpl&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Generator&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">&amp;gt;{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="nf">method&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>3.泛型方法&lt;/strong> ：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">printArray&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">E&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">inputArray&lt;/span> &lt;span class="o">)&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">E&lt;/span> &lt;span class="n">element&lt;/span> &lt;span class="o">:&lt;/span> &lt;span class="n">inputArray&lt;/span> &lt;span class="o">){&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="s">&amp;#34;%s &amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">element&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="c1">// 创建不同类型数组： Integer, Double 和 Character
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">Integer&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">intArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">3&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">stringArray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="s">&amp;#34;Hello&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;World&amp;#34;&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="n">printArray&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">intArray&lt;/span> &lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="n">printArray&lt;/span>&lt;span class="o">(&lt;/span> &lt;span class="n">stringArray&lt;/span> &lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>常用的通配符为： T，E，K，V，？&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>？ 表示不确定的 java 类型&lt;/li>
&lt;li>T (type) 表示具体的一个 java 类型&lt;/li>
&lt;li>K V (key value) 分别代表 java 键值中的 Key Value&lt;/li>
&lt;li>E (element) 代表 Element&lt;/li>
&lt;/ul>
&lt;p>更多关于 Java 泛型中的通配符可以查看这篇文章：&lt;a href="https://juejin.im/post/5d5789d26fb9a06ad0056bd9">《聊一聊-JAVA 泛型中的通配符 T，E，K，V，？》&lt;/a>&lt;/p>
&lt;h4 id="112--和-equals-的区别">1.1.2. == 和 equals 的区别&lt;/h4>
&lt;p>&lt;strong>&lt;code>==&lt;/code>&lt;/strong> : 它的作用是判断两个对象的地址是不是相等。即判断两个对象是不是同一个对象。(&lt;strong>基本数据类型&lt;code>==&lt;/code>比较的是值，引用数据类型&lt;code>==&lt;/code>比较的是内存地址&lt;/strong>)&lt;/p>
&lt;blockquote>
&lt;p>因为 Java 只有值传递，所以，对于 == 来说，不管是比较基本数据类型，还是引用数据类型的变量，其本质比较的都是值，只是引用类型变量存的值是对象的地址。&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>&lt;code>equals()&lt;/code>&lt;/strong> : 它的作用也是判断两个对象是否相等，它不能用于比较基本数据类型的变量。&lt;code>equals()&lt;/code>方法存在于&lt;code>Object&lt;/code>类中，而&lt;code>Object&lt;/code>类是所有类的直接或间接父类。&lt;/p>
&lt;p>&lt;code>Object&lt;/code>类&lt;code>equals()&lt;/code>方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">obj&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>equals()&lt;/code> 方法存在两种使用情况：&lt;/p>
&lt;ul>
&lt;li>情况 1：类没有覆盖 &lt;code>equals()&lt;/code>方法。则通过&lt;code>equals()&lt;/code>比较该类的两个对象时，等价于通过“==”比较这两个对象。使用的默认是 &lt;code>Object&lt;/code>类&lt;code>equals()&lt;/code>方法。&lt;/li>
&lt;li>情况 2：类覆盖了 &lt;code>equals()&lt;/code>方法，是对对象内容的比较。一般，我们都覆盖 &lt;code>equals()&lt;/code>方法来两个对象的内容相等；若它们的内容相等，则返回 true(即，认为这两个对象相等)。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>举个例子：&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">test1&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// a 为一个引用
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">// b为另一个引用,对象的内容一样
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">aa&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 放在常量池中
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">bb&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;ab&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 从常量池中查找
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">aa&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">bb&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;aa==bb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">// false，非同一对象
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;a==b&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;aEQb&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">42&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">42&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">// true
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;true&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>说明：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;code>String&lt;/code> 中的 &lt;code>equals&lt;/code> 方法是被重写过的，因为 &lt;code>Object&lt;/code> 的 &lt;code>equals&lt;/code> 方法是比较的对象的内存地址，而 &lt;code>String&lt;/code> 的 &lt;code>equals&lt;/code> 方法比较的是对象的值。&lt;/li>
&lt;li>当创建 &lt;code>String&lt;/code> 类型的对象时，虚拟机会在常量池中查找有没有已经存在的值和要创建的值相同的对象，如果有就把它赋给当前引用。如果没有就在常量池中重新创建一个 &lt;code>String&lt;/code> 对象。&lt;/li>
&lt;/ul>
&lt;p>&lt;code>String&lt;/code>类&lt;code>equals()&lt;/code>方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">equals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Object&lt;/span> &lt;span class="n">anObject&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">anObject&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">anObject&lt;/span> &lt;span class="k">instanceof&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">anotherString&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">)&lt;/span>&lt;span class="n">anObject&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">anotherString&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">v1&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">v2&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">anotherString&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">value&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="o">--&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">v1&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">v2&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">])&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="113-hashcode-与-equals">1.1.3. hashCode() 与 equals()&lt;/h4>
&lt;p>面试官可能会问你：“你重写过 &lt;code>hashcode&lt;/code> 和 &lt;code>equals&lt;/code>么，为什么重写 &lt;code>equals&lt;/code> 时必须重写 &lt;code>hashCode&lt;/code> 方法？”&lt;/p>
&lt;p>&lt;strong>1)hashCode()介绍:&lt;/strong>&lt;/p>
&lt;p>&lt;code>hashCode()&lt;/code> 的作用是获取哈希码，也称为散列码；它实际上是返回一个 int 整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。&lt;code>hashCode()&lt;/code>定义在 JDK 的 &lt;code>Object&lt;/code> 类中，这就意味着 Java 中的任何类都包含有 &lt;code>hashCode()&lt;/code> 函数。另外需要注意的是： &lt;code>Object&lt;/code> 的 hashcode 方法是本地方法，也就是用 c 语言或 c++ 实现的，该方法通常用来将对象的 内存地址 转换为整数之后返回。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">native&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashCode&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>散列表存储的是键值对(key-value)，它的特点是：能根据“键”快速的检索出对应的“值”。这其中就利用到了散列码！（可以快速找到所需要的对象）&lt;/p>
&lt;p>&lt;strong>2)为什么要有 hashCode？&lt;/strong>&lt;/p>
&lt;p>我们以&lt;code>HashSet&lt;/code> 如何检查重复”为例子来说明为什么要有 hashCode？&lt;/p>
&lt;p>当你把对象加入 &lt;code>HashSet&lt;/code> 时，&lt;code>HashSet&lt;/code> 会先计算对象的 hashcode 值来判断对象加入的位置，同时也会与其他已经加入的对象的 hashcode 值作比较，如果没有相符的 hashcode，&lt;code>HashSet&lt;/code> 会假设对象没有重复出现。但是如果发现有相同 hashcode 值的对象，这时会调用 &lt;code>equals()&lt;/code> 方法来检查 hashcode 相等的对象是否真的相同。如果两者相同，&lt;code>HashSet&lt;/code> 就不会让其加入操作成功。如果不同的话，就会重新散列到其他位置。这样我们就大大减少了 equals 的次数，相应就大大提高了执行速度。&lt;/p>
&lt;p>&lt;strong>3) 为什么重写 &lt;code>equals&lt;/code> 时必须重写 &lt;code>hashCode&lt;/code> 方法？&lt;/strong>&lt;/p>
&lt;p>如果两个对象相等，则 hashcode 一定也是相同的。两个对象相等，对两个对象分别调用 equals 方法都返回 true。但是，两个对象有相同的 hashcode 值，它们也不一定是相等的 。&lt;strong>因此，equals 方法被覆盖过，则 &lt;code>hashCode&lt;/code> 方法也必须被覆盖。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>&lt;code>hashCode()&lt;/code>的默认行为是对堆上的对象产生独特值。如果没有重写 &lt;code>hashCode()&lt;/code>，则该 class 的两个对象无论如何都不会相等（即使这两个对象指向相同的数据）&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>4)为什么两个对象有相同的 hashcode 值，它们也不一定是相等的？&lt;/strong>&lt;/p>
&lt;p>在这里解释一位小伙伴的问题。以下内容摘自《Head Fisrt Java》。&lt;/p>
&lt;p>因为 &lt;code>hashCode()&lt;/code> 所使用的杂凑算法也许刚好会让多个对象传回相同的杂凑值。越糟糕的杂凑算法越容易碰撞，但这也与数据值域分布的特性有关（所谓碰撞也就是指的是不同的对象得到相同的 &lt;code>hashCode&lt;/code>。&lt;/p>
&lt;p>我们刚刚也提到了 &lt;code>HashSet&lt;/code>,如果 &lt;code>HashSet&lt;/code> 在对比的时候，同样的 hashcode 有多个对象，它会使用 &lt;code>equals()&lt;/code> 来判断是否真的相同。也就是说 &lt;code>hashcode&lt;/code> 只是用来缩小查找成本。&lt;/p>
&lt;p>更多关于 &lt;code>hashcode()&lt;/code> 和 &lt;code>equals()&lt;/code> 的内容可以查看：&lt;a href="https://www.cnblogs.com/skywang12345/p/3324958.html">Java hashCode() 和 equals()的若干问题解答&lt;/a>&lt;/p>
&lt;h3 id="12-数据类型">1.2. 数据类型&lt;/h3>
&lt;h4 id="121-string-stringbuffer-和-stringbuilder-的区别是什么-string-为什么是不可变的">1.2.1 String StringBuffer 和 StringBuilder 的区别是什么? String 为什么是不可变的?&lt;/h4>
&lt;p>简单的来说：&lt;code>String&lt;/code> 类中使用 final 关键字修饰字符数组来保存字符串，&lt;code>private final char value[]&lt;/code>，所以&lt;code>String&lt;/code> 对象是不可变的。&lt;/p>
&lt;blockquote>
&lt;p>在 Java 9 之后，String 类的实现改用 byte 数组存储字符串 &lt;code>private final byte[] value&lt;/code>;&lt;/p>
&lt;/blockquote>
&lt;p>而 &lt;code>StringBuilder&lt;/code> 与 &lt;code>StringBuffer&lt;/code> 都继承自 &lt;code>AbstractStringBuilder&lt;/code> 类，在 &lt;code>AbstractStringBuilder&lt;/code> 中也是使用字符数组保存字符串&lt;code>char[] value&lt;/code> 但是没有用 &lt;code>final&lt;/code> 关键字修饰，所以这两种对象都是可变的。&lt;/p>
&lt;p>&lt;strong>线程安全性&lt;/strong>&lt;/p>
&lt;p>&lt;code>String&lt;/code> 中的对象是不可变的，也就可以理解为常量，线程安全。&lt;/p>
&lt;p>&lt;code>StringBuffer&lt;/code> 对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。&lt;/p>
&lt;p>&lt;code>StringBuilder&lt;/code> 并没有对方法进行加同步锁，所以是非线程安全的。&lt;/p>
&lt;p>&lt;strong>性能&lt;/strong>&lt;/p>
&lt;p>每次对 &lt;code>String&lt;/code> 类型进行改变的时候，都会生成一个新的 &lt;code>String&lt;/code> 对象，然后将指针指向新的 &lt;code>String&lt;/code> 对象。&lt;code>StringBuffer&lt;/code> 每次都会对 &lt;code>StringBuffer&lt;/code> 对象本身进行操作，而不是生成新的对象并改变对象引用。相同情况下使用 &lt;code>StringBuilder&lt;/code> 相比使用 &lt;code>StringBuffer&lt;/code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。&lt;/p>
&lt;p>&lt;strong>对于三者使用的总结：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>操作少量的数据: 适用 &lt;code>String&lt;/code>&lt;/li>
&lt;li>单线程操作字符串缓冲区下操作大量数据: 适用 &lt;code>StringBuilder&lt;/code>&lt;/li>
&lt;li>多线程操作字符串缓冲区下操作大量数据: 适用 &lt;code>StringBuffer&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="13-方法">1.3. 方法&lt;/h3>
&lt;h4 id="131-重载和重写的区别">1.3.1 重载和重写的区别&lt;/h4>
&lt;p>重载就是同样的一个方法能够根据输入数据的不同，做出不同的处理。&lt;/p>
&lt;p>重写就是当子类继承自父类的相同方法，输入数据一样，但要做出有别于父类的响应时，你就要覆盖父类方法。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>区别点&lt;/th>
&lt;th>重载方法&lt;/th>
&lt;th>重写方法&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>发生范围&lt;/td>
&lt;td>同一个类&lt;/td>
&lt;td>子类&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>参数列表&lt;/td>
&lt;td>必须修改&lt;/td>
&lt;td>一定不能修改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>返回类型&lt;/td>
&lt;td>可修改&lt;/td>
&lt;td>子类方法返回值类型应比父类方法返回值类型更小或相等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>异常&lt;/td>
&lt;td>可修改&lt;/td>
&lt;td>子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>访问修饰符&lt;/td>
&lt;td>可修改&lt;/td>
&lt;td>一定不能做更严格的限制（可以降低限制）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>发生阶段&lt;/td>
&lt;td>编译期&lt;/td>
&lt;td>运行期&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="14-面向对象">1.4 面向对象&lt;/h3>
&lt;h4 id="141-在-java-中定义一个不做事且没有参数的构造方法的作用">1.4.1. 在 Java 中定义一个不做事且没有参数的构造方法的作用&lt;/h4>
&lt;p>Java 程序在执行子类的构造方法之前，如果没有用 &lt;code>super()&lt;/code>来调用父类特定的构造方法，则会调用父类中“没有参数的构造方法”。因此，如果父类中只定义了有参数的构造方法，而在子类的构造方法中又没有用 &lt;code>super()&lt;/code>来调用父类中特定的构造方法，则编译时将发生错误，因为 Java 程序在父类中找不到没有参数的构造方法可供执行。解决办法是在父类里加上一个不做事且没有参数的构造方法。&lt;/p>
&lt;h4 id="142-面对对象的三大特性">1.4.2. 面对对象的三大特性&lt;/h4>
&lt;p>封装、继承和多态。&lt;/p>
&lt;p>封装是指把一个对象的状态信息（也就是属性）隐藏在对象内部，不允许外部对象直接访问对象的内部信息。&lt;/p>
&lt;p>继承：不同类型的对象，相互之间经常有一定数量的共同点。&lt;/p>
&lt;p>多态，顾名思义，表示一个对象具有多种的状态。具体表现为父类的引用指向子类的实例。&lt;/p>
&lt;h3 id="14-反射机制">1.4. 反射机制&lt;/h3>
&lt;p>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。&lt;/p>
&lt;p>&lt;strong>反射机制优缺点&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>&lt;strong>优点：&lt;/strong> 运行期类型的判断，动态加载类，提高代码灵活度。&lt;/li>
&lt;li>&lt;strong>缺点：&lt;/strong> 1,性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多。2,安全问题，让我们可以动态操作改变类的属性同时也增加了类的安全隐患。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>反射的应用场景&lt;/strong>&lt;/p>
&lt;p>&lt;strong>反射是框架设计的灵魂。&lt;/strong>&lt;/p>
&lt;p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。&lt;/p>
&lt;p>举例：&lt;/p>
&lt;ol>
&lt;li>我们在使用 JDBC 连接数据库时使用 &lt;code>Class.forName()&lt;/code>通过反射加载数据库的驱动程序；&lt;/li>
&lt;li>Spring 框架的 IOC（动态加载管理 Bean）创建对象以及 AOP（动态代理）功能都和反射有联系；&lt;/li>
&lt;li>动态配置实例的属性；&lt;/li>
&lt;/ol>
&lt;h3 id="15-文件与io流">1.5. 文件与IO流&lt;/h3>
&lt;h4 id="151-bionioaio-有什么区别">1.5.1. BIO,NIO,AIO 有什么区别?&lt;/h4>
&lt;ul>
&lt;li>&lt;strong>BIO (Blocking I/O):&lt;/strong> 同步阻塞 I/O 模式，数据的读取写入必须阻塞在一个线程内等待其完成。在活动连接数不是特别高（小于单机 1000）的情况下，这种模型是比较不错的，可以让每一个连接专注于自己的 I/O 并且编程模型简单，也不用过多考虑系统的过载、限流等问题。线程池本身就是一个天然的漏斗，可以缓冲一些系统处理不了的连接或请求。但是，当面对十万甚至百万级连接的时候，传统的 BIO 模型是无能为力的。因此，我们需要一种更高效的 I/O 处理模型来应对更高的并发量。&lt;/li>
&lt;li>&lt;strong>NIO (Non-blocking/New I/O):&lt;/strong> NIO 是一种同步非阻塞的 I/O 模型，在 Java 1.4 中引入了 NIO 框架，对应 java.nio 包，提供了 Channel , Selector，Buffer 等抽象。NIO 中的 N 可以理解为 Non-blocking，不单纯是 New。它支持面向缓冲的，基于通道的 I/O 操作方法。 NIO 提供了与传统 BIO 模型中的 &lt;code>Socket&lt;/code> 和 &lt;code>ServerSocket&lt;/code> 相对应的 &lt;code>SocketChannel&lt;/code> 和 &lt;code>ServerSocketChannel&lt;/code> 两种不同的套接字通道实现,两种通道都支持阻塞和非阻塞两种模式。阻塞模式使用就像传统中的支持一样，比较简单，但是性能和可靠性都不好；非阻塞模式正好与之相反。对于低负载、低并发的应用程序，可以使用同步阻塞 I/O 来提升开发速率和更好的维护性；对于高负载、高并发的（网络）应用，应使用 NIO 的非阻塞模式来开发&lt;/li>
&lt;li>&lt;strong>AIO (Asynchronous I/O):&lt;/strong> AIO 也就是 NIO 2。在 Java 7 中引入了 NIO 的改进版 NIO 2,它是异步非阻塞的 IO 模型。异步 IO 是基于事件和回调机制实现的，也就是应用操作之后会直接返回，不会堵塞在那里，当后台处理完成，操作系统会通知相应的线程进行后续的操作。AIO 是异步 IO 的缩写，虽然 NIO 在网络操作中，提供了非阻塞的方法，但是 NIO 的 IO 行为还是同步的。对于 NIO 来说，我们的业务线程是在 IO 操作准备好时，得到通知，接着就由这个线程自行进行 IO 操作，IO 操作本身是同步的。查阅网上相关资料，我发现就目前来说 AIO 的应用还不是很广泛，Netty 之前也尝试使用过 AIO，不过又放弃了。&lt;/li>
&lt;/ul>
&lt;h2 id="2-容器">2. 容器&lt;/h2>
&lt;h2 id="3-参考">3. 参考&lt;/h2>
&lt;p>[1] &lt;a href="https://github.com/Snailclimb/JavaGuide">JavaGuide&lt;/a>&lt;/p></description></item><item><title>计算机网络面试题</title><link>https://ahamoment.cn/post/interview-network/</link><pubDate>Thu, 10 Dec 2020 09:43:05 +0800</pubDate><guid>https://ahamoment.cn/post/interview-network/</guid><description>
&lt;blockquote>
&lt;p>本文主要收集面试过程中遇到的计算机网络的面试题。&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-osi-与-tcpip-各层的结构与功能都有哪些协议">1. OSI 与 TCP/IP 各层的结构与功能，都有哪些协议？&lt;/h2>
&lt;p>学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/%E7%BD%91%E7%BB%9C%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84.png" alt="">&lt;/p>
&lt;p>结合互联网的情况，自上而下地，非常简要的介绍一下各层的作用。&lt;/p>
&lt;h3 id="11-应用层">1.1. 应用层&lt;/h3>
&lt;p>&lt;strong>应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。&lt;strong>应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如&lt;/strong>域名系统DNS&lt;/strong>，支持万维网应用的 &lt;strong>HTTP协议&lt;/strong>，支持电子邮件的 &lt;strong>SMTP协议&lt;/strong>等等。我们把应用层交互的数据单元称为报文。&lt;/p>
&lt;h3 id="12-运输层">1.2. 运输层&lt;/h3>
&lt;p>&lt;strong>运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务&lt;/strong>。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。&lt;/p>
&lt;p>&lt;strong>运输层主要使用以下两种协议:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>传输控制协议 TCP&lt;/strong>（Transmission Control Protocol）--提供&lt;strong>面向连接&lt;/strong>的，&lt;strong>可靠的&lt;/strong>数据传输服务。&lt;/li>
&lt;li>&lt;strong>用户数据协议 UDP&lt;/strong>（User Datagram Protocol）--提供&lt;strong>无连接&lt;/strong>的，尽最大努力的数据传输服务（&lt;strong>不保证数据传输的可靠性&lt;/strong>）。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>TCP 与 UDP 的对比见问题三。&lt;/strong>&lt;/p>
&lt;h3 id="13-网络层">1.3. 网络层&lt;/h3>
&lt;p>&lt;strong>在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。&lt;/strong> 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 &lt;strong>IP 协议&lt;/strong>，因此分组也叫 &lt;strong>IP 数据报&lt;/strong> ，简称 &lt;strong>数据报&lt;/strong>。&lt;/p>
&lt;p>这里要注意：&lt;strong>不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混&lt;/strong>。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。&lt;/p>
&lt;p>这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.&lt;/p>
&lt;p>互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Internet Protocol）和许多路由选择协议，因此互联网的网络层也叫做&lt;strong>网际层&lt;/strong>或&lt;strong>IP层&lt;/strong>。&lt;/p>
&lt;h3 id="14-数据链路层">1.4. 数据链路层&lt;/h3>
&lt;p>&lt;strong>数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。&lt;/strong> 在两个相邻节点之间传送数据时，&lt;strong>数据链路层将网络层交下来的 IP 数据报组装成帧&lt;/strong>，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。&lt;/p>
&lt;p>在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。 控制信息还使接收端能够检测到所收到的帧中有无差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。&lt;/p>
&lt;h3 id="15-物理层">1.5. 物理层&lt;/h3>
&lt;p>在物理层上所传送的数据单位是比特。&lt;/p>
&lt;p>&lt;strong>物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异，&lt;/strong> 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。&lt;/p>
&lt;p>在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。&lt;/p>
&lt;h2 id="2-tcp-三次握手和四次挥手">2. TCP 三次握手和四次挥手&lt;/h2>
&lt;blockquote>
&lt;ul>
&lt;li>Q1: 什么是三次握手和四次挥手？&lt;/li>
&lt;li>Q2: 为什么要三次握手？如果是两次握手会发生什么？&lt;/li>
&lt;li>Q4: 为什么需要四次挥手？&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>这部分的内容网上有很多文章都讲的很不错，可以直接借鉴。&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>&lt;a href="https://blog.csdn.net/qzcsu/article/details/72861891">两张动图-彻底明白TCP的三次握手与四次挥手&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://juejin.cn/post/6844903958624878606">面试官，不要再问我三次握手和四次挥手&lt;/a>&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>上面的两篇文章都没有讲清楚为什么两次握手会有问题，我从&lt;code>谢希仁的《计算机网络》&lt;/code> 一书中找到了比较完整的答案。&lt;/p>
&lt;blockquote>
&lt;p>为什么客户端还要发送一次确认呢？这主要是为了防止已失效的连接请求报文突然又传送到了服务端，因而产生错误。&lt;/p>
&lt;p>所谓的“已失效的连接请求报文段”是这样产生的。考虑一种正常情况。客户端发出连接请求，但因为连接请求报文丢失而未收到确认。于是客户端再重传了一次连接请求。后来收到了确认，建立了连接。数据传输完毕后，就释放了连接。客户端共发送了两个连接请求报文段，其中第一个丢失，第二个到达了服务端。没有“已失效的连接请求报文段”。&lt;/p>
&lt;p>现在假设一种异常情况，即客户端发送出的第一个连接请求报文段并没有丢失，而是在某些网络结点长时间滞留了，以至延误到连接释放后的某个时间才到达服务端。本来这是一个早已失效的报文段。但是服务端收到此失效的连接报文段后，就误以为是客户端又发送一次新的请求。于是就向客户端发出确认报文段，同意建立连接。假定不采用三次握手，那么只要客户端发出确认，新的连接就建立了。&lt;/p>
&lt;p>由于现在客户端并没有发送建立连接的请求，因此不会理睬服务端的确认，也不会向服务端发送数据。但服务端却认为新的运输连接已经建立了，并一直等待客户端发送数据。服务端的许多资源就这样白白浪费了。&lt;/p>
&lt;p>采用三次握手可以防止上述现象。例如在刚才的情况下，客户端不会向服务端确认发送确认。服务端由于收不到确认，就知道客户端没有建立连接的要求。&lt;/p>
&lt;/blockquote>
&lt;h2 id="3-tcp-协议如何保证可靠传输">3. TCP 协议如何保证可靠传输&lt;/h2>
&lt;ol>
&lt;li>应用数据被分割成 TCP 认为最适合发送的数据块。&lt;/li>
&lt;li>TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。&lt;/li>
&lt;li>&lt;strong>校验和：&lt;/strong> TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。&lt;/li>
&lt;li>TCP 的接收端会丢弃重复的数据。&lt;/li>
&lt;li>&lt;strong>流量控制：&lt;/strong> TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）&lt;/li>
&lt;li>&lt;strong>拥塞控制：&lt;/strong> 当网络拥塞时，减少数据的发送。&lt;/li>
&lt;li>&lt;strong>ARQ协议：&lt;/strong> 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。&lt;/li>
&lt;li>&lt;strong>超时重传：&lt;/strong> 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。&lt;/li>
&lt;/ol>
&lt;h3 id="31-流量控制">3.1. 流量控制&lt;/h3>
&lt;p>&lt;strong>（1）什么是流量控制？流量控制的目的？&lt;/strong>&lt;/p>
&lt;p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面。&lt;/p>
&lt;p>&lt;strong>（2）如何实现流量控制？&lt;/strong>&lt;/p>
&lt;p>由滑动窗口协议（连续ARQ协议）实现。滑动窗口协议既保证了分组无差错、有序接收，也实现了流量控制。主要的方式就是接收方返回的 ACK 中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。&lt;/p>
&lt;p>&lt;strong>（3）流量控制引发的死锁？怎么避免死锁的发生？&lt;/strong>&lt;/p>
&lt;p>当发送者收到了一个窗口为0的应答，发送者便停止发送，等待接收者的下一个应答。但是如果这个窗口不为0的应答在传输过程丢失，发送者一直等待下去，而接收者以为发送者已经收到该应答，等待接收新数据，这样双方就相互等待，从而产生死锁。
为了避免流量控制引发的死锁，TCP使用了持续计时器。每当发送者收到一个零窗口的应答后就启动该计时器。时间一到便主动发送报文询问接收者的窗口大小。若接收者仍然返回零窗口，则重置该计时器继续等待；若窗口不为0，则表示应答报文丢失了，此时重置发送窗口后开始发送，这样就避免了死锁的产生。&lt;/p>
&lt;h3 id="32--拥塞控制">3.2 . 拥塞控制&lt;/h3>
&lt;blockquote>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/37379780">https://zhuanlan.zhihu.com/p/37379780&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-tcp-的粘包和拆包">4. TCP 的粘包和拆包&lt;/h2>
&lt;p>参考: &lt;a href="https://zhuanlan.zhihu.com/p/77275039">TCP 的粘包和拆包&lt;/a>&lt;/p>
&lt;p>拆包和粘包是在socket编程中经常出现的情况，在socket通讯过程中，如果通讯的一端一次性连续发送多条数据包，tcp协议会将多个数据包打包成一个tcp报文发送出去，这就是所谓的&lt;strong>粘包&lt;/strong>。而如果通讯的一端发送的数据包超过一次tcp报文所能传输的最大值时，就会将一个数据包拆成多个最大tcp长度的tcp报文分开传输，这就叫做&lt;strong>拆包&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>总结出现粘包的原因&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>要发送的数据小于TCP发送缓冲区的大小，TCP将多次写入缓冲区的数据一次发送出去；&lt;/li>
&lt;li>接收数据端的应用层没有及时读取接收缓冲区中的数据；&lt;/li>
&lt;li>数据发送过快，数据包堆积导致缓冲区积压多个数据后才一次性发送出去(如果客户端每发送一条数据就睡眠一段时间就不会发生粘包)；&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>解决方案&lt;/strong>&lt;/p>
&lt;p>对于粘包的情况，要对粘在一起的包进行拆包。对于拆包的情况，要对被拆开的包进行粘包，即将一个被拆开的完整应用包再组合成一个完整包。比较通用的做法就是每次发送一个应用数据包前在前面加上四个字节的包长度值，指明这个应用包的真实长度。如下图就是应用数据包格式。&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-bb7b769a7187cd5fc146c79c5ae9d208_720w.jpg" alt="img">&lt;/p>
&lt;p>实现解决拆包粘包问题，有两种实现方式：&lt;/p>
&lt;ol>
&lt;li>一种方式是引入netty库，netty封装了多种拆包粘包的方式，只需要对接口熟悉并调用即可，减少自己处理数据协议的繁琐流程；&lt;/li>
&lt;li>自己写协议封装和解析流程，相当于实现了netty库拆粘包的简易版本.&lt;/li>
&lt;/ol>
&lt;h2 id="5-在浏览器中输入url地址到显示主页的过程">5. 在浏览器中输入url地址到显示主页的过程&lt;/h2>
&lt;p>大致上分为以下几个过程：&lt;/p>
&lt;ol>
&lt;li>DNS解析&lt;/li>
&lt;li>TCP连接&lt;/li>
&lt;li>发送HTTP请求&lt;/li>
&lt;li>服务器处理请求并返回HTTP报文&lt;/li>
&lt;li>浏览器解析渲染页面&lt;/li>
&lt;li>连接结束&lt;/li>
&lt;/ol>
&lt;p>可以参考下面这篇文章: &lt;a href="https://segmentfault.com/a/1190000006879700">前端经典面试题: 从输入URL到页面加载发生了什么？&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md">https://github.com/Snailclimb/JavaGuide/blob/master/docs/network/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C.md&lt;/a>&lt;/p></description></item><item><title>MySQL 面试题</title><link>https://ahamoment.cn/post/interview-mysql/</link><pubDate>Wed, 09 Dec 2020 11:48:24 +0800</pubDate><guid>https://ahamoment.cn/post/interview-mysql/</guid><description>
&lt;h2 id="1-什么是mysql">1. 什么是MySQL？&lt;/h2>
&lt;p>MySQL 是一种关系型数据库，在Java企业级开发中非常常用，因为 MySQL 是开源免费的，并且方便扩展。阿里巴巴数据库系统也大量用到了 MySQL，因此它的稳定性是有保障的。MySQL是开放源代码的，因此任何人都可以在 GPL(General Public License) 的许可下下载并根据个性化的需要对其进行修改。MySQL的默认端口号是&lt;strong>3306&lt;/strong>。&lt;/p>
&lt;h2 id="2-存储引擎">2. 存储引擎&lt;/h2>
&lt;h3 id="21-myisam-和-innodb-的区别">2.1. MyISAM 和 InnoDB 的区别&lt;/h3>
&lt;p>MyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，而且提供了大量的特性，包括&lt;strong>全文索引、压缩、空间函数&lt;/strong>等，但&lt;strong>MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复&lt;/strong>。不过，5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为InnoDB。&lt;/p>
&lt;p>大多数时候我们使用的都是 InnoDB 存储引擎，但是在某些情况下使用 MyISAM 也是合适的比如读密集的情况下。（如果你不介意 MyISAM 崩溃恢复问题的话）。&lt;/p>
&lt;p>&lt;strong>两者的对比：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>是否支持行级锁&lt;/strong> : MyISAM 只有表级锁(table-level locking)，而InnoDB 支持行级锁(row-level locking)和表级锁，默认为行级锁。&lt;/li>
&lt;li>&lt;strong>是否支持事务和崩溃后的安全恢复： MyISAM&lt;/strong> 强调的是性能，每次查询具有原子性,其执行速度比InnoDB类型更快，但是不提供事务支持。但是&lt;strong>InnoDB&lt;/strong> 提供事务支持，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。&lt;/li>
&lt;li>&lt;strong>是否支持外键：&lt;/strong> MyISAM不支持，而InnoDB支持。&lt;/li>
&lt;li>&lt;strong>是否支持MVCC&lt;/strong> ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效;MVCC只在 &lt;code>READ COMMITTED&lt;/code> 和 &lt;code>REPEATABLE READ&lt;/code> 两个隔离级别下工作;MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现;各数据库中MVCC实现并不统一。推荐阅读：&lt;a href="https://segmentfault.com/a/1190000012650596">MySQL-InnoDB-MVCC多版本并发控制&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="3-索引">3. 索引&lt;/h2>
&lt;h3 id="31-什么是索引">3.1. 什么是索引&lt;/h3>
&lt;p>&lt;strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B树， B+树和Hash。&lt;/strong>&lt;/p>
&lt;p>索引的作用就相当于目录的作用。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。&lt;strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B树， B+树和Hash。&lt;/strong>&lt;/p>
&lt;h3 id="32-为什么用索引">3.2. 为什么用索引？&lt;/h3>
&lt;p>&lt;strong>索引的优点&lt;/strong>&lt;/p>
&lt;p>&lt;strong>可以大大加快检索的速度&lt;/strong>，这也是创建索引的最主要的原因。毕竟大部分系统的读请求总是大于写请求的。 另外，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;/p>
&lt;p>&lt;strong>索引的缺点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>创建索引和维护索引需要耗费许多时间&lt;/strong>：当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低SQL执行效率。&lt;/li>
&lt;li>&lt;strong>占用物理存储空间&lt;/strong> ：索引需要使用物理文件存储，也会耗费一定空间。&lt;/li>
&lt;/ol>
&lt;h3 id="33-索引的原理">3.3. 索引的原理&lt;/h3>
&lt;p>InnoDB 的索引使用的是 B+ 树。&lt;/p>
&lt;p>为什么要用B+树作为索引？而不是B树？&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="34-索引类型">3.4 索引类型&lt;/h3>
&lt;h4 id="341-主键索引与二级索引">3.4.1. 主键索引与二级索引&lt;/h4>
&lt;p>&lt;strong>（1）主键索引&lt;/strong>&lt;/p>
&lt;p>数据表的主键列使用的就是主键索引。一张数据表有只能有一个主键，并且主键不能为null，不能重复。在mysql的InnoDB的表中，当没有显示的指定表的主键时，InnoDB会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则InnoDB将会自动创建一个6Byte的自增主键。&lt;/p>
&lt;p>&lt;strong>（2）二级索引&lt;/strong>&lt;/p>
&lt;p>又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。唯一索引，普通索引，前缀索引等索引属于二级索引。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>唯一索引(Unique Key)&lt;/strong> ：唯一索引也是一种约束。**唯一索引的属性列不能出现重复的数据，但是允许数据为NULL，一张表允许创建多个唯一索引。**建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。&lt;/li>
&lt;li>&lt;strong>普通索引(Index)&lt;/strong> ：&lt;strong>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和NULL。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>前缀索引(Prefix)&lt;/strong> ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。&lt;/li>
&lt;li>&lt;strong>全文索引(Full Text)&lt;/strong> ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6之后InnoDB也支持了全文索引。&lt;/li>
&lt;/ol>
&lt;h4 id="342-聚集索引与非聚集索引">3.4.2. 聚集索引与非聚集索引&lt;/h4>
&lt;p>&lt;strong>（1）聚集索引&lt;/strong>&lt;/p>
&lt;p>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。&lt;/p>
&lt;p>聚集索引的优点:&lt;/p>
&lt;p>聚集索引的查询速度非常的快，因为整个B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。&lt;/p>
&lt;p>聚集索引的缺点:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>依赖于有序的数据&lt;/strong> ：因为B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或UUID这种又长又难比较的数据，插入或查找的速度肯定比较慢。&lt;/li>
&lt;li>&lt;strong>更新代价大&lt;/strong> ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改， 而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的， 所以对于主键索引来说，主键一般都是不可被修改的。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>（2）非聚集索引&lt;/strong>&lt;/p>
&lt;p>非聚集索引即索引结构和数据分开存放的索引。&lt;/p>
&lt;p>非聚集索引的叶子节点并不一定存放数据的指针， 因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。&lt;/p>
&lt;p>非聚集索引的优点:&lt;/p>
&lt;p>&lt;strong>更新代价比聚集索引要小&lt;/strong> 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的&lt;/p>
&lt;p>非聚集索引的缺点:&lt;/p>
&lt;ol>
&lt;li>跟聚集索引一样，非聚集索引也依赖于有序的数据&lt;/li>
&lt;li>&lt;strong>可能会二次查询(回表)&lt;/strong> :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>（3）非聚集索引一定回表查询吗(覆盖索引)?&lt;/strong>&lt;/p>
&lt;p>&lt;strong>非聚集索引不一定回表查询。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>试想一种情况，用户准备使用SQL查询用户名，而用户名字段正好建立了索引。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> SELECT name FROM table WHERE username=&amp;#39;guang19&amp;#39;;
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>那么这个索引的key本身就是name，查到对应的name直接返回就行了，无需回表查询。&lt;/p>
&lt;/blockquote>
&lt;p>主键索引本身的key就是主键，查到返回就行了。这种情况就称之为覆盖索引了。&lt;/p>
&lt;h3 id="35-索引创建原则">3.5. 索引创建原则&lt;/h3>
&lt;p>&lt;strong>（1）单列索引&lt;/strong>&lt;/p>
&lt;p>单列索引即由一列属性组成的索引。&lt;/p>
&lt;p>&lt;strong>（2）联合索引(多列索引)&lt;/strong>&lt;/p>
&lt;p>联合索引既由多列属性组成索引。&lt;/p>
&lt;p>&lt;strong>（3）最左前缀原则&lt;/strong>&lt;/p>
&lt;p>假设创建的联合索引由三个字段组成:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>ALTER TABLE table ADD INDEX index_name (num,name,age)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么当查询的条件有为:num / (num AND name) / (num AND name AND age)时，索引才生效。所以在创建联合索引时，尽量把查询最频繁的那个字段作为最左(第一个)字段。查询的时候也尽量以这个字段为第一条件。&lt;/p>
&lt;h2 id="4-事务">4. 事务&lt;/h2>
&lt;p>&lt;strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/strong>&lt;/p>
&lt;p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。&lt;/p>
&lt;h3 id="41-事务的四大特性">4.1. 事务的四大特性&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>原子性（Atomicity）：&lt;/strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；&lt;/li>
&lt;li>&lt;strong>一致性（Consistency）：&lt;/strong> 执行事务后，数据库从一个正确的状态变化到另一个正确的状态；&lt;/li>
&lt;li>&lt;strong>隔离性（Isolation）：&lt;/strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/li>
&lt;li>&lt;strong>持久性（Durability）：&lt;/strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/li>
&lt;/ol>
&lt;h3 id="42-并发事务带来了哪些问题">4.2. 并发事务带来了哪些问题&lt;/h3>
&lt;p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>脏读（Dirty read）:&lt;/strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据（A 写 B 读）。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。&lt;/li>
&lt;li>&lt;strong>丢失修改（Lost to modify）:&lt;/strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改（A写 B 写）。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。&lt;/li>
&lt;li>&lt;strong>不可重复读（Unrepeatableread）:&lt;/strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读（A 读 B 写 A 读）。&lt;/li>
&lt;li>&lt;strong>幻读（Phantom read）:&lt;/strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。（A 读 B 写 A 读）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不可重复读和幻读区别：&lt;/strong>&lt;/p>
&lt;p>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。&lt;/p>
&lt;h3 id="43-事务的隔离级别">4.3. 事务的隔离级别&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>READ-UNCOMMITTED(读取未提交)：&lt;/strong> 最低的隔离级别，允许读取尚未提交的数据变更，&lt;strong>可能会导致脏读、幻读或不可重复读&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>READ-COMMITTED(读取已提交)：&lt;/strong> 允许读取并发事务已经提交的数据，&lt;strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>REPEATABLE-READ(可重复读)：&lt;/strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，&lt;strong>可以阻止脏读和不可重复读，但幻读仍有可能发生&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>SERIALIZABLE(可串行化)：&lt;/strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，&lt;strong>该级别可以防止脏读、不可重复读以及幻读&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>隔离级别&lt;/th>
&lt;th>脏读&lt;/th>
&lt;th>不可重复读&lt;/th>
&lt;th>幻影读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>READ-UNCOMMITTED&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>READ-COMMITTED&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REPEATABLE-READ&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SERIALIZABLE&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong>。我们可以通过&lt;code>SELECT @@tx_isolation;&lt;/code>命令来查看，MySQL 8.0 该命令改为&lt;code>SELECT @@transaction_isolation;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="ln">1&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@@&lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@@&lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPEATABLE&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">READ&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要注意的是：与 SQL 标准不同的地方在于 InnoDB 存储引擎在 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong> 事务隔离级别下使用的是&lt;strong>Next-Key Lock&lt;/strong> 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server) 是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong> 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 &lt;strong>SERIALIZABLE(可串行化)&lt;/strong> 隔离级别。因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 &lt;strong>READ-COMMITTED(读取提交内容)&lt;/strong> ，但是你要知道的是InnoDB 存储引擎默认使用 &lt;strong>REPEAaTABLE-READ（可重读）&lt;/strong> 并不会有任何性能损失。&lt;/p>
&lt;p>InnoDB 存储引擎在 &lt;strong>分布式事务&lt;/strong> 的情况下一般会用到 &lt;strong>SERIALIZABLE(可串行化)&lt;/strong> 隔离级别。N,MF. ÔV &lt;/p></description></item><item><title>Git 常用命令汇总</title><link>https://ahamoment.cn/post/tool-git-common-operations/</link><pubDate>Tue, 24 Nov 2020 14:31:32 +0800</pubDate><guid>https://ahamoment.cn/post/tool-git-common-operations/</guid><description>
&lt;h2 id="1-撤销提交">1. 撤销提交&lt;/h2>
&lt;p>撤销提交属于误操作的范畴，Git 误操作的类型主要有以下两个方面：&lt;/p>
&lt;ul>
&lt;li>commit - 分支提交错误&lt;/li>
&lt;li>reset - 误删代码&lt;/li>
&lt;/ul>
&lt;h3 id="11-分支提交错误">1.1 分支提交错误&lt;/h3>
&lt;p>有时我们会遇到这种情况：我们从develop 分支新建一个名为&lt;code>feat/home&lt;/code> 分支去做A功能，然后由于一些其他原因A 功能需要延后，然后我们再从develop分支新建一个分支去做B功能或者C功能，在多分支多功能开发时，就容易出现做B功能时，忘记切换分支，一直等做完了提交了push之后才发现 push 错了远端的分支，并且 push 的改动与该分支需要开发的功能并没有交集，因此我们需要将已经提交错的分支内容回滚并提交push 到正确的远端分支。&lt;/p>
&lt;p>此时有两种情况:&lt;/p>
&lt;h4 id="场景一已经commit但是未push到远端">场景一：已经commit，但是未push到远端&lt;/h4>
&lt;p>使用&lt;code>git reset&lt;/code>命令，可以在提交层面在私有分支舍弃一些没有提交的修改：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 回退到上一个版本&lt;/span>
&lt;span class="ln">2&lt;/span>git reset --hard HEAD^
&lt;/code>&lt;/pre>&lt;/div>&lt;p>git reset 命令主要有三个选项： --soft、--mixed 、--hard，默认参数为 --mixed。&lt;/p>
&lt;p>&lt;strong>git reset --soft 提交&lt;/strong>：&lt;/p>
&lt;p>&lt;code>--soft&lt;/code> 这个版本的命令有“最小”影响，&lt;em>只改变一个符号引用的状态使其指向一个新提交，不会改变其索引和工作目录&lt;/em>， 具体体现如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 模拟一份提交历史&lt;/span>
&lt;span class="ln">2&lt;/span>git add 1.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 1&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>git add 2.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 2&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>git add 3.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 3&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>git add 4.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 4&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-b446150005c25f5d3dee7141360c1d5b_720w.jpg" alt="img">&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 用 --soft 参数尝试回退一个版本&lt;/span>
&lt;span class="ln">2&lt;/span>git reset --soft HEAD~1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们执行&lt;code> --soft&lt;/code> 命令后，可以看到控制台无任何输出，此时再次查看当前提交历史：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图，可以看到版本库已经回退了一个版本：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-63b5fd59bedb05cbc827f74df1419d0e_720w.jpg" alt="img">&lt;/p>
&lt;p>执行 &lt;code>git status&lt;/code>，可以看到SHA1为&lt;code>54b1941&lt;/code> 的commit 上的更改回到了缓存区：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-8e9c7f5733491c923cb5b2bb377e3c88_720w.jpg" alt="img">&lt;/p>
&lt;p>因此我们可以认为 --soft 操作是软重置，只撤销了&lt;code>git commit&lt;/code>操作，保留了 &lt;code>git add&lt;/code> 操作。&lt;/p>
&lt;p>&lt;strong>git reset --hard 提交:&lt;/strong>&lt;/p>
&lt;p>此时接上面的流程，我们这次执行 &lt;code>--hard&lt;/code> 操作，尝试回退两个版本：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --hard HEAD~2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图，可以看到版本库回退了两个版本，并且将本地版本库的头指针全部重置到了指定版本，暂存区也会被重置，工作区的代码也回退到了这一版本：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-63940d55d02820080385baab58ff222e_720w.jpg" alt="img">&lt;/p>
&lt;p>执行&lt;code>git status&lt;/code> 可以看到 我们的 SHA1 为 &lt;code>54b1941&lt;/code>的 commit 上做的修改都“丢失”了，新的文件也被删除了。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-201eca04452cc16359c3b692e68b7476_720w.jpg" alt="img">&lt;/p>
&lt;p>因此可以知道，&lt;code>git commit --hard&lt;/code> 是具有破坏性，是很危险的操作，它很容易导致数据丢失，如果我们真的进行了该操作想要找回丢失的数据，那么此时可以使用&lt;code>git reflog&lt;/code> 回到未来，找到丢失的commit。这个命令的具体使用会在文章后面介绍。&lt;/p>
&lt;p>&lt;strong>git reset --mixed 提交&lt;/strong>：&lt;/p>
&lt;p>我们重新造一系列 commit 历史：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git add 1.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 1.js&amp;#34;
&lt;span class="ln">2&lt;/span>git add 2.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 2.js&amp;#34;
&lt;span class="ln">3&lt;/span>git add 3.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 3.js&amp;#34;
&lt;span class="ln">4&lt;/span>git add 4.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 4.js&amp;#34;
&lt;span class="ln">5&lt;/span>git add 5.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 5.js&amp;#34;
&lt;span class="ln">6&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到当前的 commit 历史如下：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-16293fb7352ea2b7ccd8f7aef878cdfa_720w.jpg" alt="img">&lt;/p>
&lt;p>此时执行--mixed 操作，尝试回退两个版本：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 等价于 git reset HEAD~2
&lt;span class="ln">2&lt;/span>git reset --mixed HEAD~2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提交历史此时改变为下图所示：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-e78d82234469aa8a1d1144f7413e5752_720w.jpg" alt="img">&lt;/p>
&lt;p>此时执行 &lt;code>git status&lt;/code> ，命令行输出如下：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-b8db70598e55f34a9d9eacc428b63a51_720w.jpg" alt="img">HEAD、索引被更改，工作目录未被更改&lt;/p>
&lt;p>SourceTree 工具上的直观显示如下：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-d5b53a062a54a4e9599d6097c35c1c46_720w.jpg" alt="img">&lt;/p>
&lt;p>可以看出，该命令加上 --mixed 参数会保留提交的源码改动，只是将索引信息回退到了某一个版本，如果还需要继续提交，再次执行 &lt;code>git add&lt;/code> 和 &lt;code>git commit&lt;/code>&lt;/p>
&lt;p>介绍完&lt;code>git reset&lt;/code>，那么我们来说一下如何用该命令解决提交分支错误的问题:&lt;/p>
&lt;p>&lt;strong>第一种方法&lt;/strong>：&lt;/p>
&lt;p>适用于多个分支一起开发的时候将A分支的改动错误的提交到B的场景：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 将该分支的本不应该提交的commit撤销
&lt;span class="ln"> 2&lt;/span>git reset HEAD^
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span># 按需选择想要回到哪个版本
&lt;span class="ln"> 5&lt;/span># 回到HEAD
&lt;span class="ln"> 6&lt;/span>git reset --soft HEAD
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span># 回到HEAD的前一个版本
&lt;span class="ln"> 9&lt;/span>git reset --soft HEAD^
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span># 回到HEAD的前10个版本
&lt;span class="ln">12&lt;/span>git reset --soft HEAD~5
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 利用id回到指定版本
&lt;span class="ln">15&lt;/span>git reset --soft a06ef2f
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 将撤销的代码暂存起来
&lt;span class="ln">18&lt;/span>git stash
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span># 切换到正确的分支
&lt;span class="ln">21&lt;/span>git checkout feat/xxx
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span># 重新应用缓存
&lt;span class="ln">24&lt;/span>git stash pop
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span># 在正确的分支进行提交操作
&lt;span class="ln">27&lt;/span>git add . &amp;amp;&amp;amp; git commit -m &amp;#34;update xxxx&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第二种方法&lt;/strong>：&lt;/p>
&lt;p>适用于在不小心在 master 分支上提交了代码，而实际想要在 feature 分支上提交代码的场景：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 新检出一个新分支，但是仍在master 分支上，并不会切换到新分支
&lt;span class="ln">2&lt;/span>git branch feat/update
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span># 恢复master本身提交的状态
&lt;span class="ln">5&lt;/span>git reset --hard origin/master
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span># 提交错的代码已经在新检出的分支上面了，可以继续进行开发或者push
&lt;span class="ln">8&lt;/span>git checkout feat/update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第三种方法&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>适用于想要对特定的某一个或几个commit 进行“嫁接”，使其复制一份到正确的 feature 分支的场景；&lt;/li>
&lt;li>在功能性迭代开发中发现一个bug，并提交了一个commit 进行修复，但是发现该bug也存在线上的发布版本上，必须要尽快对线上进行修复，此时可以使用&lt;code>git cherry-pick&lt;/code> 将bug 修复的commit 嫁接到 fix 分支上进行代码修复，并及时发布，解决线上bug。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 先切换到正确的分支
&lt;span class="ln"> 2&lt;/span>git checkout feat/update
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span># 取出提交错误的或bug fix的 commit 引入到feat/update 分支中
&lt;span class="ln"> 5&lt;/span>git cherry-pick a06ef2f
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span># 回到错误的分支
&lt;span class="ln"> 8&lt;/span>git checkout feat/feedback
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span># 将 a06ef2f 的改动从当前分支销毁
&lt;span class="ln">11&lt;/span>git reset --head a06ef2f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面演示的是“嫁接” 一个commit，如果想要嫁接多个 commit 可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 将三个commit 合并过来
&lt;span class="ln">2&lt;/span>git cherry-pick b9dabf9 e2c739d dad9e51
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想加个一个应用范围内的 commit，可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git cherry-pick 422db47..e2c739d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是无论是对单个 commit 进行 &lt;code>git cherry-pick&lt;/code> ，还是批量处理，注意一定要根据时间线，依照 commit 的先后顺序来处理。&lt;/p>
&lt;p>如果你只想把改动转移到目标分支，但是并不想提交，可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># --no-commit 参数会使嫁接过来的改动不会提交，只会放在暂存区
&lt;span class="ln">2&lt;/span>git cherry-pick b9dabf9 --no-commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第四种方法&lt;/strong>：&lt;/p>
&lt;p>适用于当多个文件被缓存时，发现其中一个文件是其他分支的功能性改动，想直接取消该文件的缓存：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 编辑了 1.js 2.js 3.js
&lt;span class="ln"> 2&lt;/span># 缓存所有改动的文件
&lt;span class="ln"> 3&lt;/span>git add .
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span># 发现 3.js 不应该出现在此时提交的功能上，要取消它的缓存
&lt;span class="ln"> 6&lt;/span>git reset 3.js
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span># 此时3.js 被取消了缓存，我们继续提交1.js 2.js
&lt;span class="ln"> 9&lt;/span>git commit -m &amp;#34;Update 1.js 2.js&amp;#34;
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span># 将3.js 暂存起来
&lt;span class="ln">12&lt;/span>git stash
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 切换到提交 3.js 改动的分支
&lt;span class="ln">15&lt;/span>git checkout feat/update
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 重新应用缓存起来的 stash（3.js）
&lt;span class="ln">18&lt;/span># pop 参数会将缓存栈的第一个stash删除，并将对应修改应用到当前分支目录下
&lt;span class="ln">19&lt;/span>git stash pop
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span># 继续提交
&lt;span class="ln">22&lt;/span>git add &amp;amp;&amp;amp; git commit -m &amp;#34;update 3.js&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="场景2commit之后已经-push-到远端">场景2：Commit之后已经 push 到远端&lt;/h4>
&lt;p>场景：假设我们在 feat/feedback 分支上发现最后一次 commit 的功能是feat/update 分支的改动，此时想要取消这次commit（update 2.js）&lt;/p>
&lt;p>下图是feat/feedback 的提交历史：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-cb8ada46e62932fd5f30c8305293711a_720w.jpg" alt="img">&lt;/p>
&lt;p>此时我们需要借助 git revert 命令来撤销我们的操作。&lt;/p>
&lt;p>解决方式：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 撤销最近的一次提交
&lt;span class="ln">2&lt;/span>git revert HEAD --no-edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着我们使用 sourceTree 查看撤销之后的提交历史：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-93b578021734cef32e25d16437966872_720w.jpg" alt="img">&lt;/p>
&lt;p>我们看到想要撤销的 SHA1 为&lt;code> db6bb3&lt;/code> 的 commit（Update 2.js）记录还在，并且多了一个SHA1 为 &lt;code>6e1d7ee&lt;/code> 新的 commit（Revert &amp;quot;Update 2.js&amp;quot;）。因此可以看出，&lt;code>git revert&lt;/code> 是对给定的 commit 提交进行逆过程，该命令会引入一个新的提交来抵消给定提交的影响。 和 &lt;code>git cherry-pick&lt;/code> 一样，revert命令不修改版本库的现存历史记录，相反它只会在记录添加新的提交。&lt;/p>
&lt;p>接下来我们已经解决了错误分支的提交，但是还要把这次提交放到正确的分支上，依然可以使用 &lt;code>git cherry pick&lt;/code> 去操作：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 将revert commit push到远端
&lt;span class="ln">2&lt;/span>git push origin feat/feedback
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span># 切换到正确的分支
&lt;span class="ln">5&lt;/span>git checkout feat/update
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>将目标commit 嫁接到当前分支
&lt;span class="ln">8&lt;/span>git cherry pick db6bb3f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>git revert&lt;/code> 后面可以加不同的参数达到不同的撤销效果，常用的如下：&lt;/p>
&lt;p>&lt;code>--edit&lt;/code> ：该参数为&lt;code>git revert&lt;/code> 的默认参数，它会自动创建提交日志提醒，此时会弹出编辑器会话，可以在里面修改提交消息，然后再提交。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert 6ac5152 --edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-6111f7f582edd5cd26854f839e51fb45_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;code>--no-edit&lt;/code> ：表示不编辑 commit 信息，revert 的 commit 会直接自动变回 'Revert + 想要撤销的commit 的message' 的格式。上面例子中使用的就是这种方式。&lt;/p>
&lt;p>&lt;code>--no-commit&lt;/code>：该命令会使撤销的 commit 里面的改动放到暂存区，不进行提交，用户可以自行再次提交。这种参数并且适用于将多个 commit 结果还原到索引中，集体放置在缓冲区，进行用户自定义的操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert 13b7faf --no-commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-24b1be37b46fc4aa9641019f59450d62_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-4b5de95cae663cb6468c80a285b5e28e_720w.jpg" alt="img">&lt;/p>
&lt;h4 id="场景3改动不仅已经-push-到远端并且已经合到主仓库">场景3：改动不仅已经 push 到远端，并且已经合到主仓库&lt;/h4>
&lt;p>当我们把本不属于该分支的代码或者不需要提交的改动提交到主仓库，并合并到了develop 仓库之后，这是想要撤销合到主仓库的改动，解决方式如下：&lt;/p>
&lt;p>&lt;strong>1. 当以pull request 的方式进行的合并&lt;/strong>&lt;/p>
&lt;p>在团队的 github flow 流程中，若我们把问题分支的 pull request 请求通过并合并到develop 之后，我们可以看到在 open a pull request 页面有如下提示：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-4b5de95cae663cb6468c80a285b5e28e_720w.jpg" alt="img">&lt;/p>
&lt;p>这时我们可以直接点击 【Revert】按钮进行撤回。该撤回操作会提示你需要创建一个 revert pull request，格式默认为： revert-${问题pr号}-${问题分支}&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-0fc06f08ad499c2d4794c1bc461e6c10_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-3801382ef21d74f80876899913643216_720w.jpg" alt="img">&lt;/p>
&lt;p>最后我们将revert 产生的 pull request 合并到 develop 分支。&lt;/p>
&lt;p>因此对于团队协作中，推荐的工作流程是如上图所示在一个新分支中恢复错误的提交。在这里有人会问，为什么不直接在 develop 分支进行 &lt;code>git revert&lt;/code> 操作，岂不是更方便，何必麻麻烦烦的去多建一个分支出来？&lt;/p>
&lt;p>这么做的原因是：在拥有大量开发人员的团队中， develop、master 分支为保护分支，为了安全不允许或建议去直接修改。&lt;/p>
&lt;p>通过这次操作我们可以了解到：revert 分支的操作实际上是合并进develop 分支的逆操作，它会新产生一个新的分支，将 feat/feedback 的改动还原。&lt;/p>
&lt;p>在团队协作流程中，通常我们会使用 Github 的【Merge pull request】 绿色按钮进行合并pull request 的操作，因为这样会更简单直观，建议始终使用该绿色按钮进行操作。&lt;/p>
&lt;p>&lt;strong>2. 当用命令行执行合并时&lt;/strong>&lt;/p>
&lt;p>上面展示了通过界面按钮去操作如何撤销已经合并develop 分支的改动，那么在个人项目中用命令行操作是怎么样的呢？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 添加三个文件
&lt;span class="ln"> 2&lt;/span>echo 1 &amp;gt; 1.html
&lt;span class="ln"> 3&lt;/span>echo 2 &amp;gt; 2.html
&lt;span class="ln"> 4&lt;/span>echo 3 &amp;gt; 3.html
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span># 以为提交的是1.html 2.html，将改动推到了远端分支
&lt;span class="ln"> 7&lt;/span>git add . &amp;amp;&amp;amp; git commit -m &amp;#34;Add 1.html 2.html&amp;#34;
&lt;span class="ln"> 8&lt;/span>git push origin feat/update
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span># 将feat/update的改动创建一个“合并提交”合入develop 分支，生成的 Merge commit 的SHA1 为 f439c6f
&lt;span class="ln">11&lt;/span>git checkout develop
&lt;span class="ln">12&lt;/span>git merge feat/update --no-ff
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 如果存在冲突，先解决冲突，然后继续请求合并
&lt;span class="ln">15&lt;/span>git add . &amp;amp;&amp;amp; git merge --continue
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 将develop 合并的最后结果提交到远端
&lt;span class="ln">18&lt;/span>git push origin develop
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span># 合并之后发现不应该将3.html 不应该放入功能迭代中。需要撤销本次合并
&lt;span class="ln">21&lt;/span># 做任何操作前，先保证本地的develop 代码是最新状态
&lt;span class="ln">22&lt;/span>git pull --rebase origin develop
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span># 从develop分支新建一个 revert 分支
&lt;span class="ln">25&lt;/span>git checkout -b revert-feat/update
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span># 用 -m 参数指定父编号（从1开始），因为它是“合并提交”
&lt;span class="ln">28&lt;/span>git revert -m 1 f439c6f
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span># push revert 的改动
&lt;span class="ln">31&lt;/span>git push origin revert-feat/update
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span># 切换回 develop 分支，将 revert-feat/update 分支进行合并
&lt;span class="ln">34&lt;/span>git checkout develop
&lt;span class="ln">35&lt;/span>git merge revert-feat/update --no-ff
&lt;span class="ln">36&lt;/span>git push origin develop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>图为新建revert 分支：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-8b931ed19dd13ee391cef0acb87d334f_720w.jpg" alt="img">&lt;/p>
&lt;p>图为&lt;code>git revert&lt;/code> 弹出编辑器编辑 revert commit message 过程：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-edc56b72932a310d7249a6b29d7f5d08_720w.jpg" alt="img">&lt;/p>
&lt;p>图为执行完&lt;code>git revert&lt;/code> 之后的 commit 历史记录：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-9319c72557ba7c0889b6c7a599e0cfd9_720w.jpg" alt="img">&lt;/p>
&lt;p>接下来我们想将 3.html 的改动撤销的操作就变成了上面场景 2 的操作流程了。&lt;/p>
&lt;h4 id="场景4revert-错误需要再次补救">场景4：revert 错误，需要再次补救&lt;/h4>
&lt;p>当我们的代码合到主仓库，并且成功发布到生产环境，此时发现线上有集中报错，必须马上将线上代码回滚到最新版本。这是我们需要进行revert 操作。revert 的代码发布到生产之后，发现错误仍旧存在，最后排查到是某个外部服务依赖出现问题，本次revert 的改动无关，并且外部服务已经恢复。此时需要将 revert 的改动再次发布上生产环境。&lt;/p>
&lt;p>我们可以再用一次&lt;code>git revert&lt;/code>，revert 掉我们之前的 revert commit：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert HEAD --no-edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样 revert 撤销的改动又回来了，此时会发现提交历史上又会出现一个新的revert commit。&lt;/p>
&lt;h3 id="12-误删代码">1.2. 误删代码&lt;/h3>
&lt;p>介绍上面提交错误 commit 的时候，我们提到了&lt;code>git reset --hard&lt;/code>。 如果我们真的使用了&lt;code>git reset --hard&lt;/code> 之后，发现某些修改还有必要的，这时候就需要借助时光机 &lt;code>git reflog&lt;/code> “回来未来”了。&lt;/p>
&lt;p>&lt;code>git reflog&lt;/code> 是非常好用的“后悔药”，它几乎可以恢复我们 commit 过的改动，即使这条 commit 记录已经被我们 reset 掉了。&lt;/p>
&lt;p>具体演示如下：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-c6e8559bf331a08fad732be99477e7c3_720w.jpg" alt="img">&lt;/p>
&lt;p>如上图，在当前提交历史中，我们认为最新的两个commit 已经没有用了，想直接reset 到 SHA1 为 &lt;code>c48a245&lt;/code> 这个 commit：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 回到 c48a245 commit
&lt;span class="ln">2&lt;/span>git reset --hard c48a245
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时提交历史变为现在这样：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-92259374ff0071516766da5919472ef1_720w.jpg" alt="img">&lt;/p>
&lt;p>此时可以看到SHA1 为&lt;code>c48a245&lt;/code> 的 commit 时间线之后的改动都已经被撤销了。 这时候我们突然想到：commit 信息为 “Add 1.html 2.html” 的提交里面的改动很重要，需要被找回，但是我们使用 &lt;code>git log&lt;/code> 查看过去提交历史，已经找不到这条被我们 reset 掉的历史记录了。这时候进行如下操作：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reflog
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-d3a2ca9f0d5b4a1bc2f49212988160e3_720w.jpg" alt="img">&lt;/p>
&lt;p>我们如愿以偿的看到了曾经提交过的这个想要找回的commit（commit: Add 1.html 2.html），它的 SHA1 为 &lt;code>cf2e245&lt;/code>。&lt;/p>
&lt;p>接下来怎么做取决于你具体想要达到什么目的：&lt;/p>
&lt;ul>
&lt;li>想要回到&lt;code>cf2e245&lt;/code> 这个特定的commit：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --hard cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要暂存 &lt;code>cf2e245&lt;/code> 中的改动，并且不想马上提交：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --soft cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要把&lt;code>cf2e245&lt;/code> 嫁接到某个分支目录下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git checkout feat/xxx
&lt;span class="ln">2&lt;/span>git cherry-pick cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要找回 &lt;code>cf2e245&lt;/code> 某个文件的改动，暂存起来：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git checkout cf2e245 1.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-df5d04e1c971f7bf76b6056a70b34028_720w.jpg" alt="img">&lt;/p>
&lt;p>对于 &lt;code>git reflog&lt;/code> 需要注意的是： 它不是万能的。Git 会定期清理那些你已经不再用到的“对象”，如果你想找到几个月以前的提交，可能会指望不上它。&lt;/p>
&lt;h2 id="2-filemode-的变化">2. filemode 的变化&lt;/h2>
&lt;p>执行git diff filename ,出现 old mode 100644 new mode 100755 的提示，如下图：&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdn.net/20180320172628960?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2FpMjAwMGFp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">&lt;/p>
&lt;p>但是发现文件内容并没有发生改变&lt;/p>
&lt;p>产生这个问题的原因就是：filemode的变化，文件chmod后其文件某些位是改变了的，如果严格的比较原文件和chmod后的文件，两者是有区别的，但是源代码通常只关心文本内容，因此chmod产生的变化应该忽略，所以设置一下：&lt;/p>
&lt;p>切到源码的根目录下，&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git config --add core.filemode &lt;span class="nb">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样你的所有的git库都会忽略filemode变更了。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/42929114">Git 误操作救命篇一： 如何将改动撤销&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/ai2000ai/article/details/79628896">git diff old mode 100644 new mode 100755&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 多线程 - 自定义线程池</title><link>https://ahamoment.cn/post/java-multithread-thread-pool/</link><pubDate>Thu, 12 Nov 2020 10:22:13 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-thread-pool/</guid><description>
&lt;h2 id="1-为什么要用线程池">1. 为什么要用线程池？&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>线程池&lt;/strong>提供了一种限制和管理资源（包括执行一个任务）。 每个&lt;strong>线程池&lt;/strong>还维护一些基本统计信息，例如已完成任务的数量。&lt;/p>
&lt;p>这里借用《Java 并发编程的艺术》提到的来说一下&lt;strong>使用线程池的好处&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>降低资源消耗&lt;/strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/li>
&lt;li>&lt;strong>提高响应速度&lt;/strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。&lt;/li>
&lt;li>&lt;strong>提高线程的可管理性&lt;/strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。&lt;/li>
&lt;/ul>
&lt;h2 id="2-自定义一个简单的线程池">2. 自定义一个简单的线程池&lt;/h2>
&lt;p>一个线程池应该具备以下要素：&lt;/p>
&lt;ul>
&lt;li>任务队列：用于缓存提交的任务。&lt;/li>
&lt;li>任务线程管理功能：一个线程池必须能够很好地管理和控制线程数量，可通过如下三个参数来实现，比如创建线程池时初始的线程数量init；线程池自动扩充时最大的线程数量max；在线程池空闲时需要释放线程但是也要维护一定数量的活跃数量或者核心数量core。有了这三个参数，就能够很好地控制线程池中的线程数量，将其维护在一个合理的范围之内，三者之间的关系是init＜=core＜=max。&lt;/li>
&lt;li>任务拒绝策略：如果线程数量已达到上限且任务队列已满，则需要有相应的拒绝策略来通知任务提交者。&lt;/li>
&lt;li>线程工厂：主要用于个性化定制线程，比如将线程设置为守护线程以及设置线程名称等。&lt;/li>
&lt;li>QueueSize：任务队列主要存放提交的Runnable，但是为了防止内存溢出，需要有limit数量对其进行控制。&lt;/li>
&lt;li>Keepedalive时间：该时间主要决定线程各个重要参数自动维护的时间间隔。&lt;/li>
&lt;/ul>
&lt;h3 id="21-线程池实现类图">2.1 线程池实现类图&lt;/h3>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/threadpool.png" alt="">&lt;/p>
&lt;p>上图为线程池实现类图，下面看具体的代码。&lt;/p>
&lt;h3 id="22-threadpool">2.2 ThreadPool&lt;/h3>
&lt;p>先定义一个线程池接口，定义常用的方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ThreadPool&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//提交任务到线程池
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 关闭线程池
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 获取线程池的初始化大小
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getInitSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// 获取线程池的最大线程数
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getMaxSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">// 获取线程池的核心线程数
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getCoreSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1">// 获取线程池中用于缓存任务队列的大小
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getQueueSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">// 获取线程池中活跃线程的数量
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getActiveCount&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 查看线程池是否已经被shutdown
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isShutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-runnablequeue">2.3 RunnableQueue&lt;/h3>
&lt;p>我们需要一个任务队列，用来存放提交的任务，该队列是一个BlockedQueue，并且有limit的限制。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RunnableQueue&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 当有新任务进来时首先会offer到队列中
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 工作线程通过take方法获取Runnable
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="nf">take&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 获取任务队列中任务的数量
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="24-threadfactory">2.4 ThreadFactory&lt;/h3>
&lt;p>ThreadFactory提供了创建线程的接口，以便于个性化地定制Thread，比如Thread应该被加到哪个Group中，优先级、线程名字以及是否为守护线程等。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@FunctionalInterface&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ThreadFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="nf">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="25-拒绝策略denypolicy">2.5 拒绝策略（DenyPolicy）&lt;/h3>
&lt;p>DenyPolicy主要用于当Queue中的runnable达到了limit上限时，决定采用何种策略通知提交者。该接口中定义了三种默认的实现。&lt;/p>
&lt;ol>
&lt;li>DiscardDenyPolicy：直接将任务丢弃。&lt;/li>
&lt;li>AbortDenyPolicy：向任务提交者抛出异常。&lt;/li>
&lt;li>RunnerDenyPolicy：使用提交者所在的线程执行任务。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cm"> * 该拒绝策略会直接将任务丢弃
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DiscardDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">//do nothing
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;task will be discard&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="cm"> * 该拒绝策略会向任务提交者抛出异常
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbortDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RunnableDenyException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The Runnable &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">runnable&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; will be abort.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="cm"> * 该拒绝策略会使任务在提交者所在的线程中执行任务
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RunnerDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里还定义了一个 RunnableDenyException ，主要用于通知任务提交者，任务队列已经无法再接收新的任务。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RunnableDenyException&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RunnableDenyException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="26-internaltask">2.6 InternalTask&lt;/h3>
&lt;p>InternalTask是Runnable的一个实现，是实际任务存储的数据结构。主要用于线程池内部，该类会使用到RunnableQueue，然后不断地从queue中取出某个runnable，并运行runnable的run方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InternalTask&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">InternalTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">// 如果当前任务为running并且没有被中断，则其将不断地从queue中获取runnable，然后执行run方法
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这是提交到线程池的任务最终运行的地方
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">take&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1">// 停止当前任务，主要会在线程池的shutdown方法中使用
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码还对该类增加了一个开关方法stop，主要用于停止当前线程，一般在线程池销毁和线程数量维护的时候会使用到。&lt;/p>
&lt;h3 id="27-线程池详细实现">2.7 线程池详细实现&lt;/h3>
&lt;p>在LinkedRunnableQueue中有几个重要的属性，第一个是limit，也就是Runnable队列的上限；当提交的Runnable数量达到limit上限时，则会调用DenyPolicy的reject方法；runnableList是一个双向循环列表，用于存放Runnable任务&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LinkedRunnableQueue&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RunnableQueue&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 任务队列的最大容量，在构造时传入
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 若任务队列已满，则执行拒绝策略
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 存放任务的队列
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">runnableList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LinkedRunnableQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">limit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">denyPolicy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 无法容纳新的任务，执行拒绝策略
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="c1">// 将任务加入队尾，并且唤醒阻塞中的线程
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addLast&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notifyAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="cm"> * take方法也是同步方法，线程不断从队列中获取Runnable任务，当队列为空的时候工作线程会陷入阻塞，
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="cm"> * 有可能在阻塞的过程中被中断，为了传递中断信号需要在catch语句块中将异常抛出以通知上游（InternalTask）
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="cm"> * @return 任务
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="cm"> * @throws InterruptedException 中断异常，通知上游(InternalTask)
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="nf">take&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="c1">// 如果任务队列中没有可执行任务，则当前线程挂起，进入runnableList关联的monitor waitset中等待唤醒
&lt;/span>&lt;span class="ln">46&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">wait&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="c1">// 被中断时需要将异常抛出
&lt;/span>&lt;span class="ln">49&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="c1">// 从任务队列头排除一个任务
&lt;/span>&lt;span class="ln">53&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeFirst&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">56&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">61&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">62&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面的讲解，线程池需要有数量控制属性、创建线程工厂、任务队列策略等功能，线程池初始化代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BasicThreadPool&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ThreadPool&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 初始化线程数量
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 线程池最大数量
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 线程池核心线程数量
&lt;/span>&lt;span class="ln"> 10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 11&lt;/span>
&lt;span class="ln"> 12&lt;/span> &lt;span class="c1">// 当前活跃的线程数量
&lt;/span>&lt;span class="ln"> 13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">activeCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 14&lt;/span>
&lt;span class="ln"> 15&lt;/span> &lt;span class="c1">// 创建线程所需的工厂
&lt;/span>&lt;span class="ln"> 16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 17&lt;/span>
&lt;span class="ln"> 18&lt;/span> &lt;span class="c1">// 任务队列
&lt;/span>&lt;span class="ln"> 19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 20&lt;/span>
&lt;span class="ln"> 21&lt;/span> &lt;span class="c1">// 线程池是否已经被shutdown
&lt;/span>&lt;span class="ln"> 22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 23&lt;/span>
&lt;span class="ln"> 24&lt;/span> &lt;span class="c1">// 工作线程队列
&lt;/span>&lt;span class="ln"> 25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ThreadTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threadQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayDeque&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 26&lt;/span>
&lt;span class="ln"> 27&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">DEFAULT_DENY_POLICY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DenyPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DiscardDenyPolicy&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 28&lt;/span>
&lt;span class="ln"> 29&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">DEFAULT_THREAD_FACTORY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultThreadFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 30&lt;/span>
&lt;span class="ln"> 31&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 32&lt;/span>
&lt;span class="ln"> 33&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 34&lt;/span>
&lt;span class="ln"> 35&lt;/span> &lt;span class="c1">// 构造时需要传递的参数：初始的线程数量，最大的线程数量，核心线程数量，任务队列的最大数量
&lt;/span>&lt;span class="ln"> 36&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 37&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DEFAULT_THREAD_FACTORY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DEFAULT_DENY_POLICY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">,&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 38&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 39&lt;/span>
&lt;span class="ln"> 40&lt;/span> &lt;span class="c1">// 构造线程池时需要传入的参数，该构造函数需要的参数比较多
&lt;/span>&lt;span class="ln"> 41&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 42&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 43&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">maxSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 44&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">coreSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 45&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 46&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedRunnableQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 47&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keepAliveTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 48&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 49&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 50&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 51&lt;/span>
&lt;span class="ln"> 52&lt;/span> &lt;span class="c1">// 初始化时，先创建 initSize 个线程
&lt;/span>&lt;span class="ln"> 53&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 54&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 55&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 56&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 57&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 58&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 59&lt;/span>
&lt;span class="ln"> 60&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">newThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 61&lt;/span> &lt;span class="c1">//创建任务线程，并且启动
&lt;/span>&lt;span class="ln"> 62&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternalTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 63&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">internalTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 64&lt;/span> &lt;span class="n">ThreadTask&lt;/span> &lt;span class="n">threadTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 65&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threadTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 66&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="ln"> 67&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 68&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 69&lt;/span>
&lt;span class="ln"> 70&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 71&lt;/span> &lt;span class="c1">// 从线程池中移除某个线程
&lt;/span>&lt;span class="ln"> 72&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ThreadTask&lt;/span> &lt;span class="n">threadTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 73&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 74&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;span class="ln"> 75&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 76&lt;/span>
&lt;span class="ln"> 77&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 78&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 79&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 80&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 81&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 82&lt;/span> &lt;span class="c1">// 提交任务只是简单地往任务队列中插入Runnable
&lt;/span>&lt;span class="ln"> 83&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 84&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 85&lt;/span>
&lt;span class="ln"> 86&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 87&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 88&lt;/span> &lt;span class="c1">// run 方法继承自Thread，主要用于维护线程数量，比如扩容、回收工作
&lt;/span>&lt;span class="ln"> 89&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isShutdown&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isInterrupted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 90&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 91&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 92&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 93&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 94&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 95&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 96&lt;/span>
&lt;span class="ln"> 97&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 98&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 99&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">100&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">101&lt;/span> &lt;span class="c1">//当前队列中有尚未处理，并且activeCount&amp;lt;coreSize则继续扩容
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">103&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">104&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">105&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">106&lt;/span> &lt;span class="c1">// continue 的目的在于不想让线程的扩容直接达到maxsize
&lt;/span>&lt;span class="ln">107&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">108&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">109&lt;/span> &lt;span class="c1">// 当前队列中有任务尚未处理，并且activeCount&amp;lt;maxSize则继续扩容
&lt;/span>&lt;span class="ln">110&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">111&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">112&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">113&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">114&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">115&lt;/span>
&lt;span class="ln">116&lt;/span> &lt;span class="c1">// 如果任务队列中没有任务，则需要回收，回收至coreSize即可
&lt;/span>&lt;span class="ln">117&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">118&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">activeCount&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">119&lt;/span> &lt;span class="n">removeThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">120&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">121&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">122&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">123&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">124&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">125&lt;/span>
&lt;span class="ln">126&lt;/span> &lt;span class="c1">//ThreadTask 只是InternalTask和Thread的一个组合
&lt;/span>&lt;span class="ln">127&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadTask&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">128&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">129&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">130&lt;/span>
&lt;span class="ln">131&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">ThreadTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">132&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">133&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">134&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">135&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">136&lt;/span>
&lt;span class="ln">137&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">138&lt;/span>&lt;span class="cm"> * 销毁线程池主要为了是停止BasicThreadPool线程，停止线程池中的活动线程并且将isShutdown开关变量更改为true。
&lt;/span>&lt;span class="ln">139&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">140&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">141&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shutdown&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">142&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">143&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">144&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">145&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">146&lt;/span>
&lt;span class="ln">147&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">148&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threadTask&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">149&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">150&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">151&lt;/span> &lt;span class="o">});&lt;/span>
&lt;span class="ln">152&lt;/span>
&lt;span class="ln">153&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">154&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">155&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">156&lt;/span>
&lt;span class="ln">157&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">158&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getInitSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">159&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">160&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">161&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">162&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">163&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">164&lt;/span>
&lt;span class="ln">165&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">166&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getMaxSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">167&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">168&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">169&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">170&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">171&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">172&lt;/span>
&lt;span class="ln">173&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">174&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getCoreSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">175&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">176&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">177&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">178&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">179&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">180&lt;/span>
&lt;span class="ln">181&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">182&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getQueueSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">183&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">184&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">185&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">186&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">187&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">188&lt;/span>
&lt;span class="ln">189&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">190&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getActiveCount&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">191&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">192&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">193&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">194&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">195&lt;/span>
&lt;span class="ln">196&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">197&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isShutdown&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">198&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">199&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">200&lt;/span>
&lt;span class="ln">201&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultThreadFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">202&lt;/span>
&lt;span class="ln">203&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicInteger&lt;/span> &lt;span class="n">GROUP_COUNTER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicInteger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">204&lt;/span>
&lt;span class="ln">205&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadGroup&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadGroup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;MyThreadPool-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">GROUP_COUNTER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAndIncrement&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">206&lt;/span>
&lt;span class="ln">207&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicInteger&lt;/span> &lt;span class="n">COUNTER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicInteger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">208&lt;/span>
&lt;span class="ln">209&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">210&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="nf">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">211&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;thread-pool-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">COUNTER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAndIncrement&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">212&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">213&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">214&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">215&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>自动维护线程的代码块是同步代码块，主要是为了阻止在线程维护过程中线程池销毁引起的数据不一致问题。&lt;/p>
&lt;p>任务队列中若存在积压任务，并且当前活动线程少于核心线程数，则新建 &lt;code>coreSize-initSize&lt;/code>数量的线程，并且将其加入到活动线程队列中，为了防止马上进行&lt;code>maxSize-coreSize&lt;/code>数量的扩充，建议使用&lt;code>continue&lt;/code>终止本次循环。&lt;/p>
&lt;p>任务队列中有积压任务，并且当前活动线程少于最大线程数，则新建&lt;code>maxSize-coreSize&lt;/code>数量的线程，并且将其加入到活动队列中。&lt;/p>
&lt;p>当前线程池不够繁忙时，则需要回收部分线程，回收到&lt;code>coreSize&lt;/code>数量即可，回收时调用&lt;code>removeThread()&lt;/code>方法，在该方法中需要考虑的一点是，如果被回收的线程恰巧从&lt;code>Runnable&lt;/code>任务取出了某个任务，则会继续保持该线程的运行，直到完成了任务的运行为止，详见&lt;code>InternalTask&lt;/code>的run方法。&lt;/p>
&lt;h2 id="3-线程池的应用">3. 线程池的应用&lt;/h2>
&lt;p>写一个简单的程序分别测试线程池的任务提交、线程池线程数量的动态扩展，以及线程池的销毁功能。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadPoolTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">//定义线程池，初始化线程数为2，核心线程数为4，最大线程数位6，任务队列最多允许1000个任务
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 定义20个任务并且提交给线程池
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(()-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; is running and done.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">});&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(;&lt;/span> &lt;span class="o">;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//不断输出线程池的信息
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getActiveCount: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getActiveCount&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getQueueSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQueueSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getCoreSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCoreSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getMaxSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMaxSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;================================================&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述测试代码中，定义了一个Basic线程池，其中初始化线程数量为2，核心线程数量为4，最大线程数量为6，最大任务队列数量为1000，同时提交了20个任务到线程池中，然后在main线程中不断地输出线程池中的线程数量信息监控变化，运行上述代码，截取的部分输出信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">18&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">18&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">14&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">8&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">8&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">44&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">51&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">52&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">53&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">54&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">55&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">56&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">57&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">58&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">59&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">60&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">61&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">62&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">63&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">64&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">65&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">66&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">67&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">68&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">69&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">70&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">71&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">5&lt;/span>
&lt;span class="ln">72&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">73&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">74&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">75&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">76&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">5&lt;/span>
&lt;span class="ln">77&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">78&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">79&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">80&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">81&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">82&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">83&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">84&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">85&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过上述输出信息可以看出，线程池中线程的动态扩展状况以及任务执行情况，在输出的最后会发现active count停留在了core size的位置，这也符合我们的设计，最后为了确定线程池中的活跃线程数量&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-参考">4. 参考&lt;/h2>
&lt;blockquote>
&lt;p>【1】&lt;a href="https://book.douban.com/subject/30255689/">《Java 高并发编程详解》-汪文君&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 多线程 - 线程生命周期</title><link>https://ahamoment.cn/post/java-multithread-thread-lifecycle/</link><pubDate>Wed, 11 Nov 2020 18:23:31 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-thread-lifecycle/</guid><description>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/thread-lifecycle.png" alt="">&lt;/p>
&lt;p>线程的生命周期大体可以分为如下6个主要的阶段：&lt;/p>
&lt;ul>
&lt;li>NEW&lt;/li>
&lt;li>RUNNABLE&lt;/li>
&lt;li>WAITING&lt;/li>
&lt;li>TIMED_WAITING&lt;/li>
&lt;li>BLOCKED&lt;/li>
&lt;li>TERMINATED&lt;/li>
&lt;/ul>
&lt;p>从 JDK 的源代码中也能看到关于线程状态的描述：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// Thread.State
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">enum&lt;/span> &lt;span class="n">State&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cm"> * Thread state for a thread which has not yet started.
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">NEW&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="cm"> * Thread state for a runnable thread. A thread in the runnable
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="cm"> * state is executing in the Java virtual machine but it may
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="cm"> * be waiting for other resources from the operating system
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="cm"> * such as processor.
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">RUNNABLE&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="cm"> * Thread state for a thread blocked waiting for a monitor lock.
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="cm"> * A thread in the blocked state is waiting for a monitor lock
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="cm"> * to enter a synchronized block/method or
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="cm"> * reenter a synchronized block/method after calling
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="cm"> * {@link Object#wait() Object.wait}.
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">BLOCKED&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="cm"> * Thread state for a waiting thread.
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="cm"> * A thread is in the waiting state due to calling one of the
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="cm"> * following methods:
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="cm"> * &amp;lt;ul&amp;gt;
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link Object#wait() Object.wait} with no timeout&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link #join() Thread.join} with no timeout&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link LockSupport#park() LockSupport.park}&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="cm"> * &amp;lt;/ul&amp;gt;
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="cm"> * &amp;lt;p&amp;gt;A thread in the waiting state is waiting for another thread to
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="cm"> * perform a particular action.
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="cm"> *
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="cm"> * For example, a thread that has called &amp;lt;tt&amp;gt;Object.wait()&amp;lt;/tt&amp;gt;
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="cm"> * on an object is waiting for another thread to call
&lt;/span>&lt;span class="ln">40&lt;/span>&lt;span class="cm"> * &amp;lt;tt&amp;gt;Object.notify()&amp;lt;/tt&amp;gt; or &amp;lt;tt&amp;gt;Object.notifyAll()&amp;lt;/tt&amp;gt; on
&lt;/span>&lt;span class="ln">41&lt;/span>&lt;span class="cm"> * that object. A thread that has called &amp;lt;tt&amp;gt;Thread.join()&amp;lt;/tt&amp;gt;
&lt;/span>&lt;span class="ln">42&lt;/span>&lt;span class="cm"> * is waiting for a specified thread to terminate.
&lt;/span>&lt;span class="ln">43&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="n">WAITING&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">47&lt;/span>&lt;span class="cm"> * Thread state for a waiting thread with a specified waiting time.
&lt;/span>&lt;span class="ln">48&lt;/span>&lt;span class="cm"> * A thread is in the timed waiting state due to calling one of
&lt;/span>&lt;span class="ln">49&lt;/span>&lt;span class="cm"> * the following methods with a specified positive waiting time:
&lt;/span>&lt;span class="ln">50&lt;/span>&lt;span class="cm"> * &amp;lt;ul&amp;gt;
&lt;/span>&lt;span class="ln">51&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link #sleep Thread.sleep}&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">52&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link Object#wait(long) Object.wait} with timeout&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">53&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link #join(long) Thread.join} with timeout&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">54&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link LockSupport#parkNanos LockSupport.parkNanos}&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">55&lt;/span>&lt;span class="cm"> * &amp;lt;li&amp;gt;{@link LockSupport#parkUntil LockSupport.parkUntil}&amp;lt;/li&amp;gt;
&lt;/span>&lt;span class="ln">56&lt;/span>&lt;span class="cm"> * &amp;lt;/ul&amp;gt;
&lt;/span>&lt;span class="ln">57&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="n">TIMED_WAITING&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">59&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">61&lt;/span>&lt;span class="cm"> * Thread state for a terminated thread.
&lt;/span>&lt;span class="ln">62&lt;/span>&lt;span class="cm"> * The thread has completed execution.
&lt;/span>&lt;span class="ln">63&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">64&lt;/span> &lt;span class="n">TERMINATED&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">65&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="线程的new状态">线程的NEW状态&lt;/h2>
&lt;p>当我们用关键字new创建一个Thread对象时，此时它并不处于执行状态，因为没有调用start方法启动该线程，那么线程的状态为NEW状态，准确地说，它只是Thread对象的状态，因为在没有start之前，该线程根本不存在，与你用关键字new创建一个普通的Java对象没什么区别。&lt;/p>
&lt;p>NEW状态通过start方法进入RUNNABLE状态。&lt;/p>
&lt;h2 id="线程的runnable状态">线程的RUNNABLE状态&lt;/h2>
&lt;p>操作系统隐藏 Java 虚拟机（JVM）中的 READY 和 RUNNING 状态，它只能看到 RUNNABLE 状态，所以 Java 系统一般将这两个状态统称为 &lt;strong>RUNNABLE（运行中）&lt;/strong> 状态 。&lt;/p>
&lt;p>线程调用 &lt;code>start()&lt;/code> 方法后开始运行，那么此时才是真正地在JVM进程中创建了一个线程，线程一经启动就可以立即得到执行吗？答案是否定的，线程的运行与否和进程一样都要听令于CPU的调度，线程这时候处于 &lt;strong>READY（可运行）&lt;/strong> 状态，也就是说它具备执行的资格，但是并没有真正地执行起来而是在等待CPU的调度。可运行状态的线程获得了 CPU 时间片（timeslice）后就处于 &lt;strong>RUNNING（运行）&lt;/strong> 状态。&lt;/p>
&lt;p>由于存在&lt;strong>RUNNING&lt;/strong>状态，所以不会直接进入&lt;strong>BLOCKED&lt;/strong>状态和&lt;strong>TERMINATED&lt;/strong>状态，即使是在线程的执行逻辑中调用wait、sleep或者其他block的IO操作等，也必须先获得CPU的调度执行权才可以，严格来讲，RUNNABLE的线程只能意外终止或者进入RUNNING状态。&lt;/p>
&lt;p>在该&lt;strong>RUNNING&lt;/strong>状态中，线程的状态可以发生如下的状态转换。&lt;/p>
&lt;ul>
&lt;li>直接进入TERMINATED状态，比如调用JDK已经不推荐使用的stop方法或者判断某个逻辑标识。&lt;/li>
&lt;li>进入WAITING状态，比如调用了sleep，或者wait方法而加入了waitSet中。&lt;/li>
&lt;li>进行某个阻塞的IO操作，比如因网络数据的读写而进入了BLOCKED状态。&lt;/li>
&lt;li>获取某个锁资源，从而加入到该锁的阻塞队列中而进入了BLOCKED状态。&lt;/li>
&lt;li>由于CPU的调度器轮询使该线程放弃执行，进入READY 状态。&lt;/li>
&lt;li>线程主动调用yield方法，放弃CPU执行权，进入READY状态。&lt;/li>
&lt;/ul>
&lt;h2 id="线程的blocked状态">线程的BLOCKED状态&lt;/h2>
&lt;p>线程在BLOCKED状态中可以切换至如下几个状态。&lt;/p>
&lt;ul>
&lt;li>直接进入TERMINATED状态，比如调用JDK已经不推荐使用的stop方法或者意外死亡（JVM Crash）。&lt;/li>
&lt;li>线程阻塞的操作结束，比如读取了想要的数据字节进入到RUNNABLE状态。&lt;/li>
&lt;li>线程完成了指定时间的休眠，进入到了RUNNABLE状态。&lt;/li>
&lt;li>线程获取到了某个锁资源，进入RUNNABLE状态。&lt;/li>
&lt;li>线程在阻塞过程中被打断，比如其他线程调用了interrupt方法，进入RUNNABLE状态。&lt;/li>
&lt;/ul>
&lt;h2 id="线程的-waiting-状态">线程的 WAITING 状态&lt;/h2>
&lt;p>线程进入&lt;strong>WAITING&lt;/strong>状态，可能是调用了wait/join/park方法使线程进入等待状态，处在&lt;strong>WAITING&lt;/strong> 状态的线程被其他线程调用 notify/notifyAll 唤醒之后，就会重新进入 RUNNABLE 状态。&lt;/p>
&lt;h2 id="线程的-timed_waiting-状态">线程的 TIMED_WAITING 状态&lt;/h2>
&lt;p>TIMED_WAITING 就是超时等待的意思，跟 WAITING 状态不同的是，TIMED_WAITING 会等待指定的超时时间后自动退出。&lt;/p>
&lt;h2 id="线程的terminated状态">线程的TERMINATED状态&lt;/h2>
&lt;p>TERMINATED是一个线程的最终状态，在该状态中线程将不会切换到其他任何状态，线程进入TERMINATED状态，意味着该线程的整个生命周期都结束了，下列这些情况将会使线程进入TERMINATED状态。&lt;/p>
&lt;ul>
&lt;li>线程运行正常结束，结束生命周期。&lt;/li>
&lt;li>线程运行出错意外结束。&lt;/li>
&lt;li>JVM Crash，导致所有的线程都结束。&lt;/li>
&lt;/ul>
&lt;h2 id="参考">参考&lt;/h2>
&lt;blockquote>
&lt;p>【1】&lt;a href="https://book.douban.com/subject/30255689/">《Java 高并发编程详解》-汪文君&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 多线程面试题总结</title><link>https://ahamoment.cn/post/java-multithread-interview-questions/</link><pubDate>Wed, 11 Nov 2020 10:41:32 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-interview-questions/</guid><description>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/Snailclimb/JavaGuide#%E5%B9%B6%E5%8F%91">JavaGuide&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-请简要描述线程与进程的关系区别及优缺点">1. 请简要描述线程与进程的关系，区别及优缺点？&lt;/h2>
&lt;p>&lt;strong>从 JVM 角度说进程和线程之间的关系&lt;/strong>&lt;/p>
&lt;p>一个进程中可以有多个线程，多个线程共享进程的&lt;strong>堆&lt;/strong>和**方法区 (JDK1.8 之后的元空间)*&lt;em>资源，但是每个线程有自己的*&lt;em>程序计数器&lt;/em>&lt;/em>、&lt;strong>虚拟机栈&lt;/strong> 和 &lt;strong>本地方法栈&lt;/strong>。&lt;/p>
&lt;p>&lt;strong>总结：&lt;/strong> &lt;strong>线程是进程划分成的更小的运行单位。线程和进程最大的不同在于基本上各进程是独立的，而各线程则不一定，因为同一进程中的线程极有可能会相互影响。线程执行开销小，但不利于资源的管理和保护；而进程正相反。&lt;/strong>&lt;/p>
&lt;p>下面是该知识点的扩展内容！&lt;/p>
&lt;p>下面来思考这样一个问题：为什么&lt;strong>程序计数器&lt;/strong>、&lt;strong>虚拟机栈&lt;/strong>和&lt;strong>本地方法栈&lt;/strong>是线程私有的呢？为什么堆和方法区是线程共享的呢？&lt;/p>
&lt;h3 id="11-程序计数器为什么是私有的">1.1. 程序计数器为什么是私有的?&lt;/h3>
&lt;p>程序计数器主要有下面两个作用：&lt;/p>
&lt;ol>
&lt;li>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。&lt;/li>
&lt;li>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。&lt;/li>
&lt;/ol>
&lt;p>需要注意的是，如果执行的是 native 方法，那么程序计数器记录的是 undefined 地址，只有执行的是 Java 代码时程序计数器记录的才是下一条指令的地址。&lt;/p>
&lt;p>所以，程序计数器私有主要是为了&lt;strong>线程切换后能恢复到正确的执行位置&lt;/strong>。&lt;/p>
&lt;h3 id="12-虚拟机栈和本地方法栈为什么是私有的">1.2. 虚拟机栈和本地方法栈为什么是私有的?&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>虚拟机栈：&lt;/strong> 每个 Java 方法在执行的同时会创建一个栈帧用于存储局部变量表、操作数栈、常量池引用等信息。从方法调用直至执行完成的过程，就对应着一个栈帧在 Java 虚拟机栈中入栈和出栈的过程。&lt;/li>
&lt;li>&lt;strong>本地方法栈：&lt;/strong> 和虚拟机栈所发挥的作用非常相似，区别是： &lt;strong>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。&lt;/strong> 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。&lt;/li>
&lt;/ul>
&lt;p>所以，为了&lt;strong>保证线程中的局部变量不被别的线程访问到&lt;/strong>，虚拟机栈和本地方法栈是线程私有的。&lt;/p>
&lt;h3 id="13-一句话简单了解堆和方法区">1.3. 一句话简单了解堆和方法区&lt;/h3>
&lt;p>堆和方法区是所有线程共享的资源，其中堆是进程中最大的一块内存，主要用于存放新创建的对象 (几乎所有对象都在这里分配内存)，方法区主要用于存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。&lt;/p>
&lt;h2 id="2-说说并发与并行的区别">2. 说说并发与并行的区别?&lt;/h2>
&lt;ul>
&lt;li>&lt;strong>并发：&lt;/strong> 同一时间段，多个任务都在执行 (单位时间内不一定同时执行)；&lt;/li>
&lt;li>&lt;strong>并行：&lt;/strong> 单位时间内，多个任务同时执行。&lt;/li>
&lt;/ul>
&lt;h2 id="3-说说线程的生命周期">3. 说说线程的生命周期&lt;/h2>
&lt;blockquote>
&lt;p>参考文章：&lt;a href="http://chenxq.xyz/post/java-lifecycle-of-thread/">Java 多线程 - 线程生命周期&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h2 id="4-什么是上下文切换">4. 什么是上下文切换?&lt;/h2>
&lt;p>多线程编程中一般线程的个数都大于 CPU 核心的个数，而一个 CPU 核心在任意时刻只能被一个线程使用，为了让这些线程都能得到有效执行，CPU 采取的策略是为每个线程分配时间片并轮转的形式。当一个线程的时间片用完的时候就会重新处于就绪状态让给其他线程使用，这个过程就属于一次上下文切换。&lt;/p>
&lt;p>概括来说就是：当前任务在执行完 CPU 时间片切换到另一个任务之前会先保存自己的状态，以便下次再切换回这个任务时，可以再加载这个任务的状态。&lt;strong>任务从保存到再加载的过程就是一次上下文切换&lt;/strong>。&lt;/p>
&lt;p>上下文切换通常是计算密集型的。也就是说，它需要相当可观的处理器时间，在每秒几十上百次的切换中，每次切换都需要纳秒量级的时间。所以，上下文切换对系统来说意味着消耗大量的 CPU 时间，事实上，可能是操作系统中时间消耗最大的操作。&lt;/p>
&lt;p>Linux 相比与其他操作系统（包括其他类 Unix 系统）有很多的优点，其中有一项就是，其上下文切换和模式切换的时间消耗非常少。&lt;/p>
&lt;h2 id="5-什么是线程死锁如何避免死锁">5. 什么是线程死锁？如何避免死锁？&lt;/h2>
&lt;blockquote>
&lt;p>参考文章：https://chenxq.xyz/post/java-multithread-dead-lock/&lt;/p>
&lt;/blockquote>
&lt;h2 id="6-说说-sleep-方法和-wait-方法区别和共同点">6. 说说 sleep() 方法和 wait() 方法区别和共同点?&lt;/h2>
&lt;p>&lt;strong>共同点&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>wait 和 sleep 方法都可以使线程进入阻塞状态&lt;/li>
&lt;li>wait 和 sleep 方法均是可中断方法，被中断后都会收到中断异常。&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>区别：&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>wait是Object的方法，而sleep是Thread特有的方法。&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>&lt;strong>sleep 方法没有释放锁，而 wait 方法释放了锁&lt;/strong> 。&lt;/li>
&lt;li>wait方法的执行必须在同步方法中进行，而sleep则不需要。&lt;/li>
&lt;li>sleep方法短暂休眠之后会主动退出阻塞，而wait方法（没有指定wait时间）则需要被其他线程中断后才能退出阻塞。&lt;/li>
&lt;/ul>
&lt;h2 id="7-为什么我们调用-start-方法时会执行-run-方法为什么我们不能直接调用-run-方法">7. 为什么我们调用 start() 方法时会执行 run() 方法，为什么我们不能直接调用 run() 方法？&lt;/h2>
&lt;p>这是另一个非常经典的 java 多线程面试问题，而且在面试中会经常被问到。很简单，但是很多人都会答不上来！&lt;/p>
&lt;p>new 一个 Thread，线程进入了新建状态;调用 start() 方法，会启动一个线程并使线程进入了就绪状态，当分配到时间片后就可以开始运行了。 start() 会执行线程的相应准备工作，然后自动执行 run() 方法的内容，这是真正的多线程工作。 而直接执行 run() 方法，会把 run 方法当成一个 main 线程下的普通方法去执行，并不会在某个线程中执行它，所以这并不是多线程工作。&lt;/p>
&lt;p>&lt;strong>总结： 调用 start 方法方可启动线程并使线程进入就绪状态，而 run 方法只是 thread 的一个普通方法调用，还是在主线程里执行。&lt;/strong>&lt;/p></description></item><item><title>Java 多线程 - 深入理解synchronized关键字</title><link>https://ahamoment.cn/post/java-multithread-synchronized2/</link><pubDate>Sun, 25 Oct 2020 07:20:03 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-synchronized2/</guid><description>
&lt;p>synchronized关键字提供了一种互斥机制，也就是说在同一时刻，只能有一个线程访问同步资源，很多资料、书籍将synchronized（mutex）称为锁，其实这种说法是不严谨的，准确地讲应该是某线程获取了与mutex关联的monitor锁（当然写程序的时候知道它想要表达的语义即可）。&lt;/p>
&lt;p>使用JDK命令javap对Mutex class进行反汇编，输出了大量的JVM指令，在这些指令中，你将发现monitor enter和monitor exit是成对出现的（有些时候会出现一个monitor enter多个monitor exit，但是每一个monitor exit之前必有对应的monitor enter，这是肯定的）.&lt;/p>
&lt;ul>
&lt;li>Monitorenter
每个对象都与一个monitor相关联，一个monitor的lock的锁只能被一个线程在同一时间获得，在一个线程尝试获得与对象关联monitor的所有权时会发生如下的几件事情。
&lt;ul>
&lt;li>如果monitor的计数器为0，则意味着该monitor的lock还没有被获得，某个线程获得之后将立即对该计数器加一，从此该线程就是这个monitor的所有者了。&lt;/li>
&lt;li>如果一个已经拥有该monitor所有权的线程重入，则会导致monitor计数器再次累加。&lt;/li>
&lt;li>如果monitor已经被其他线程所拥有，则其他线程尝试获取该monitor的所有权时，会被陷入阻塞状态直到monitor计数器变为0，才能再次尝试获取对monitor的所有权。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Monitorexit
释放对monitor的所有权，想要释放对某个对象关联的monitor的所有权的前提是，你曾经获得了所有权。释放monitor所有权的过程比较简单，就是将monitor的计数器减一，如果计数器的结果为0，那就意味着该线程不再拥有对该monitor的所有权，通俗地讲就是解锁。与此同时被该monitor block的线程将再次尝试获得对该monitor的所有权。&lt;/li>
&lt;/ul>
&lt;p>使用synchronized方法需要注意几个问题：&lt;/p>
&lt;ol>
&lt;li>与monitor关联的对象不能为空&lt;/li>
&lt;li>synchronized作用域太大
由于synchronized关键字存在排他性，也就是说所有的线程必须串行地经过synchronized保护的共享区域，如果synchronized作用域越大，则代表着其效率越低，甚至还会丧失并发的优势。&lt;/li>
&lt;li>不同的monitor企图锁相同的方法&lt;/li>
&lt;li>多个锁的交叉导致死锁&lt;/li>
&lt;/ol></description></item><item><title>Java 多线程 - 线程中断 Interrupt</title><link>https://ahamoment.cn/post/java-multithread-interrupt/</link><pubDate>Sat, 24 Oct 2020 07:17:54 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-interrupt/</guid><description>
&lt;p>线程interrupt，是一个非常重要的API，也是经常使用的方法，在本文中我们将Thread深入源码对其进行详细的剖析。&lt;/p>
&lt;p>首先来看一下与线程中断相关的几个API：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">interrupt&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">interrupted&lt;/span>&lt;span class="o">()&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isInterrupted&lt;/span>&lt;span class="o">()&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="interrupt">interrupt&lt;/h2>
&lt;p>如下方法的调用会使得当前线程进入阻塞状态，而调用当前线程的interrupt方法，就可以打断阻塞。&lt;/p>
&lt;ul>
&lt;li>Object的wait方法。&lt;/li>
&lt;li>Object的wait（long）方法。&lt;/li>
&lt;li>Object的wait（long，int）方法。&lt;/li>
&lt;li>Thread的sleep（long）方法。&lt;/li>
&lt;li>Thread的sleep（long，int）方法。&lt;/li>
&lt;li>Thread的join方法。&lt;/li>
&lt;li>Thread的join（long）方法。&lt;/li>
&lt;li>Thread的join（long，int）方法。&lt;/li>
&lt;li>InterruptibleChannel的io操作。&lt;/li>
&lt;li>Selector的wakeup方法。&lt;/li>
&lt;/ul>
&lt;p>上述若干方法都会使得当前线程进入阻塞状态，若另外的一个线程调用被阻塞线程的interrupt方法，则会打断这种阻塞，因此这种方法有时会被称为可中断方法，记住，打断一个线程并不等于该线程的生命周期结束，仅仅是打断了当前线程的阻塞状态。&lt;/p>
&lt;p>一旦线程在阻塞的情况下被打断，都会抛出一个称为&lt;code>InterruptedException&lt;/code>的异常，这个异常就像一个signal（信号）一样通知当前线程被打断了，下面我们来看一个例子：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.concurrent.TimeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadInterrupt&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span>&lt;span class="o">(&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Oh, i am be interrupted.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="o">});&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">//short block and make sure thread is started.
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码创建了一个线程，并且企图休眠1分钟的时长，不过很可惜，大约在2毫秒之后就被主线程调用interrupt方法打断，程序的执行结果就是“Oh，i am be interrupted.”&lt;/p>
&lt;p>interrupt这个方法到底做了什么样的事情呢？在一个线程内部存在着名为&lt;strong>interrupt flag&lt;/strong>的标识，&lt;strong>如果一个线程被interrupt，那么它的flag将被设置，但是如果当前线程正在执行可中断方法被阻塞时，调用interrupt方法将其中断，反而会导致flag被清除&lt;/strong>，关于这点我们在后面还会做详细的介绍。另外有一点需要注意的是，如果一个线程已经是死亡状态，那么尝试对其的interrupt会直接被忽略。&lt;/p>
&lt;h2 id="isinterrupted">isInterrupted&lt;/h2>
&lt;p>isInterrupted是Thread的一个成员方法，它主要判断当前线程是否被中断，该方法仅仅是对interrupt标识的一个判断，并不会影响标识发生任何改变，这个与我们即将学习到的interrupted是存在差别的，下面我们看一个简单的程序：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadisInterrupted&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">//do nothing, just empty loop.
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Thread is interrupted ? ％s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Thread is interrupted ? ％s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的代码中定义了一个线程，并且在线程的执行单元中（run方法）写了一个空的死循环，为什么不写sleep呢？因为sleep是可中断方法，会捕获到中断信号，从而干扰我们程序的结果。下面是程序运行的结果，记得手动结束上面的程序运行，或者你也可以将上面定义的线程指定为守护线程，这样就会随着主线程的结束导致JVM中没有非守护线程而自动退出。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">interrupted&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="kc">false&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">interrupted&lt;/span> &lt;span class="o">?&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>可中断方法捕获到了中断信号（signal）之后，也就是捕获了InterruptedException异常之后会擦除掉interrupt的标识&lt;/strong>，对上面的程序稍作修改，你会发现程序的结果又会出现很大的不同，示例代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadisInterrupted&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">//ignore the exception
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//here the interrupt flag will be clear.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//由于可中断方法的异常被捕获后，会擦除掉interrup标记，所以调用
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//isInterrupted返回false
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;I am be interrupted ? ％s&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Thread is interrupted ? ％s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printf&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Thread is interrupted ? ％s\n&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于在run方法中使用了sleep这个可中断方法，它会捕获到中断信号，并且会擦除interrupt标识，因此程序的执行结果都会是false，程序输出如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>Thread is interrupted ? false
&lt;span class="ln">2&lt;/span>I am be interrupted ? false
&lt;span class="ln">3&lt;/span>Thread is interrupted ? false
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其实这也不难理解，可中断方法捕获到了中断信号之后，为了不影响线程中其他方法的执行，将线程的interrupt标识复位是一种很合理的设计。&lt;/p>
&lt;h2 id="interrupted">interrupted&lt;/h2>
&lt;p>interrupted是一个静态方法，虽然其也用于判断当前线程是否被中断，但是它和成员方法isInterrupted还是有很大的区别的，&lt;strong>调用该方法会直接擦除掉线程的interrupt标识&lt;/strong>，需要注意的是，&lt;strong>如果当前线程被打断了，那么第一次调用interrupted方法会返回true，并且立即擦除了interrupt标识；第二次包括以后的调用永远都会返回false，除非在此期间线程又一次地被打断&lt;/strong>，下面设计了一个简单的例子，来验证我们的说法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadisInterrupted&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">};&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDaemon&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//shortly block make sure the thread is started.
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MILLISECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>同样由于不想要受到可中断方法如sleep的影响，在Thread的run方法中没有进行任何短暂的休眠，所以运行上面的程序会出现非常多的输出，但是我们通过对输出的检查会发现如下所示的内容，其足以作为对该方法的解释。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>……
&lt;span class="ln">2&lt;/span>false
&lt;span class="ln">3&lt;/span>false
&lt;span class="ln">4&lt;/span>true
&lt;span class="ln">5&lt;/span>false
&lt;span class="ln">6&lt;/span>false
&lt;span class="ln">7&lt;/span>……
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在很多的false包围中发现了一个true，也就是interrupted方法判断到了其被中断，立即擦除了中断标识，并且只有这一次返回true，后面的都将会是false。&lt;/p>
&lt;h2 id="interrupt-注意事项">interrupt 注意事项&lt;/h2>
&lt;p>打开Thread的源码，不难发现，isInterrupted方法和interrupted方法都调用了同一个本地方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">native&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isInterrupted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">boolean&lt;/span> &lt;span class="n">ClearInterrupted&lt;/span>&lt;span class="o">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中参数ClearInterrupted主要用来控制是否擦除线程interrupt的标识。&lt;code>isInterrupted&lt;/code>方法的源码中该参数为false，表示不想擦除：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isInterrupted&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">isInterrupted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而interrupted静态方法中该参数则为true，表示想要擦除：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">interrupted&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在比较详细地学习了interrupt方法之后，大家思考一个问题，如果一个线程在没有执行可中断方法之前就被打断，那么其接下来将执行可中断方法，比如sleep会发生什么样的情况呢？下面我们通过一个简单的实验来回答这个疑问：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadisInterrupted&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//① 判断当前线程是否被中断
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// flag=false,清除线程中断标志
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Main thread is interrupted? &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">//②中断当前线程
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// flag=true
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">//③判断当前线程是否已经被中断
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这里不能再调用Thread.interrupted()，因为会将flag清除，达不到实验效果
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Main thread is interrupted? &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">//④ 当前线程执行可中断方法
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MINUTES&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">//⑤捕获中断信号
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;I will be interrupted still.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过运行上面的程序，你会发现，如果一个线程设置了interrupt标识，那么接下来的可中断方法会立即中断，因此注释⑤的信号捕获部分代码会被执行.&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>【1】&lt;a href="https://book.douban.com/subject/30255689/">《Java 高并发编程详解》-汪文君&lt;/a>&lt;/p></description></item><item><title>JVM 内存结构</title><link>https://ahamoment.cn/post/java-jvm-jmm/</link><pubDate>Thu, 15 Oct 2020 19:55:31 +0800</pubDate><guid>https://ahamoment.cn/post/java-jvm-jmm/</guid><description>
&lt;blockquote>
&lt;p>&lt;a href="http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf">http://www.oracle.com/technetwork/java/javase/memorymanagement-whitepaper-150215.pdf&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>JVM在执行Java程序的时候会把对应的物理内存划分成不同的内存区域，每一个区域都存放着不同的数据，也有不同的创建与销毁时机，有些分区会在JVM启动的时候就创建，有些则是在运行时才创建，比如虚拟机栈，根据虚拟机规范，JVM的内存结构如图所示。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015200212590.png" alt="image-20201015200212590">&lt;/p>
&lt;h2 id="程序计数器">程序计数器&lt;/h2>
&lt;p>无论任何语言，其实最终都是需要由操作系统通过控制总线向CPU发送机器指令，Java也不例外，程序计数器在JVM中所起的作用就是用于存放当前线程接下来将要执行的字节码指令、分支、循环、跳转、异常处理等信息。在任何时候，一个处理器只执行其中一个线程中的指令，为了能够在CPU时间片轮转切换上下文之后顺利回到正确的执行位置，每条线程都需要具有一个独立的程序计数器，各个线程之间互相不影响，因此JVM将此块内存区域设计成了&lt;strong>线程私有&lt;/strong>的。&lt;/p>
&lt;h2 id="java-虚拟机栈">Java 虚拟机栈&lt;/h2>
&lt;p>与程序计数器内存相类似，Java虚拟机栈也是线程私有的，它的生命周期与线程相同，是在JVM运行时所创建的，在线程中，方法在执行的时候都会创建一个名为栈帧（stack frame）的数据结构，主要用于存放&lt;strong>局部变量表、操作栈、动态链接、方法出口&lt;/strong>等信息，如图所示，&lt;strong>方法的调用对应着栈帧在虚拟机栈中的压栈和弹栈过程&lt;/strong>。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015200832748.png" alt="image-20201015200832748">&lt;/p>
&lt;p>每一个线程在创建的时候，JVM都会为其创建对应的虚拟机栈，虚拟机栈的大小可以通过-xss来配置，方法的调用是栈帧被压入和弹出的过程，通过上图可以看出，同等的虚拟机栈如果局部变量表等占用内存越小则可被压入的栈帧就会越多，反之则可被压入的栈帧就会越少，一般将栈帧内存的大小称为宽度，而栈帧的数量则称为虚拟机栈的深度。&lt;/p>
&lt;h2 id="本地方法栈">本地方法栈&lt;/h2>
&lt;p>Java中提供了调用本地方法的接口（Java Native Interface），也就是C/C++程序，在线程的执行过程中，经常会碰到调用JNI方法的情况，比如网络通信、文件操作的底层，甚至是String的intern等都是JNI方法，JVM为本地方法所划分的内存区域便是本地方法栈，这块内存区域其自由度非常高，完全靠不同的JVM厂商来实现，Java虚拟机规范并未给出强制的规定，同样它也是线程私有的内存区域。&lt;/p>
&lt;h2 id="堆内存">堆内存&lt;/h2>
&lt;p>堆内存是JVM中最大的一块内存区域，被所有的线程所共享，Java在运行期间创建的所有对象几乎都存放在该内存区域，该内存区域也是垃圾回收器重点照顾的区域，因此有些时候堆内存被称为“GC堆”。&lt;/p>
&lt;p>堆内存一般会被细分为新生代和老年代，更细致的划分为Eden区、From Survivor区和To Survivor区，如图所示。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015201006211.png" alt="image-20201015201006211">&lt;/p>
&lt;p>堆内存一般会被细分为新生代和老年代，更细致的划分为Eden区、From Survivor区和To Survivor区。&lt;/p>
&lt;h2 id="方法区">方法区&lt;/h2>
&lt;p>方法区也是被多个线程所共享的内存区域，他主要用于存储已经被虚拟机加载的类信息、常量、静态变量、即时编译器（JIT）编译后的代码等数据，虽然在Java虚拟机规范中，将堆内存划分为堆内存的一个逻辑分区，但是它还是经常被称为“非堆”，有时候也被称为“持久代”，主要是站在垃圾回收器的角度进行划分，但是这种叫法比较欠妥，在HotSpot JVM中，方法区还会被细划分为持久代和代码缓存区，代码缓存区主要用于存储编译后的本地代码（和硬件相关）以及JIT（Just In Time）编译器生成的代码，当然不同的JVM会有不同的实现。&lt;/p></description></item><item><title>散列表那些事</title><link>https://ahamoment.cn/post/algorithm-hashtable/</link><pubDate>Thu, 15 Oct 2020 10:04:54 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-hashtable/</guid><description>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>在登录QQ的时候，QQ服务器是如何核对你的身份？面对庞大的用户群，如何快速找到用户信息？&lt;/p>
&lt;p>我们已经知道的几种查找方法包括：顺序查找，二分查找（静态查找），二叉搜索树（动态查找）。在这个场景下，如果使用二分查找的话就会面对插入和删除一个新号码要移动大量数据的问题。&lt;/p>
&lt;p>这里我们要用到散列查找的方法，散列（Hashing）的基本思想是：&lt;/p>
&lt;ol>
&lt;li>以关键字 key 为自变量，通过一个确定的**函数 h （散列函数）**计算出对应的函数值h(key)，作为数据对象的存储地址&lt;/li>
&lt;li>可能不同的关键字会映射到同一个散列地址上，称为**“冲突”**，发生冲突后需要某种冲突解决策略来解决冲突。&lt;/li>
&lt;/ol>
&lt;p>散列查找的时间复杂度为 O(1)，即查找时间与问题规模无关。&lt;/p>
&lt;p>一般情况下，设散列表空间大小为m，填入表中的元素个数是n，则称α=n/m为散列表的”装填因子“(Loading Factor)。实用时，通常将散列表大小设计为 &lt;strong>0.5-0.8&lt;/strong> 为宜。&lt;/p>
&lt;p>散列映射法的关键问题有两个：&lt;/p>
&lt;ol>
&lt;li>如何设计散列函数，使得发生冲突的概率尽可能小；&lt;/li>
&lt;li>当冲突或溢出不可避免的时候，如何处理使得表中没有空单元被浪费，同时插入、删除、查找等操作都正确完成。&lt;/li>
&lt;/ol>
&lt;h2 id="散列函数的构造方法">散列函数的构造方法&lt;/h2>
&lt;p>一个好的散列函数一般考虑下列两个因素：&lt;/p>
&lt;ol>
&lt;li>计算简单，以便提高转换速度&lt;/li>
&lt;li>关键字对应的地址空间分不均匀，以尽量减少冲突。即对于关键字集合中的任何一个关键字，经散列函数映射到地址集合中任何一个地址的概率是基本相等的。实际应用过程中，严格的均匀分布也是不可能的，只是不要过于聚集就行了。&lt;/li>
&lt;/ol>
&lt;p>关键字又分为数字关键字和字符串关键字两种类型，分别有不同的散列函数的构造方法：&lt;/p>
&lt;h3 id="数字关键字的散列函数构造">数字关键字的散列函数构造&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>直接定址法&lt;/p>
&lt;p>取关键字的某个线性函数值为散列地址，即&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key) = a*key + b (a,b 为常数)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>除留余数法&lt;/p>
&lt;p>散列函数为&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=key mod p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设散列表长为 TableSize （TableSize 的选取通常由关键字集合的大小 n 和允许最大的装填因子 α 决定，一般 TableSize=n/α），选择一个正整数 p &amp;lt;= TableSize。一般选取 p 为小于或者等于散列表表长 TableSize 的某个&lt;strong>最大素数&lt;/strong>比较好。用素数求得得余数作为散列地址，比较均匀地分布在整个地址空间上的可能性比较大，具体证明可以参考&lt;a href="https://blog.csdn.net/liuqiyao_01/article/details/14475159">为什么一般hashtable的桶数会取一个素数&lt;/a>。例如，TableSize=8，p=7;TableSize=16, p=13。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数字分析法&lt;/p>
&lt;p>分析数字关键字在各位上的变化情况，取比较随机的位作为散列地址。散列函数可以取为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=atoi(key+7)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>折叠法&lt;/p>
&lt;p>把关键字分割成位数相同的几个部分，然后叠加取部分值。例如：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015112018138.png" alt="image-20201015112018138">&lt;/p>
&lt;p>折叠法是希望每一位对最后的结果都能产生影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方取中法&lt;/p>
&lt;p>如：56793542&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015112123029.png" alt="image-20201015112123029">&lt;/p>
&lt;p>平方取中法和折叠法的目的都是一样的，为了让关键字的每一位都对最后的结果产生影响。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="字符关键字的散列函数构造">字符关键字的散列函数构造&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>一个简单的散列函数：ASCII 码加和法。对字符型关键字key定义散列函数如下：&lt;/p>
&lt;p>$\sum key[i]$ mod TableSize&lt;/p>
&lt;p>这种方法会有严重的冲突&lt;/p>
&lt;/li>
&lt;li>
&lt;p>简单的改进 - 前3个字符移位法&lt;/p>
&lt;p>$h(key)=(key[0]*27^2+key[1]*27+key[2])$ mod TableSize&lt;/p>
&lt;p>这个方法会造成空间的浪费&lt;/p>
&lt;/li>
&lt;li>
&lt;p>好的散列函数：移位法&lt;/p>
&lt;p>涉及关键字所有n个字符，并且分布的很好：&lt;/p>
&lt;p>$h(key)=(\displaystyle \sum^{n-1}_{i=0}{key[n-i-1]*32^i})$ mod TableSize&lt;/p>
&lt;p>该函数用于处理长度位 n 的字符串关键字，每个字符占5位(即 $2^5=32$)，具体实现时并不需要做乘法运算，而是通过一次左移 5 位来完成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tableSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//散列函数值，初始化为0
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keyArrays&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">keyArrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keyArrays&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">keyArrays&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">tableSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="冲突处理方法">冲突处理方法&lt;/h2>
&lt;p>常用处理冲突的思路：&lt;/p>
&lt;ul>
&lt;li>换个位置：开放地址法&lt;/li>
&lt;li>同一位置的冲突对象组织在一起：链地址法&lt;/li>
&lt;/ul>
&lt;h3 id="开放定址法">开放定址法&lt;/h3>
&lt;p>一旦产生了冲突（该地址已有其他元素），就按某种规则去寻找另一空地址。假设发生了第 i 次冲突，试探的下一个地址将增加 $d_i$ , 基本公式是：&lt;/p>
&lt;p>$d_i(key)=(h(key)+d_i)$ mod tableSize （1 &amp;lt;= i &amp;lt; tableSize）&lt;/p>
&lt;p>$d_i$决定了不同的解决冲突方案，包括：线性探测、平方探测、双散列。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>线性探测&lt;/p>
&lt;p>$d_i=i$&lt;/p>
&lt;p>以增量序列1,2,......,(tableSize-1) 循环试探下一个存储地址。做插入操作的时候，要找到一个空位置，或者直到散列表满为止；做查找操作时，探测一个比较依次一次关键字，直到找到特定的数据对象，或者探测到一个空位置表示查找失败为止。&lt;/p>
&lt;p>线性探测的缺点就是容易产生聚集的现象，因此引入了平方探测法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方探测法--二次探测&lt;/p>
&lt;p>平方探测的公式：$d_i=\pm i^2$，每次以增量序列$1^2,-1^2,2^2,-2^2......$循环试探下一个存储地址。&lt;/p>
&lt;p>平方探测法有可能出现散列表中有空间，但是无法探测到的情况。例如:&lt;/p>
&lt;p>散列表的长度为5，插入5,6,7,11这四个元素，散列函数设计为:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=key mod 5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当插入11时，散列函数找到的位置为2，和6这个元素所在的位置产生冲突，使用平方探测法，探测序列为:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>1+1=2
&lt;span class="ln">2&lt;/span>1-1=0
&lt;span class="ln">3&lt;/span>(1+2*2)%5=0
&lt;span class="ln">4&lt;/span>(1-2*2)%5=2
&lt;span class="ln">5&lt;/span>(1+3*3)%5=0
&lt;span class="ln">6&lt;/span>(1-3*3)%5=2
&lt;span class="ln">7&lt;/span>......
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，探测序列一直在0和2这两个位置之间变动，一直找不到空的位置，但是散列表实际上还有空间。有定理显示：如果散列表长度tableSize是某个$4k+3$(k是正整数) 形式的素数时，平方探测法就可以探查到整个散列表空间。&lt;/p>
&lt;p>虽然平方探测法排除了一次聚集，但是散列到同一地址的那些数据对象将探测相同的备选单元，这称为“二次聚集”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双散列探测法&lt;/p>
&lt;p>双散列探测法: $d_i=i*h_2(key)$，$h_2(key)$是另一个散列函数，探测序列为：&lt;/p>
&lt;p>$h_2(key), 2h_2(key), 3h_2(key), ......$&lt;/p>
&lt;p>探测序列还应该保证所有的散列存储单元都能被探测到。选择以下形式有良好的效果：&lt;/p>
&lt;p>$h_2(key)=p$ - (key mod p)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再散列&lt;/p>
&lt;p>当散列表元素太多（即装填因子α太大）时，查找效率会下降，实际使用的时候，装填因子一般取 0.5&amp;lt;=α&amp;lt;=0.85。&lt;/p>
&lt;p>当装填因子过大时，解决的方法时加倍扩大散列表，这个过程叫做“再散列”。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在开放地址散列表中，删除操作要很小心，通常只能 “懒惰删除”，即需要增加一个删除标记(Deleted)，并不是真正删除它。这是因为插入的时候，为了解决冲突问题，这个位置已经被占用了，如果删除掉它，查找的时候就会出现“断链”的现象。&lt;/p>
&lt;h3 id="分离链接法">分离链接法&lt;/h3>
&lt;p>分离链接法时解决冲突的另一种方法，其做法是将所有关键字为同义词的数据对象通过节点链接存储到同一单向链表中。。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114030859.png" alt="image-20201021114030859">&lt;/p>
&lt;p>如上图所示，分裂链接法实际上是用一个数组来组织散列表的数据结构，这个数组称为哈希桶，数组中的每个元素都指向一个链表，当元素冲突的时候，就在链表的头节点上插入冲突的元素。新元素插入到表头，这不仅仅为了方便，而且还因为新近插入的元素最有可能被最先访问，这样可以加快在单向链表中的顺序查找速度。&lt;/p>
&lt;h2 id="散列表的性能分析">散列表的性能分析&lt;/h2>
&lt;p>散列表的性能使用平均查找长度（ASL）来度量。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>线性探测法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114435819.png" alt="image-20201021114435819">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方探测法和双散列探测法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114511673.png" alt="image-20201021114511673">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分离链接法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114554421.png" alt="image-20201021114554421">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>参考：浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>认识 Linux NSCD 服务缓存</title><link>https://ahamoment.cn/post/linux-nscd/</link><pubDate>Sun, 27 Sep 2020 13:23:05 +0800</pubDate><guid>https://ahamoment.cn/post/linux-nscd/</guid><description>
&lt;p>NSCD(Name Service Cache Daemon)是服务缓存守护进程。&lt;/p>
&lt;h2 id="nscd-安装">NSCD 安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>RHEL/CentOS&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>yum -y install nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Debian/Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>apt-get install nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>RPM&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>https://centos.pkgs.org/7/centos-x86_64/nscd-2.17-307.el7.1.x86_64.rpm.html
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>CentOS7 之后 NSCD 使用 systemd 进行管理。&lt;/p>
&lt;h2 id="nscd-命令选项">NSCD 命令选项&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ nscd --help
&lt;span class="ln"> 2&lt;/span>用法： nscd &lt;span class="o">[&lt;/span>选项...&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>Name Service Cache Daemon.
&lt;span class="ln"> 4&lt;/span> -d, --debug Do not fork and display messages on the current
&lt;span class="ln"> 5&lt;/span> tty
&lt;span class="ln"> 6&lt;/span> -f, --config-file&lt;span class="o">=&lt;/span>名称 从NAME中读取配置数据
&lt;span class="ln"> 7&lt;/span> -g, --statistics Print current configuration statistics
&lt;span class="ln"> 8&lt;/span> -i, --invalidate&lt;span class="o">=&lt;/span>TABLE Invalidate the specified cache
&lt;span class="ln"> 9&lt;/span> -K, --shutdown 关闭服务器
&lt;span class="ln">10&lt;/span> -t, --nthreads&lt;span class="o">=&lt;/span>NUMBER 启动 NUMBER 个线程
&lt;span class="ln">11&lt;/span> -?, --help 给出该系统求助列表
&lt;span class="ln">12&lt;/span> --usage 给出简要的用法信息
&lt;span class="ln">13&lt;/span> -V, --version 打印程序版本号
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>长选项的强制或可选参数对对应的短选项也是强制或可选的。
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nscd-配置文件">NSCD 配置文件&lt;/h2>
&lt;p>NSCD配置文件为&lt;code>/etc/nscd.conf&lt;/code>，NSCD程序在启动的时候会读取&lt;code>/etc/nscd.conf&lt;/code>文件，每一行指定一个属性和对应的值，或者指定一个服务和对应的值，#表示注释。有效的服务设定是：passwd, group, hosts, services, or netgroup五个。&lt;/p>
&lt;p>NSCD 的缓存文件路径默认为 &lt;code>/var/db/nscd/&lt;/code>。&lt;/p>
&lt;p>NSCD 的配置文件相关参数&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">#设置日志文件&lt;/span>
&lt;span class="ln"> 2&lt;/span>logfile debug-file-name
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#设置debug记录的级别，默认是0&lt;/span>
&lt;span class="ln"> 5&lt;/span>debug-level value
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">#程序启动时，等待进去请求的处理线程数，至少5个&lt;/span>
&lt;span class="ln"> 8&lt;/span>threads number
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">#最大线程数，默认32&lt;/span>
&lt;span class="ln">11&lt;/span>max-threads number
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">#nscd程序以哪个用户运行,如果设置了该选项，nscd将作为该用户运行，而不是作为root。如果每个用户都使用一个单独的缓存(-S参数)，将忽略该选项。&lt;/span>
&lt;span class="ln">14&lt;/span>server-user user
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">#哪个用户可以请求统计用户&lt;/span>
&lt;span class="ln">17&lt;/span>stat-user user
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#在一个缓存项被删除之前允许使用的次数，默认值是5，代表SUCCESS的缓存在内存中会Reload5次&lt;/span>
&lt;span class="ln">20&lt;/span>reload-count unlimited &lt;span class="p">|&lt;/span> number
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c1">#是否启用偏执模式，启用会导致nscd周期性重启，默认是no&lt;/span>
&lt;span class="ln">23&lt;/span>paranoia &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c1">#如果启用偏执模式，设置的定期重启nscd的时间间隔，默认是3600秒&lt;/span>
&lt;span class="ln">26&lt;/span>restart-interval &lt;span class="nb">time&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1">#开启或者关闭服务缓存，默认是no&lt;/span>
&lt;span class="ln">29&lt;/span>enable-cache service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c1">#为成功请求的元素设置缓存TTL，单位是秒，值越大缓存命中率越高，降低平均响应时间，但会增加缓存的一致性问题&lt;/span>
&lt;span class="ln">32&lt;/span>positive-time-to-live service value
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="c1">#为失败查询元素设置缓存TTL，单位是秒，应保持小值，减小缓存一致性问题&lt;/span>
&lt;span class="ln">35&lt;/span>negative-time-to-live service value
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="c1">#内部的散列表大小，value应该保持一个素数以达到优化效果。默认值是211&lt;/span>
&lt;span class="ln">38&lt;/span>suggested-size service value
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1">#启用或者禁用检查文件是否属于指定的服务，这些文件是/etc/passwd、/etc/group、/etc/hosts、/etc/services、/etc/netgroup等&lt;/span>
&lt;span class="ln">41&lt;/span>check-files service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="c1">#设置缓存在服务器重启后，仍旧能提供缓存服务，在使用偏执模式时有用，默认是no&lt;/span>
&lt;span class="ln">44&lt;/span>persistent service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="c1">#为客户端共享nscd数据库在内存中做的映射，使客户端可以直接搜索，而不用每次都查询守护进行，默认是no&lt;/span>
&lt;span class="ln">47&lt;/span>shared service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="c1">#该数据库的最大大小，单位是bytes，默认是33554432&lt;/span>
&lt;span class="ln">50&lt;/span>max-db-size service bytes
&lt;span class="ln">51&lt;/span>
&lt;span class="ln">52&lt;/span>&lt;span class="c1">#此选项仅使用于passwd和group服务&lt;/span>
&lt;span class="ln">53&lt;/span>auto-propagate service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nscd-使用示例对dns进行缓存">NSCD 使用示例：对DNS进行缓存&lt;/h2>
&lt;h3 id="dns缓存在服务器上的作用">DNS缓存在服务器上的作用&lt;/h3>
&lt;p>在需要通过域名与外界进行数据交互的时候,dns缓存就派上用场了,它可以减少域名解析的时间,提高效率。例如以下情况&lt;/p>
&lt;ul>
&lt;li>使用爬虫采集网络上的页面数据,&lt;/li>
&lt;li>使用auth2.0协议从其他平台(如微博或QQ)获取用户数据,&lt;/li>
&lt;li>使用第三方支付接口,&lt;/li>
&lt;li>使用短信通道下发短信等.&lt;/li>
&lt;/ul>
&lt;h3 id="开启nscd-dns-缓存服务的优缺点">开启NSCD DNS 缓存服务的优缺点&lt;/h3>
&lt;ul>
&lt;li>优点：
&lt;ul>
&lt;li>本地缓存DNS解析信息，提供解析速度。&lt;/li>
&lt;li>DNS服务挂了也没有问题，在缓存服务时间范围内，解析依旧正常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>DNS解析信息会滞后，如域名解析更改需要手动刷新缓存，NSCD不适合做实时的切换的应用&lt;/li>
&lt;li>多条RR的情况下失去轮询功能，导致缓存周期内单机的负载均衡失效&lt;/li>
&lt;li>域名变更生效可能持续一个TTL+15s，对于一部分讲究变更快速生效的域名而言有一定的变更生效延误&lt;/li>
&lt;li>对于一部分异常导致解析错误的域名，有可能被NSCD缓存导致一段时间内解析都异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="配置dns缓存">配置DNS缓存&lt;/h3>
&lt;p>通过编辑&lt;code>/etc/nscd.conf&lt;/code>文件，在其中增加如下一行可以开启本地DNS Cache&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>enable-cache hosts yes &lt;span class="c1">#这个服务除了dns缓存之外还可以缓存passwd,group,servers&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ cat /etc/nscd.conf
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>logfile /var/log/nscd.log
&lt;span class="ln"> 4&lt;/span>threads &lt;span class="m">5&lt;/span>
&lt;span class="ln"> 5&lt;/span>max-threads &lt;span class="m">32&lt;/span>
&lt;span class="ln"> 6&lt;/span>server-user nscd
&lt;span class="ln"> 7&lt;/span>debug-level &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 8&lt;/span>paranoia no
&lt;span class="ln"> 9&lt;/span>reload-count &lt;span class="m">5&lt;/span>
&lt;span class="ln">10&lt;/span>enable-cache hosts yes
&lt;span class="ln">11&lt;/span>enable-cache passwd no
&lt;span class="ln">12&lt;/span>enable-cache group no
&lt;span class="ln">13&lt;/span>positive-time-to-live hosts &lt;span class="m">60&lt;/span>
&lt;span class="ln">14&lt;/span>negative-time-to-live hosts &lt;span class="m">20&lt;/span>
&lt;span class="ln">15&lt;/span>suggested-size hosts &lt;span class="m">211&lt;/span>
&lt;span class="ln">16&lt;/span>check-files hosts yes
&lt;span class="ln">17&lt;/span>persistent hosts yes
&lt;span class="ln">18&lt;/span>shared hosts yes
&lt;span class="ln">19&lt;/span>max-db-size hosts &lt;span class="m">33554432&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于主动刷新">关于主动刷新&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>reload-count &lt;span class="m">5&lt;/span> 默认值是5，代表SUCCESS的缓存在内存中会Reload 5次
&lt;/code>&lt;/pre>&lt;/div>&lt;p>reload的time是DNS应答&lt;code>TTL&lt;/code>+&lt;code>CACHE_PRUNE_INTERVAL&lt;/code>，reload过程中NSCD会主动发起DNS请求（非客户端发起），如果期间发生解析结果变更会将结果主动更新至NSCD缓存。这里的CACHE_PRUNE_INTERVAL来自于相关的宏定义：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>#define CACHE_PRUNE_INTERVAL 15
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于非success域名的缓存">关于非success域名的缓存&lt;/h4>
&lt;p>查看代码发现对于非success域名的缓存，NSCD会读取配置中的negative-time-to-live hosts，将缓存一个negative-time-to-live hosts+CACHE_PRUNE_INTERVAL的时间&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>dataset-&amp;gt;head.ttl = ttl == INT32_MAX ? db-&amp;gt;negtimeout : ttl;
&lt;span class="ln">2&lt;/span> timeout = dataset-&amp;gt;head.timeout = t + dataset-&amp;gt;head.ttl;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于缓存的rr轮询">关于缓存的RR轮询&lt;/h4>
&lt;p>NSCD是直接缓存了GETHOSTBYNAME/GETHOSTBYADD的应答结果，如果存在多条RR的情况下，将只会读取应答结果中的第一条结果作为函数的返回值。多条RR在NSCD的缓存中并没有RR轮询的效果，直到下一次reload更新缓存结果。这里可能导致域名原本的负载均衡机制失效。&lt;/p>
&lt;h4 id="关于cnamea的结果">关于CNAME+A的结果&lt;/h4>
&lt;p>GLIBC的GETHOSTBYNAME/GETHOSTBYADD返回的TTL中直接读取的是A类型的TTL，代码中并没有针对CNAME的TTL做特殊处理，因此在有CNAME+A的级联应答结果中，缓存的timeout将只会读取对应的A记录的TTL。
当DNS应答结果只有CNAME时，DNS请求将被判定为失败，这时CNAME的TTL将不起作用，缓存的时间将遵循非success域名的timeout计算。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>return ((qtype == T_A || qtype == T_AAAA) &amp;amp;&amp;amp; ap != host_data-&amp;gt;aliases
&lt;span class="ln">2&lt;/span> ? NSS_STATUS_NOTFOUND : NSS_STATUS_TRYAGAIN);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动-nscd-进程">启动 NSCD 进程&lt;/h3>
&lt;p>默认该服务在Redhat或Centos下是关闭的，可以通过以下指令开启&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ systemctl start nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看进程，如下所示&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ ps aux | grep nscd
&lt;span class="ln">2&lt;/span>nscd 1284 0.1 0.3 708056 1580 ? Ssl 23:37 0:00 /usr/sbin/nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明已经正常运行了。&lt;/p>
&lt;h3 id="nscd服务查看和清除">NSCD服务查看和清除&lt;/h3>
&lt;p>NSCD缓存DB文件在&lt;code>/var/db/nscd&lt;/code>下。可以通过&lt;code>nscd -g&lt;/code>查看统计的信息，这里列出部分：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ nscd -g
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>nscd 配置：
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="m">0&lt;/span> 服务器调试级别
&lt;span class="ln"> 6&lt;/span> 4s server runtime
&lt;span class="ln"> 7&lt;/span> &lt;span class="m">5&lt;/span> current number of threads
&lt;span class="ln"> 8&lt;/span> &lt;span class="m">32&lt;/span> maximum number of threads
&lt;span class="ln"> 9&lt;/span> &lt;span class="m">0&lt;/span> number of &lt;span class="nb">times&lt;/span> clients had to &lt;span class="nb">wait&lt;/span>
&lt;span class="ln">10&lt;/span> no paranoia mode enabled
&lt;span class="ln">11&lt;/span> &lt;span class="m">3600&lt;/span> restart internal
&lt;span class="ln">12&lt;/span> &lt;span class="m">5&lt;/span> reload count
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>... 省略输出信息若干 ...
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>hosts cache:
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> yes cache is enabled
&lt;span class="ln">19&lt;/span> yes cache is persistent
&lt;span class="ln">20&lt;/span> yes cache is shared
&lt;span class="ln">21&lt;/span> &lt;span class="m">211&lt;/span> suggested size
&lt;span class="ln">22&lt;/span> &lt;span class="m">216064&lt;/span> total data pool size
&lt;span class="ln">23&lt;/span> &lt;span class="m">0&lt;/span> used data pool size
&lt;span class="ln">24&lt;/span> &lt;span class="m">60&lt;/span> seconds &lt;span class="nb">time&lt;/span> to live &lt;span class="k">for&lt;/span> positive entries
&lt;span class="ln">25&lt;/span> &lt;span class="m">20&lt;/span> seconds &lt;span class="nb">time&lt;/span> to live &lt;span class="k">for&lt;/span> negative entries
&lt;span class="ln">26&lt;/span> &lt;span class="m">0&lt;/span> cache hits on positive entries
&lt;span class="ln">27&lt;/span> &lt;span class="m">0&lt;/span> cache hits on negative entries
&lt;span class="ln">28&lt;/span> &lt;span class="m">0&lt;/span> cache misses on positive entries
&lt;span class="ln">29&lt;/span> &lt;span class="m">0&lt;/span> cache misses on negative entries
&lt;span class="ln">30&lt;/span> 0% cache hit rate
&lt;span class="ln">31&lt;/span> &lt;span class="m">0&lt;/span> current number of cached values
&lt;span class="ln">32&lt;/span> &lt;span class="m">0&lt;/span> maximum number of cached values
&lt;span class="ln">33&lt;/span> &lt;span class="m">0&lt;/span> maximum chain length searched
&lt;span class="ln">34&lt;/span> &lt;span class="m">0&lt;/span> number of delays on rdlock
&lt;span class="ln">35&lt;/span> &lt;span class="m">0&lt;/span> number of delays on wrlock
&lt;span class="ln">36&lt;/span> &lt;span class="m">0&lt;/span> memory allocations failed
&lt;span class="ln">37&lt;/span> yes check /etc/hosts &lt;span class="k">for&lt;/span> changes
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span>... 省略输出信息若干 ...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="清除指定类型缓存">清除指定类型缓存&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ nscd -i passwd
&lt;span class="ln">2&lt;/span>$ nscd -i group
&lt;span class="ln">3&lt;/span>$ nscd -i hosts
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关闭服务">关闭服务&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ nscd -K
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>【1】&lt;a href="https://www.hi-linux.com/posts/9461.html">Linux 下开启缓存服务 NSCD&lt;/a>&lt;/p>
&lt;p>【2】&lt;a href="https://zhuanlan.zhihu.com/p/44556919">阿里DNS: NSCD-DNS缓存详解&lt;/a>&lt;/p>
&lt;p>【3】&lt;a href="https://linux.die.net/man/8/nscd">Linux man page&lt;/a>&lt;/p></description></item><item><title>堆</title><link>https://ahamoment.cn/post/algorithm-heap/</link><pubDate>Tue, 15 Sep 2020 11:44:06 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-heap/</guid><description>
&lt;h2 id="什么是堆">什么是堆&lt;/h2>
&lt;p>了解什么是堆之前，我们知道队列的概念，队列的特点是先进先出，但是有一种特殊的队列，取出元素的顺序是按照元素的优先权（关键字）大小，而不是元素进入队列的先后顺序，这就是优先队列(Priority Queue)。&lt;/p>
&lt;p>若采用数组或者链表实现优先队列，总会有插入、删除或者查找中的一项操作的复杂度是$O(N)$ 的。&lt;/p>
&lt;p>若采用二叉搜索树实现，那么插入和删除都跟树的高度有关，也就是$O(log_2N)$ 的复杂度，但是删除的时候，由于每次都要删除最大的或者最小的，这样操作几次后，会造成搜索树失去平衡，所以不能简单的使用二叉搜索树。&lt;/p>
&lt;p>如果采用二叉树结构，我们更关注的应该是删除的操作，那么我们把最大的值放到根结点，左右两边也是最大值作为左右子树的根结点，每次删除只需要删除根结点。同时，为了保证树的平衡性，可以考虑使用完全二叉树来实现优先队列。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917105413123.png" alt="image-20200917105413123">&lt;/p>
&lt;p>优先队列使用完全二叉树表示如上图所示，数组的第 0 个元素空着，后面的按照层序遍历的顺序存放到数组中。使用完全二叉实现的优先队列，也可以称之为堆，堆的特性如下：&lt;/p>
&lt;ul>
&lt;li>结构性：用数组表示的完全二叉树。&lt;/li>
&lt;li>有序性：任一结点的关键字是其子树所有结点的最大值（或最小值）
&lt;ul>
&lt;li>&amp;quot;最大堆&amp;quot;，也称 &amp;quot;大顶堆&amp;quot;：堆顶元素是整个树的最大值&lt;/li>
&lt;li>&amp;quot;最小堆&amp;quot;，也称&amp;quot;小顶堆&amp;quot;：堆顶元素是整个树的最小值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>如下图所示的几个二叉树，不是堆。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917111328827.png" alt="image-20200917111328827">&lt;/p>
&lt;p>第一和第二棵二叉树虽然满足有序性，但是不是完全二叉树。第三和第四棵二叉树是完全二叉树，但是不满足有序性的特点。&lt;/p>
&lt;blockquote>
&lt;p>注意：堆从根结点到任意结点路径上的结点顺序都是有序的！&lt;/p>
&lt;/blockquote>
&lt;h2 id="最大堆的创建">最大堆的创建&lt;/h2>
&lt;p>堆的数据结构包括存储完全二叉树的数组 data，堆中当前元素个数 size，堆的最大容量 capacity。&lt;/p>
&lt;p>数组的元素从1开始，0的位置定义为哨兵，方便以后更快操作。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Heap&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1">// 堆的类型定义
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//存储元素的数组
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//堆中当前元素个数
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//堆的最大容量
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Heap&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Heap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">capacity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Heap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">maxSize&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="c1">//最大元素从1开始
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">capacity&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Integer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">MAX_VALUE&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">// 定义哨兵，为大于最大堆中所有可能元素的值
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isFull&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">capacity&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">abstract&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最大堆的插入">最大堆的插入&lt;/h2>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917112957455.png" alt="image-20200917112957455">&lt;/p>
&lt;p>插入元素时，插入到数组的最后一个位置，这里插入的结点值为20，检查插入后仍然符合堆的两个特性，插入完成。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917113136023.png" alt="image-20200917113136023">&lt;/p>
&lt;p>当插入的值为35的时候，当前堆的有序性被破坏了，将35和31的位置调换后就可以了。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917113303675.png" alt="image-20200917113303675">&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917113324619.png" alt="image-20200917113324619">&lt;/p>
&lt;p>当插入的值为58的时候，58 &amp;gt; 31，跟31对调位置，58 &amp;gt; 44 继续跟根结点调换位置。调整后保证了有序性，同时，从58 -&amp;gt; 44 -&amp;gt; 31这条线也是按照从大到小的顺序。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1">// 将元素X插入最大堆H，其中H-&amp;gt;Data[0]已经定义为哨兵
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFull&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;最大堆已满&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// i指向插入后堆中的最后一个元素的位置
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 向下过滤结点，对调父结点的位置
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 将X插入
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>由于我们将数组的第 0 个元素设置为哨兵，哨兵的值为一个非常大的整数值。如果没有哨兵结点，我们在循环中还需要判断 i &amp;gt; 1 这个条件，有了哨兵之后，循环在 i = 0 的时候就会停下来，可以少写一个条件，提高程序效率。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917114313272.png" alt="image-20200917114313272">&lt;/p>
&lt;h2 id="最大堆的删除">最大堆的删除&lt;/h2>
&lt;p>最大堆的删除过程就是取出根结点（最大值）元素，同时删除堆的一个结点。&lt;/p>
&lt;p>删除下图的这个堆的最大值：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200917133516355.png" alt="image-20200917133516355">&lt;/p>
&lt;ol>
&lt;li>把 31 移至根&lt;/li>
&lt;li>找出 31 的较大的孩子&lt;/li>
&lt;/ol>
&lt;p>时间复杂度为： $T(N)=O(logN)$&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">deleteMax&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1">// 从最大堆中取出键值为最大的元素，并删除一个结点
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxItem&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//maxItem-堆顶元素，temp-临时变量
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;最大堆已经为空&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">maxItem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="c1">//取出根结点最大值
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 用最大堆中的最后一个元素从根结点开始向上过滤下层结点
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">--];&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 左儿子的位置
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">++;&lt;/span> &lt;span class="c1">//child 指向左右结点的较大者
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//找到位置了
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//将子结点与父节点对换
&lt;/span>&lt;span class="ln">21&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">maxItem&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最大堆的建立">最大堆的建立&lt;/h2>
&lt;p>建立最大堆是将已经存在的N个元素按最大堆的要求存放在一个一维数组中。&lt;/p>
&lt;p>建堆的过程可以从树的从最后一个结点的父节点开始，到根结点1，将最后一个结点的父节点所在的小堆调整为最大堆，然后向左寻找有儿子的结点，每次调整一个最大堆，直到根结点。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">buildHeap&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1">//* 调整Data[]中的元素，使满足最大堆的有序性 *//*
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//* 这里假设所有Size个元素已经存在Data[]中 *//*
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">//* 从最后一个结点的父节点开始，到根结点1 *//*
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">preDown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">preDown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">//* 下滤：将H中以Data[p]为根的子堆调整为最大堆 *//*
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">//* 取出根结点存放的值 *//*
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//这个过程与删除的过程一样
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">]))&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">++;&lt;/span> &lt;span class="c1">//* Child指向左右子结点的较大者 *//*
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//* 找到了合适位置 *//*
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="c1">//* 下滤X *//*
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="最小堆">最小堆&lt;/h2>
&lt;p>最小堆的建立和操作与最大堆大致上是一样的。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MinHeap&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Heap&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MinHeap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sentinalVal&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sentinalVal&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">MinHeap&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">sentinalVal&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//哨兵值
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">sentinalVal&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// 将元素X插入最小堆H，其中H-&amp;gt;Data[0]已经定义为哨兵
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isFull&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;最大堆已满&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// i指向插入后堆中的最后一个元素的位置
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">// 向下过滤结点，对调父结点的位置
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">element&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 将X插入
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">deleteMin&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="c1">// 从最小堆中取出键值为最小的元素，并删除一个结点
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">minItem&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>&lt;span class="c1">//minItem-堆顶元素，temp-临时变量
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;最大堆已经为空&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">minItem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">];&lt;/span>&lt;span class="c1">//取出根结点最小值
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 用最小堆中的最后一个元素从根结点开始向上过滤下层结点
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">--];&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 左儿子的位置
&lt;/span>&lt;span class="ln">41&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">++;&lt;/span> &lt;span class="c1">//child 指向左右结点的较小者
&lt;/span>&lt;span class="ln">43&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//找到位置了
&lt;/span>&lt;span class="ln">45&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//将子结点与父节点对换
&lt;/span>&lt;span class="ln">47&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">minItem&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">53&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="c1">//*----------- 建造最小堆 -----------*//*
&lt;/span>&lt;span class="ln">55&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">preDown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">56&lt;/span> &lt;span class="c1">//* 下滤：将H中以Data[p]为根的子堆调整为最小堆 *//*
&lt;/span>&lt;span class="ln">57&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">parent&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">59&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">p&lt;/span>&lt;span class="o">];&lt;/span> &lt;span class="c1">//* 取出根结点存放的值 *//*
&lt;/span>&lt;span class="ln">61&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">p&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="c1">//这个过程与删除的过程一样
&lt;/span>&lt;span class="ln">62&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">child&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">parent&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">63&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">]))&lt;/span>
&lt;span class="ln">64&lt;/span> &lt;span class="n">child&lt;/span>&lt;span class="o">++;&lt;/span> &lt;span class="c1">//* Child指向左右子结点的较小者 *//*
&lt;/span>&lt;span class="ln">65&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">temp&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//* 找到了合适位置 *//*
&lt;/span>&lt;span class="ln">66&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="c1">//* 下滤X *//*
&lt;/span>&lt;span class="ln">67&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">child&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">68&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">69&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">parent&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">70&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">71&lt;/span>
&lt;span class="ln">72&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">buildHeap&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">73&lt;/span> &lt;span class="c1">//* 调整Data[]中的元素，使满足最大堆的有序性 *//*
&lt;/span>&lt;span class="ln">74&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//* 这里假设所有Size个元素已经存在Data[]中 *//*
&lt;/span>&lt;span class="ln">75&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">76&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">77&lt;/span>
&lt;span class="ln">78&lt;/span> &lt;span class="c1">//* 从最后一个结点的父节点开始，到根结点1 *//*
&lt;/span>&lt;span class="ln">79&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">80&lt;/span> &lt;span class="n">preDown&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">81&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">82&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">83&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="总结">总结&lt;/h2>
&lt;p>从堆的几种操作可以发现，删除和建堆的过程，就是从上往下调整堆的有序性的过程，插入元素的过程是从下往上调整堆的有序性的过程。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>【1】&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/content?type=detail&amp;amp;id=1212031639&amp;amp;cid=1215166239">数据结构-浙江大学&lt;/a>&lt;/p></description></item><item><title>容器内获取 CPU 核数问题</title><link>https://ahamoment.cn/post/cloud-container-get-cpu/</link><pubDate>Fri, 11 Sep 2020 18:14:58 +0800</pubDate><guid>https://ahamoment.cn/post/cloud-container-get-cpu/</guid><description>
&lt;p>现在越来越多的公司将服务通过容器来部署，但这里其实对Java的应用有一个坑。很多超时敏感的应用其实对GC的要求还是比较高的，减少GC的时间变得很重要，比如你可以根据当前机器的CPU核数得到一个较好的并发GC线程数 &lt;em>-XX:ParallelGCThreads&lt;/em>，从而减少STW的时长。&lt;/p>
&lt;p>但在早期的JDK版本中，比如我们使用的Jdk1.8u102，当你使用Java的Runtime获取CPU数量时，在容器里面会返回容器所在宿主机的核数，而不是容器自身的：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cores&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">availableProcessors&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其实是JDK的一个问题，已经trace在&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8140793">JDK-8140793&lt;/a>，原因是获取CPU核数是通过读取两个环境变量，其中&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ENV&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_SC_NPROCESSORS_CONF&lt;/td>
&lt;td>number of processors configured&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_SC_NPROCESSORS_ONLN&lt;/td>
&lt;td>The number of processors currently online (available)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中_SC_NPROCESSORS_CONF 就是我们需要容器真实的CPU数量。
&lt;img src="https://img-blog.csdnimg.cn/20200911145803773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlc3RfNjA5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">
&lt;a href="https://github.com/obmarg/libsysconfcpus/blob/master/src/libsysconfcpus.c">获取CPU数量的源码&lt;/a>&lt;/p>
&lt;h3 id="怎么解决">怎么解决&lt;/h3>
&lt;p>第一种办法是使用新版本的Jdku131以上的版本&lt;a href="https://blog.csdn.net/west_609/article/details/108534197#fn1">1&lt;/a>。&lt;/p>
&lt;p>另外一个办法是使用自编译上面的源代码，通过LD_PRLOAD的方式将修改后的so文件加载进去Mock掉CPU的核数&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits">Java SE support for Docker CPU and memory limits&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>解决setcap导致Java加载libjli.so 失败问题</title><link>https://ahamoment.cn/post/linux-cap/</link><pubDate>Fri, 11 Sep 2020 11:12:43 +0800</pubDate><guid>https://ahamoment.cn/post/linux-cap/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>最近碰到一个问题，有个应用在启动的时候一直报错，错误信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>java: error &lt;span class="k">while&lt;/span> loading shared libraries: libjli.so: cannot open shared object file: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误信息是说 java 应用加载不到 libjli.so 文件，我们使用 &lt;code>java -version&lt;/code> 命令，同样的错误又出现了。使用 ldd 命令查看一下 java 应用是否加载了这个 so 文件，发现 java 应用加载的 so 文件中存在 libjli.so。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ldd java
&lt;span class="ln">2&lt;/span> linux-vdso.so.1 &lt;span class="o">=&lt;/span>&amp;gt; &lt;span class="o">(&lt;/span>0x00007ffe2a9c7000&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> /usr/local/lib/libsysconfcpus.so &lt;span class="o">(&lt;/span>0x00002ac503ca8000&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span> libz.so.1 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libz.so.1 &lt;span class="o">(&lt;/span>0x00002ac503eaa000&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span> libjli.so &lt;span class="o">=&lt;/span>&amp;gt; /apps/svr/jdk-14.0.1/bin/./../lib/libjli.so &lt;span class="o">(&lt;/span>0x00002ac5040c0000&lt;span class="o">)&lt;/span>
&lt;span class="ln">6&lt;/span> libpthread.so.0 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libpthread.so.0 &lt;span class="o">(&lt;/span>0x00002ac5042d1000&lt;span class="o">)&lt;/span>
&lt;span class="ln">7&lt;/span> libdl.so.2 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libdl.so.2 &lt;span class="o">(&lt;/span>0x00002ac5044ee000&lt;span class="o">)&lt;/span>
&lt;span class="ln">8&lt;/span> libc.so.6 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libc.so.6 &lt;span class="o">(&lt;/span>0x00002ac5046f2000&lt;span class="o">)&lt;/span>
&lt;span class="ln">9&lt;/span> /lib64/ld-linux-x86-64.so.2 &lt;span class="o">(&lt;/span>0x00002ac503883000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们接着查看了 &lt;code>LD_LIBRARY_PATH&lt;/code> 和 &lt;code>/etc/ld.so.conf.d/xxx.conf&lt;/code> 文件的配置，发现都是正常的。通过对比其他应用的启动配置，发现该应用使用了 80 端口启动，但是我们的容器只能使用 apps 权限登录，所以在启动前使用 &lt;code>setcap&lt;/code> 命令提升了 java 应用的权限，允许其使用 80 端口，会不会是这个操作导致的呢？在查看原因之前，我们需要先理解几个概念。&lt;/p>
&lt;h2 id="linux-动态库">Linux 动态库&lt;/h2>
&lt;p>动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，不同的应用程序如果调用相同的库,那么在内存中只需要有一份该动态库(共享库)的实例。这类库的名字一般是libxxx.so，其中so是 Shared Object 的缩写，即可以共享的目标文件。在链接动态库生成可执行文件时，并不会把动态库的代码复制到执行文件中，而是在执行文件中记录对动态库的引用。&lt;/p>
&lt;p>Linux下生成和使用动态库的步骤如下：&lt;/p>
&lt;ol>
&lt;li>编写源文件。&lt;/li>
&lt;li>将一个或几个源文件编译链接，生成共享库。&lt;/li>
&lt;li>通过 &lt;code>-L -lxxx&lt;/code> 的gcc选项链接生成的libxxx.so。例如&lt;code>gcc -fPIC -shared -o libmax.so max.c&lt;/code> , &lt;code>-fPIC&lt;/code> 是编译选项，PIC是 Position Independent Code 的缩写，表示要生成位置无关的代码，这是动态库需要的特性； &lt;code>-shared&lt;/code> 是链接选项，告诉gcc生成动态库而不是可执行文件&lt;/li>
&lt;li>把libxxx.so放入链接库的标准路径，或指定 &lt;code>LD_LIBRARY_PATH&lt;/code>，才能运行链接了libxxx.so的程序。&lt;/li>
&lt;/ol>
&lt;p>Linux是通过 &lt;code>/etc/ld.so.cache&lt;/code> 文件搜寻要链接的动态库的。而 &lt;code>/etc/ld.so.cache&lt;/code> 是 ldconfig 程序读取 &lt;code>/etc/ld.so.conf&lt;/code> 文件生成的。
（注意， &lt;code>/etc/ld.so.conf&lt;/code> 中并不必包含 &lt;code>/lib&lt;/code> 和 &lt;code>/usr/lib&lt;/code>，&lt;code>ldconfig&lt;/code>程序会自动搜索这两个目录）&lt;/p>
&lt;p>我们把要用的 libxx.so 文件所在的路径添加到 &lt;code>/etc/ld.so.conf&lt;/code> 中，再以root权限运行 &lt;code>ldconfig&lt;/code> 程序，更新 &lt;code>/etc/ld.so.cache&lt;/code> ，程序运行时，就可以找到 &lt;code>libxx.so&lt;/code>。另外就是通过配置 &lt;code>LD_LIBRARY_PATH&lt;/code> 的方式来指定通过某些路径寻找链接的动态库。&lt;/p>
&lt;h3 id="ldd-查看程序依赖">ldd 查看程序依赖&lt;/h3>
&lt;p>理解了动态库的概念之后，当碰到某个程序报错缺少某个库文件时，我们应该怎么查看该程序当前加载了哪些库文件呢？可以用 &lt;code>ldd&lt;/code> 命令。&lt;/p>
&lt;p>ldd 命令的作用是用来查看程式运行所需的共享库,常用来解决程式因缺少某个库文件而不能运行的一些问题。&lt;/p>
&lt;p>例如：查看test程序运行所依赖的库:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost testso&lt;span class="o">]&lt;/span>&lt;span class="c1"># ldd /etc/alternatives/java&lt;/span>
&lt;span class="ln">2&lt;/span> linux-vdso.so.1 &lt;span class="o">=&lt;/span>&amp;gt; &lt;span class="o">(&lt;/span>0x00007ffde15f8000&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> libpthread.so.0 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libpthread.so.0 &lt;span class="o">(&lt;/span>0x00007f03f2f8d000&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span> libdl.so.2 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libdl.so.2 &lt;span class="o">(&lt;/span>0x00007f03f2d89000&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span> libc.so.6 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libc.so.6 &lt;span class="o">(&lt;/span>0x00007f03f29bb000&lt;span class="o">)&lt;/span>
&lt;span class="ln">6&lt;/span> /lib64/ld-linux-x86-64.so.2 &lt;span class="o">(&lt;/span>0x00007f03f33ab000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>第一列：程序需要依赖什么库&lt;/li>
&lt;li>第二列: 系统提供的与程序需要的库所对应的库&lt;/li>
&lt;li>第三列：库加载的开始地址&lt;/li>
&lt;/ul>
&lt;p>通过上面的信息，我们可以得到以下几个信息：&lt;/p>
&lt;ol>
&lt;li>通过对比第一列和第二列，我们可以分析程序需要依赖的库和系统实际提供的，是否相匹配&lt;/li>
&lt;li>通过观察第三列，我们可以知道在当前的库中的符号在对应的进程的地址空间中的开始位置&lt;/li>
&lt;/ol>
&lt;p>如果依赖的某个库找不到，通过这个命令可以迅速定位问题所在.&lt;/p>
&lt;h2 id="linux-capability">Linux capability&lt;/h2>
&lt;p>从内核 2.2 开始，Linux 将传统上与超级用户 root 关联的特权划分为不同的单元，称为 capabilites。Capabilites 作为线程(Linux 并不真正区分进程和线程)的属性存在，每个单元可以独立启用和禁用。如此一来，权限检查的过程就变成了：在执行特权操作时，如果进程的有效身份不是 root，就去检查是否具有该特权操作所对应的 capabilites，并以此决定是否可以进行该特权操作。&lt;/p>
&lt;p>下面是从 &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities man page&lt;/a> 中摘取的 capabilites 列表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>capability 名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CAP_AUDIT_CONTROL&lt;/td>
&lt;td>启用和禁用内核审计；改变审计过滤规则；检索审计状态和过滤规则&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_AUDIT_READ&lt;/td>
&lt;td>允许通过 multicast netlink 套接字读取审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_AUDIT_WRITE&lt;/td>
&lt;td>将记录写入内核审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_BLOCK_SUSPEND&lt;/td>
&lt;td>使用可以阻止系统挂起的特性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_CHOWN&lt;/td>
&lt;td>修改文件所有者的权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_DAC_OVERRIDE&lt;/td>
&lt;td>忽略文件的 DAC 访问限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_DAC_READ_SEARCH&lt;/td>
&lt;td>忽略文件读及目录搜索的 DAC 访问限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_FOWNER&lt;/td>
&lt;td>忽略文件属主 ID 必须和进程用户 ID 相匹配的限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_FSETID&lt;/td>
&lt;td>允许设置文件的 setuid 位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_IPC_LOCK&lt;/td>
&lt;td>允许锁定共享内存片段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_IPC_OWNER&lt;/td>
&lt;td>忽略 IPC 所有权检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_KILL&lt;/td>
&lt;td>允许对不属于自己的进程发送信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_LEASE&lt;/td>
&lt;td>允许修改文件锁的 FL_LEASE 标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_LINUX_IMMUTABLE&lt;/td>
&lt;td>允许修改文件的 IMMUTABLE 和 APPEND 属性标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MAC_ADMIN&lt;/td>
&lt;td>允许 MAC 配置或状态更改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MAC_OVERRIDE&lt;/td>
&lt;td>覆盖 MAC(Mandatory Access Control)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MKNOD&lt;/td>
&lt;td>允许使用 mknod() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_ADMIN&lt;/td>
&lt;td>允许执行网络管理任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_BIND_SERVICE&lt;/td>
&lt;td>允许绑定到小于 1024 的端口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_BROADCAST&lt;/td>
&lt;td>允许网络广播和多播访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_RAW&lt;/td>
&lt;td>允许使用原始套接字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETGID&lt;/td>
&lt;td>允许改变进程的 GID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETFCAP&lt;/td>
&lt;td>允许为文件设置任意的 capabilities&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETPCAP&lt;/td>
&lt;td>参考 &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities man page&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETUID&lt;/td>
&lt;td>允许改变进程的 UID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_ADMIN&lt;/td>
&lt;td>允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_BOOT&lt;/td>
&lt;td>允许重新启动系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_CHROOT&lt;/td>
&lt;td>允许使用 chroot() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_MODULE&lt;/td>
&lt;td>允许插入和删除内核模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_NICE&lt;/td>
&lt;td>允许提升优先级及设置其他进程的优先级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_PACCT&lt;/td>
&lt;td>允许执行进程的 BSD 式审计&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_PTRACE&lt;/td>
&lt;td>允许跟踪任何进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_RAWIO&lt;/td>
&lt;td>允许直接访问 /devport、/dev/mem、/dev/kmem 及原始块设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_RESOURCE&lt;/td>
&lt;td>忽略资源限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_TIME&lt;/td>
&lt;td>允许改变系统时钟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_TTY_CONFIG&lt;/td>
&lt;td>允许配置 TTY 设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYSLOG&lt;/td>
&lt;td>允许使用 syslog() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_WAKE_ALARM&lt;/td>
&lt;td>允许触发一些能唤醒系统的东西(比如 CLOCK_BOOTTIME_ALARM 计时器)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>getcap&lt;/strong> 命令和 &lt;strong>setcap&lt;/strong> 命令分别用来查看和设置程序文件的 capabilities 属性。&lt;/p>
&lt;p>例如&lt;strong>为 ping 命令文件添加 capabilities&lt;/strong>&lt;/p>
&lt;p>执行 ping 命令所需的 capabilities 为 cap_net_admin 和 cap_net_raw，通过 setcap 命令可以添加它们：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo setcap cap_net_admin,cap_net_raw+ep /bin/ping
&lt;/code>&lt;/pre>&lt;/div>&lt;p>移除添加的 capabilities ，执行下面的命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo setcap cap_net_admin,cap_net_raw-ep /bin/ping
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令中的 ep 分别表示 Effective 和 Permitted 集合(接下来会介绍)，+ 号表示把指定的 capabilities 添加到这些集合中，- 号表示从集合中移除(对于 Effective 来说是设置或者清除位)。&lt;/p>
&lt;h2 id="解决问题">解决问题&lt;/h2>
&lt;p>回到我们开始的问题，由于我们为非 root 用户赋予了使用 80 端口的权限，调用了如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>setcap &lt;span class="nv">cap_net_bind_service&lt;/span>&lt;span class="o">=&lt;/span>+ep /usr/bin/java
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当一个可执行文件提升了权限后，运行时加载程序（rtld）— ld.so，它不会与不受信任路径中的库链接。Linux 会为使用了 &lt;code>setcap&lt;/code> 或 &lt;code>suid&lt;/code> 的程序禁用掉 &lt;code>LD_LIBRARY_PATH&lt;/code>。所以就出现了 java 程序加载不到 libjli.so 的情况了，这是 JDK 的一个 bug。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://bugs.sun.com/view_bug.do?bug_id=7157699">JDK-7157699 : can not run java after granting posix capabilities&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>那么既然使用 setcap 后不会加载链接库，我们就可以将 libjli.so 所在的路径添加到 &lt;code>/etc/ld.so.conf/xxx.conf&lt;/code>中，例如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>% cat /etc/ld.so.conf.d/java.conf
&lt;span class="ln">2&lt;/span>/usr/java/jdk1.8.0_261-amd64/lib/amd64/jli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>ldconfig&lt;/code> 重载 so 文件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost jli&lt;span class="o">]&lt;/span>&lt;span class="c1"># ldconfig -p | grep libjli&lt;/span>
&lt;span class="ln">2&lt;/span> libjli.so &lt;span class="o">(&lt;/span>libc6,x86-64&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>&amp;gt; /usr/java/jdk1.8.0_261-amd64/lib/amd64/jli/libjli.so% ldconfig &lt;span class="p">|&lt;/span> grep libjli
&lt;span class="ln">3&lt;/span>libjli.so -&amp;gt; libjli.so
&lt;span class="ln">4&lt;/span>.......
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样再次测试就可以了。&lt;/p>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>【1】&lt;a href="https://www.cnblogs.com/jiqingwu/p/linux_dynamic_lib_create.html">Linux动态库生成与使用指南&lt;/a>&lt;/p>
&lt;p>【2】&lt;a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ldd.html#ldd">ldd 查看程序依赖库&lt;/a>&lt;/p>
&lt;p>【3】&lt;a href="https://www.cnblogs.com/sparkdev/p/11417781.html">Linux Capabiliites 简介&lt;/a>&lt;/p>
&lt;p>【4】&lt;a href="https://linux.die.net/man/7/capabilities">capabilities(7) - Linux man page&lt;/a>&lt;/p>
&lt;p>【5】&lt;a href="https://www.boris1993.com/linux/allow-non-root-process-to-bind-low-numbered-ports.html">如何允许非 root 进程绑定低位端口&lt;/a>&lt;/p>
&lt;p>【6】[&lt;a href="https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep">How to get Oracle java 7 to work with setcap cap_net_bind_service+ep&lt;/a>](&lt;a href="https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep">https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep&lt;/a>)&lt;/p></description></item><item><title>平衡二叉树</title><link>https://ahamoment.cn/post/algorithm-balanced-binary-tree/</link><pubDate>Mon, 31 Aug 2020 18:11:54 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-balanced-binary-tree/</guid><description>
&lt;h2 id="平衡二叉树">平衡二叉树&lt;/h2>
&lt;p>平衡二叉树也是一种搜索树。&lt;/p>
&lt;p>搜索树节点不同插入次序，将导致不同的深度和平均查找长度 ASL。&lt;/p>
&lt;p>平衡因子（Balance Factor）:&lt;code>BF(T)=hL-hR&lt;/code>，其中hL和hR分别是T的左右子树的高度。平衡二叉树（Balanced Binary Tree) 又叫 AVL树，当树不为空时，在任一节点左，右子树高度差的绝对值不超过1，即 &lt;code>|BF(T)|&amp;lt;=1&lt;/code>。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200910124943682.png" alt="image-20200910124943682">&lt;/p>
&lt;p>平衡二叉树的高度能够达到 &lt;em>$log_2n$&lt;/em>&lt;/p>
&lt;h2 id="平衡二叉树的调整">平衡二叉树的调整&lt;/h2>
&lt;p>任何情况都可以归结为四种模式。根据插入节点的位置不同使用不同的查找方法，同时记住平衡二叉树是搜索树，节点小于左边大于右边。平衡二叉树的四种调整方法为：右单旋，左单旋，右左双旋，左右双旋。&lt;/p>
&lt;h3 id="右单旋">右单旋&lt;/h3>
&lt;p>按照字母大小插入三个结点，Mar, May, Nov：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915105728847.png" alt="image-20200915105728847">&lt;/p>
&lt;p>如上图左边所示，在插入 Nov 结点后，二叉树的平衡被破坏，结点Mar 的平衡因子为 -2，这个时候我们称 Mar 为不平衡的发现者，麻烦节点 Nov 在发现者右子树的右边，需要RR旋转（右单旋）。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915110306417.png" alt="image-20200915110306417">&lt;/p>
&lt;p>右单旋的过程如上图所示，将 B 结点调整为跟结点，$B_L$ 调整为 A 的右结点。上图所示的是插入到右子树的右子树的右边时，当插入到右子树的右子树的位置不同时怎么处理？来看个例子：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915111837036.png" alt="image-20200915111837036">&lt;/p>
&lt;p>结点插到左边和右边的时候，调整平衡后位置还是不变。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// 右单旋
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">singleRightRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 注意：A 必须有一个右子节点B
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 将 A 与 B 做右单旋，更新A与B的高度，返回新的根结点B
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="左单旋">左单旋&lt;/h3>
&lt;p>左单旋与右单旋类似，麻烦结点在发现者的左子树的左边，因而叫LL插入，需要 LL 旋转（左单旋）。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915112201005.png" alt="image-20200915112201005">&lt;/p>
&lt;p>上图是左单旋的调整过程。注意，对于调整，只需要从最下层的开始调整就行。下层平衡了，上层自然也会平衡。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// 左单旋(LL旋转)
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">singleLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 注意：A必须有一个左子结点B
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">//将 A与B做左单旋，更新A与B的高度，返回新的根结点B
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">));&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="左右双旋">左右双旋&lt;/h3>
&lt;p>对于左右双旋，麻烦结点出现在左子树的右边，因而叫 LR 插入，需要做 LR 旋转。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915112418342.png" alt="image-20200915112418342">&lt;/p>
&lt;p>当插入的结点在 C 的左子树或者右子树下边时，就需要左右双旋，左右双旋可以看成做了两次单旋，目的是调整 A,B,C 这三个结点的位置。先将B和C 做一次右单旋，再将 C 和 A 做一次左单旋。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">doubleLeftRightRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="c1">// 注意：A必须有一个左子节点B，且B必须有一个右子节点C
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 将A、B与C做两次单旋，返回新的根结点C
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="c1">// 将B与C做右单旋，C被返回
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singleLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="c1">// 将A与C做左单旋，C被返回
&lt;/span>&lt;span class="ln">8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">singleLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="右左双旋">右左双旋&lt;/h3>
&lt;p>右左双旋时，麻烦结点出现在右子树的左边，因而又叫 RL 插入。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200915112912024.png" alt="image-20200915112912024">&lt;/p>
&lt;p>同样的，我们也可将右左双旋看成是两次单旋，将 B 和 C 做左单旋，再将 A 与 C 做右单旋。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">doubleRightLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="c1">// 注意：A必须有一个右子节点B，且B必须有一个左子节点C
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 将A、B与C做两次单旋，返回新的根结点C
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">// 将B与C做左单旋，C被返回
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singleRightRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">// 将A与C做右单旋，C被返回
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">singleLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意调整时，可能节点的位置不变，但是平衡因子需要更新。&lt;/p>
&lt;p>最后，我们来看一下平衡二叉树的插入，每一次的插入都要判断平衡是否被破坏，如果发现树的平衡被破坏，根据插入的位置做上面的四种旋转重新调整成平衡二叉树。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="cm">/* 将X插入AVL树T中，并且返回调整后的AVL树 */&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span> &lt;span class="cm">/* 若插入空树，则新建包含一个结点的树 */&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AVLTree&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="cm">/* if (插入空树) 结束 */&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="cm">/* 插入T的左子树 */&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="cm">/* 如果需要左旋 */&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singleLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="cm">/* 左单旋 */&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">doubleLeftRightRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="cm">/* 左-右双旋 */&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="cm">/* else if (插入左子树) 结束 */&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="cm">/* 插入T的右子树 */&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="cm">/* 如果需要右旋 */&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">singleRightRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="cm">/* 右单旋 */&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">doubleRightLeftRotation&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="cm">/* 右-左双旋 */&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="cm">/* else if (插入右子树) 结束 */&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="cm">/* else X == T-&amp;gt;Data，无须插入 */&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="cm">/* 别忘了更新树高 */&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">height&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">),&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考">参考&lt;/h2>
&lt;p>【1】浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p></description></item><item><title>Linux Shell Script 基础教程</title><link>https://ahamoment.cn/post/linux-bash-tutorials/</link><pubDate>Thu, 27 Aug 2020 16:03:59 +0800</pubDate><guid>https://ahamoment.cn/post/linux-bash-tutorials/</guid><description>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/20191206150655886.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/p>
&lt;blockquote>
&lt;p>本文翻译自&lt;a href="https://www.tutorialspoint.com/unix/unix-what-is-shell.htm">LEARN UNIX&lt;/a>，博主在原文的基础上添加了一些内容。如果没有Linux 机器，推荐使用该网站 &lt;strong>&lt;a href="https://www.tutorialspoint.com/execute_ksh_online.php">https://www.tutorialspoint.com/execute_ksh_online.php&lt;/a>&lt;/strong> 作为shell在线demo的环境。&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-shell-是什么">1. Shell 是什么&lt;/h2>
&lt;p>Shell为您提供了与Unix系统的接口。它收集您的输入，并根据该输入执行程序。程序完成执行后，将显示该程序的输出。
Shell 是可以运行我们的命令，程序，shell 脚本的环境。Shell 有不同的类型，每种Shell都有它自己的命令和功能。&lt;/p>
&lt;h3 id="11-shell-类型">1.1 Shell 类型&lt;/h3>
&lt;p>Linux 系统中，主要有两种类型的Shell：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>&lt;code>Bourne shell&lt;/code>&lt;/strong> - 如果使用Bourne类型的shell，默认的提示符就是&lt;code>$&lt;/code>，可以通过修改环境变量&lt;code>PS1&lt;/code>来更改你的提示符。&lt;/li>
&lt;li>&lt;strong>&lt;code>C shell&lt;/code>&lt;/strong> - C 类型的shell，默认的提示符是&lt;code>%&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>Bourne Shell&lt;/strong>&lt;/em> 又有下面几种类型：&lt;/p>
&lt;ul>
&lt;li>Bourne shell (sh)&lt;/li>
&lt;li>Korn shell (ksh)&lt;/li>
&lt;li>Bourne Again shell (bash)&lt;/li>
&lt;li>POSIX shell (sh)&lt;/li>
&lt;/ul>
&lt;p>&lt;em>&lt;strong>C 类型&lt;/strong>&lt;/em> 的Shell包括以下两种：&lt;/p>
&lt;ul>
&lt;li>C shell (csh)&lt;/li>
&lt;li>TENEX/TOPS C shell (tcsh)&lt;/li>
&lt;/ul>
&lt;p>在大多数 Linux 版本中，Bourne shell 通常都安装为&lt;code>/bin/sh&lt;/code>。由于这个原因，它是不同版本的Linux 的首选 Shell。在本文中，我们将介绍大多数基于Bourne Shell的Shell概念。&lt;/p>
&lt;h3 id="12-shell-脚本">1.2 Shell 脚本&lt;/h3>
&lt;p>&lt;strong>Shell脚本的基本概念是命令列表，按执行顺序列出命令。&lt;/strong>
Shell 脚本文件以 &lt;strong>.sh&lt;/strong> 结尾，例如 &lt;strong>test.sh&lt;/strong> 。Shell 脚本的内容以 &lt;strong>&lt;code>#!&lt;/code>&lt;/strong> 开头，告诉系统接下来的命令将会被 Bourne Shell 执行。我们来创建一个Shell脚本，并往脚本中添加一点注释，注释以 &lt;strong>&lt;code>#&lt;/code>&lt;/strong> 开头：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># Author: xueqiang.chen&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="c1"># Script follows here:&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">pwd&lt;/span>
&lt;span class="ln">6&lt;/span>ls
&lt;/code>&lt;/pre>&lt;/div>&lt;p>保存命令并执行脚本，可以看到以下输出内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ chmod +x test.sh
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>$ ./test.sh
&lt;span class="ln">4&lt;/span>/home/centos
&lt;span class="ln">5&lt;/span>go.sh test.sh
&lt;/code>&lt;/pre>&lt;/div>&lt;p>Shell 脚本可以有很复杂的结构，毕竟，shell是一种真正的编程语言，它包括变量，控制结构等。无论脚本变得多么复杂，它仍然只是顺序执行的命令的列表。&lt;/p>
&lt;h2 id="2-shell-变量">2. Shell 变量&lt;/h2>
&lt;p>变量是我们为其分配值的字符串，变量的值包括数字，文本，文件名，设备，或是任意的数据类型。变量只是实际数据的一个指针，我们可以创建，赋值，删除变量。&lt;/p>
&lt;h3 id="21-变量类型">2.1 变量类型&lt;/h3>
&lt;p>当Shell运行时，存在三种主要类型的变量：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>局部变量&lt;/strong>：局部变量是存在于Shell当前实例中的变量。它不适用于由 Shell 启动的程序。它们在命令提示符下设置。&lt;/li>
&lt;li>&lt;strong>环境变量&lt;/strong>：环境变量可用于Shell的任何子进程。某些程序需要环境变量才能正常运行。通常，shell脚本仅定义其运行的程序所需的那些环境变量。&lt;/li>
&lt;li>&lt;strong>Shell变量&lt;/strong>：Shell变量是Shell设置的特殊变量，shell要求Shell变量才能正常运行。这些变量中的一些是环境变量，而另一些是局部变量。&lt;/li>
&lt;/ul>
&lt;h3 id="22-变量名">2.2 变量名&lt;/h3>
&lt;p>变量名称只能包含字母（a到z或A到Z），数字（0到9）或下划线字符（_）。按照约定，Unix shell变量将以大写字母命名。
下面的例子是一些有效和无效的变量名：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1"># valid variable names&lt;/span>
&lt;span class="ln"> 4&lt;/span>_ALL
&lt;span class="ln"> 5&lt;/span>TOKEN_A
&lt;span class="ln"> 6&lt;/span>VAR_1
&lt;span class="ln"> 7&lt;/span>VAR_2
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="c1"># invaild variable names&lt;/span>
&lt;span class="ln">10&lt;/span>2_VAR
&lt;span class="ln">11&lt;/span>-VARIABLE
&lt;span class="ln">12&lt;/span>VAR1-VAR2
&lt;span class="ln">13&lt;/span>VAR_A!
&lt;span class="ln">14&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在shell 中，&lt;strong>&lt;code>!, *, -&lt;/code>&lt;/strong> 是含有特殊意义的，因此不能在变量名中使用。&lt;/p>
&lt;h3 id="23-定义变量">2.3 定义变量&lt;/h3>
&lt;p>变量的定义方式如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">variable_name&lt;/span>&lt;span class="o">=&lt;/span>variable_value
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;em>注意，&lt;strong>&lt;code>=&lt;/code>&lt;/strong> 号两边不能有空格。&lt;/em>&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Zara Ali&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这个例子中定义了一个变量，并给这个变量赋值，这种变量的类型称为&lt;strong>标量&lt;/strong>， 标量只一次只能有一个值。&lt;/p>
&lt;h3 id="24-使用变量">2.4 使用变量&lt;/h3>
&lt;p>Shell 中通过 &lt;strong>&lt;code>$&lt;/code>&lt;/strong> 符号获取变量的值。例如，下面的例子将获取变量&lt;code>NAME&lt;/code>的值并将其打印在标准输出中：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Zara Ali&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$NAME&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="25-只读变量">2.5 只读变量&lt;/h3>
&lt;p>Shell 允许通过 &lt;strong>&lt;code>readonly&lt;/code>&lt;/strong> 命令将一个变量变成只读变量。当变量成为只读变量后，它的值就不能更改了。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Zara Ali&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">readonly&lt;/span> NAME
&lt;span class="ln">5&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Qadiri&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的脚本会发生错误。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>/bin/sh: NAME: This variable is &lt;span class="nb">read&lt;/span> only.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="26-重置变量">2.6 重置变量&lt;/h3>
&lt;p>重置或删除变量将指示Shell程序从其跟踪的变量列表中删除该变量。重置变量后，将无法访问该变量中的存储值。
以下是使用 &lt;strong>&lt;code>unset&lt;/code>&lt;/strong> 命令取消定义的变量的语法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">unset&lt;/span> variable_name
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令重置定义的变量的值，下面的这个例子简单说明这个命令是如何工作的：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Zara Ali&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">unset&lt;/span> NAME
&lt;span class="ln">5&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="nv">$NAME&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子不会打印出任何内容，你可以使用 &lt;strong>&lt;code>unset&lt;/code>&lt;/strong> 命令来重置被标记为 &lt;strong>&lt;code>readonly&lt;/code>&lt;/strong> 的变量。&lt;/p>
&lt;h2 id="3-特殊变量">3. 特殊变量&lt;/h2>
&lt;p>在上一节中，我们了解了在变量名称中使用某些非字母数字字符时应注意的事项。这是因为这些字符用在特殊的Unix变量的名称中。这些变量保留用于特定功能。&lt;/p>
&lt;p>下面的表格列出了可以在我们的脚本中使用的特殊变量：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$0&lt;/code>&lt;/strong>&lt;/td>
&lt;td>当前脚本的文件名&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$n&lt;/code>&lt;/strong>&lt;/td>
&lt;td>这个变量对应于调用脚本的参数。其中参数 &lt;strong>n&lt;/strong> 是正整数，代表参数的位置。例如第一个参数就是 &lt;code>$1&lt;/code> ， 第二个参数就是 &lt;code>$2&lt;/code>， 以此类推。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$#&lt;/code>&lt;/strong>&lt;/td>
&lt;td>脚本参数的数量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$*&lt;/code>&lt;/strong>&lt;/td>
&lt;td>输出整个参数列表，将整个列表作为一个参数，且之间使用空格隔开。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$@&lt;/code>&lt;/strong>&lt;/td>
&lt;td>与&lt;code>$*&lt;/code> 的作用是一致的，不同的是该变量输出时会将参数列表分成单独的参数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$$&lt;/code>&lt;/strong>&lt;/td>
&lt;td>当前shell的进程号。对于Shell脚本，这是它们执行时的进程ID。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>$!&lt;/code>&lt;/strong>&lt;/td>
&lt;td>最后一个后台命令的进程号。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>以下脚本使用与命令行相关的各种特殊变量:&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;File Name: &lt;/span>&lt;span class="nv">$0&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;First Parameter : &lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Second Parameter : &lt;/span>&lt;span class="nv">$2&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Quoted Values: &lt;/span>&lt;span class="nv">$@&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Quoted Values: &lt;/span>&lt;span class="nv">$*&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Total Number of Parameters : &lt;/span>&lt;span class="nv">$#&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$./test.sh Zara Ali
&lt;span class="ln">2&lt;/span>File Name : ./test.sh
&lt;span class="ln">3&lt;/span>First Parameter : Zara
&lt;span class="ln">4&lt;/span>Second Parameter : Ali
&lt;span class="ln">5&lt;/span>Quoted Values: Zara Ali
&lt;span class="ln">6&lt;/span>Quoted Values: Zara Ali
&lt;span class="ln">7&lt;/span>Total Number of Parameters : &lt;span class="m">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="31-错误状态">3.1 错误状态&lt;/h3>
&lt;p>&lt;strong>&lt;code>$?&lt;/code>&lt;/strong> 变量表示上一个命令的退出状态。
退出状态是每个命令完成后返回的数值。通常，如果大多数命令成功，则返回退出状态0；如果不成功，则返回1。
某些命令出于特殊原因会返回其他退出状态。例如，某些命令区分错误的种类，并将根据故障的特定类型返回各种退出值。&lt;/p>
&lt;p>下面的这个例子返回的是成功命令的状态：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$./test.sh Zara Ali
&lt;span class="ln"> 2&lt;/span>File Name : ./test.sh
&lt;span class="ln"> 3&lt;/span>First Parameter : Zara
&lt;span class="ln"> 4&lt;/span>Second Parameter : Ali
&lt;span class="ln"> 5&lt;/span>Quoted Values: Zara Ali
&lt;span class="ln"> 6&lt;/span>Quoted Values: Zara Ali
&lt;span class="ln"> 7&lt;/span>Total Number of Parameters : &lt;span class="m">2&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">$echo&lt;/span> &lt;span class="nv">$?&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">11&lt;/span>$
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-数组">4. 数组&lt;/h2>
&lt;p>Shell变量足以容纳单个值。这些变量称为标量变量。&lt;/p>
&lt;p>Shell支持另一种类型的变量，称为&lt;strong>数组变量&lt;/strong>。它可以同时保存多个值。数组提供了一种对一组变量进行分组的方法。数组的命名参考变量的命名规则。&lt;/p>
&lt;h3 id="41-定义数组">4.1 定义数组&lt;/h3>
&lt;p>数组变量和标量变量之间的差异可以解释如下。
假设您尝试将各个学生的姓名表示为一组变量。每个单独的变量都是标量变量，如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="nv">NAME01&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Zara&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">NAME02&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Qadir&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nv">NAME03&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Mahnaz&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nv">NAME04&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Ayan&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nv">NAME05&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;Daisy&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们可以使用单个数组来存储所有上述名称。以下是创建数组变量的最简单方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>array_name&lt;span class="o">[&lt;/span>index&lt;span class="o">]=&lt;/span>value
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里 &lt;em>array_name&lt;/em> 是数组的名字，&lt;em>index&lt;/em> 是要设置的数组中的索引， &lt;em>value&lt;/em> 就是你要为该元素设置的值。如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>NAME&lt;span class="o">[&lt;/span>0&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Zara&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>NAME&lt;span class="o">[&lt;/span>1&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Qadir&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>NAME&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Mahnaz&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>NAME&lt;span class="o">[&lt;/span>3&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Ayan&amp;#34;&lt;/span>
&lt;span class="ln">7&lt;/span>NAME&lt;span class="o">[&lt;/span>4&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Daisy&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果使用的是 &lt;strong>bash shell&lt;/strong> ，也可以通过以下这种方法进行数组初始化：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nv">array_name&lt;/span>&lt;span class="o">=(&lt;/span>value1 ... valuen&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="42-使用数组">4.2 使用数组&lt;/h3>
&lt;p>为变量赋值之后，访问变量可以使用以下方式：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array_name&lt;/span>&lt;span class="p">[index]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里 &lt;em>array_name&lt;/em> 是数组名， &lt;em>index&lt;/em> 是要访问那个数组项的索引。具体的例子如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>NAME&lt;span class="o">[&lt;/span>0&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Zara&amp;#34;&lt;/span>
&lt;span class="ln"> 3&lt;/span>NAME&lt;span class="o">[&lt;/span>1&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Qadir&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span>NAME&lt;span class="o">[&lt;/span>2&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Mahnaz&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span>NAME&lt;span class="o">[&lt;/span>3&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Ayan&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span>NAME&lt;span class="o">[&lt;/span>4&lt;span class="o">]=&lt;/span>&lt;span class="s2">&amp;#34;Daisy&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;First Index: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="p">[0]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Second Index: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="p">[1]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;First Method: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="p">[*]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Second Method: &lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">NAME&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$./test.sh
&lt;span class="ln">2&lt;/span>First Index: Zara
&lt;span class="ln">3&lt;/span>Second Index: Qadir
&lt;span class="ln">4&lt;/span>First Method: Zara Qadir Mahnaz Ayan Daisy
&lt;span class="ln">5&lt;/span>Second Method: Zara Qadir Mahnaz Ayan Daisy
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的示例中通过 &lt;strong>&lt;code>*&lt;/code>&lt;/strong> 和 &lt;strong>&lt;code>@&lt;/code>&lt;/strong> 来获取整个数组的值。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array_name&lt;/span>&lt;span class="p">[*]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">array_name&lt;/span>&lt;span class="p">[@]&lt;/span>&lt;span class="si">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="5-运算符">5. 运算符&lt;/h2>
&lt;p>每个Shell都支持不同的运算符，这里我们主要讨论的是 bash shell 的运算符。&lt;/p>
&lt;h3 id="51-算术运算符">5.1 算术运算符&lt;/h3>
&lt;p>&lt;strong>Bourne shell&lt;/strong> 最初没有任何执行简单算术运算的机制，它使用 &lt;em>awk&lt;/em> 或 &lt;em>expr&lt;/em> 来进行计算。如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nv">val&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="m">2&lt;/span> + 2&lt;span class="sb">`&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;Total value : &lt;/span>&lt;span class="nv">$val&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>Total value : &lt;span class="m">4&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的例子我们需要注意的有两点：&lt;/p>
&lt;ul>
&lt;li>表达式和运算符之间必须用空格隔开，例如 &lt;code>2+2&lt;/code> 是错误的，应该写成 &lt;code>2 + 2&lt;/code>&lt;/li>
&lt;li>整个表达式要用反引号 `` 来包起来。&lt;/li>
&lt;/ul>
&lt;p>假设变量 &lt;strong>a&lt;/strong> 等于 10， 变量 &lt;strong>b&lt;/strong> 等于 20， 我们来看一下 &lt;strong>bash shell&lt;/strong> 支持的算术运算符是如何计算这两个值得：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>+&lt;/strong>&lt;/td>
&lt;td>&lt;code>expr $a + $b&lt;/code> = 30&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-&lt;/strong>&lt;/td>
&lt;td>&lt;code>expr $a - $b&lt;/code> = -10&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>&lt;code>*&lt;/code>&lt;/strong>&lt;/td>
&lt;td>&lt;code>expr $a \* $b&lt;/code> = 200&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>/&lt;/strong>&lt;/td>
&lt;td>&lt;code>expr $b / $a&lt;/code> = 2&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>%&lt;/strong>&lt;/td>
&lt;td>&lt;code>expr $b % $a&lt;/code> = 0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>=&lt;/strong>&lt;/td>
&lt;td>&lt;code>a = $b&lt;/code> 将b的值赋给a&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>==&lt;/strong>&lt;/td>
&lt;td>&lt;code>[ $a == $b ]&lt;/code> 将会返回 false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>！=&lt;/strong>&lt;/td>
&lt;td>&lt;code>[ $a != $b ]&lt;/code>将会返回 true&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>注意：&lt;code>[ $a == $b ]&lt;/code> 不能写成&lt;code> [$a==$b]&lt;/code>。&lt;/em>&lt;/p>
&lt;h3 id="52-关系运算符">5.2 关系运算符&lt;/h3>
&lt;p>Bash 支持以下特定于数值的关系运算符。
假设变量a = 10，变量b = 20,&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>例子&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>-eq&lt;/strong>&lt;/td>
&lt;td>检查运算符两边的值是否相等，相等返回 true&lt;/td>
&lt;td>&lt;code>[ $a -eq $b ] is not true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-ne&lt;/strong>&lt;/td>
&lt;td>检查运算符两边的值是否相等，不相等返回 true&lt;/td>
&lt;td>&lt;code>[ $a -ne $b ] is true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-gt&lt;/strong>&lt;/td>
&lt;td>&lt;strong>gt&lt;/strong> 是 &lt;strong>greater than&lt;/strong> 的缩写，检查运算符左边的值是否大于右边，是的话返回 true&lt;/td>
&lt;td>&lt;code>[ $a -gt $b ] is not true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-lt&lt;/strong>&lt;/td>
&lt;td>&lt;strong>lt&lt;/strong> 是 &lt;strong>less than&lt;/strong> 的缩写，检查运算符左边的值是否小于右边，是的话返回true&lt;/td>
&lt;td>&lt;code>[ $a -lt $b ] is true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-ge&lt;/strong>&lt;/td>
&lt;td>&lt;strong>ge&lt;/strong> 是 &lt;strong>greater than or equal&lt;/strong> 的缩写，检查运算符左边的值是否大于或等于右边的值，是的话返回true&lt;/td>
&lt;td>&lt;code>[ $a -ge $b ] is not true&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-le&lt;/strong>&lt;/td>
&lt;td>&lt;strong>le&lt;/strong> 是 &lt;strong>less than or equal&lt;/strong> 的缩写，检查运算符左边的值是否小于或等于右边的值，是的话返回true&lt;/td>
&lt;td>&lt;code>[ $a -le $b ] is true&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;em>注意：所有条件表达式应放在方括号内并在其周围留有空格。&lt;/em>&lt;/p>
&lt;h3 id="53-布尔运算符">5.3 布尔运算符&lt;/h3>
&lt;p>Bash 支持以下布尔运算符。假设变量 &lt;strong>a&lt;/strong> 的值是 10， 变量 &lt;strong>b&lt;/strong> 的值是20：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>！&lt;/strong>&lt;/td>
&lt;td>逻辑否。这会将真实条件转换为错误条件，反之亦然。&lt;/td>
&lt;td>&lt;code>[ ! false ] is true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-o&lt;/strong>&lt;/td>
&lt;td>逻辑或。如果运算符两边之一为真，则条件为真。&lt;/td>
&lt;td>&lt;code>[ $a -lt 20 -o $b -gt 100 ] is true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-a&lt;/strong>&lt;/td>
&lt;td>逻辑与。如果运算符两边都是真的，则条件为真。&lt;/td>
&lt;td>&lt;code>[ $a -lt 20 -a $b -gt 100 ] is false.&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="54-字符串运算符">5.4 字符串运算符&lt;/h3>
&lt;p>Bash 运算符支持以下操作。
假设变量 &lt;strong>a&lt;/strong> 的值为 &amp;quot;abc&amp;quot;，变量&lt;strong>b&lt;/strong>的值为 &amp;quot;efg&amp;quot;：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>运算符&lt;/th>
&lt;th>描述&lt;/th>
&lt;th>示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>=&lt;/strong>&lt;/td>
&lt;td>检查运算符两边的值是否相等；如果是，则条件变为真。&lt;/td>
&lt;td>&lt;code>[ $a = $b ] is not true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>!=&lt;/strong>&lt;/td>
&lt;td>检查运算符两边的值是否相等；如果值不相等，则条件为真&lt;/td>
&lt;td>&lt;code>[ $a != $b ] is true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-z&lt;/strong>&lt;/td>
&lt;td>检查给定的字符串操作数大小是否为零；如果长度为零，则返回true。&lt;/td>
&lt;td>&lt;code>[ -z $a ] is not true.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>-n&lt;/strong>&lt;/td>
&lt;td>检查给定的字符串操作数大小是否为非零；如果长度非零，则返回true。&lt;/td>
&lt;td>&lt;code>[ -n $a ] is not false.&lt;/code>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>str&lt;/strong>&lt;/td>
&lt;td>Checks if str is not the empty string; if it is empty, then it returns false.&lt;/td>
&lt;td>&lt;code>[ $a ] is not false.&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="55-文件测试运算符">5.5 文件测试运算符&lt;/h3>
&lt;p>我们有一些运算符可用于测试与文件相关的各种属性。
假设有个文件变量 &lt;strong>file&lt;/strong> 的值为一个存在的名为 &amp;quot;test&amp;quot; 的文件，该文件的大小为100bytes，并且有读写和执行的权限。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align:left">运算符&lt;/th>
&lt;th style="text-align:center">描述&lt;/th>
&lt;th style="text-align:right">示例&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-b file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检查文件是否是一个块文件，如果是就返回true。&lt;/td>
&lt;td style="text-align:right">[ -b $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-c file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否是字符设备文件，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -c $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-d file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否是目录，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -d $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-f file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否是普通文件（既不是目录，也不是设备文件），如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -f $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-g file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否设置了 SGID 位，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -g $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-k file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否设置了粘着位(Sticky Bit)，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -k $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-p file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否是有名管道，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -p $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-t file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检查文件描述符是否打开并与终端关联；如果是，则条件变为真。&lt;/td>
&lt;td style="text-align:right">[ -t $file ] is false.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-u file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否设置了 SUID 位，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -u $file ] 返回 false。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-r file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否可读，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -r $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-w file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否可写，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -w $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-x file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否可执行，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -x $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-s file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件是否为空（文件大小是否大于0），不为空返回 true。&lt;/td>
&lt;td style="text-align:right">[ -s $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align:left">&lt;strong>-e file&lt;/strong>&lt;/td>
&lt;td style="text-align:center">检测文件（包括目录）是否存在，如果是，则返回 true。&lt;/td>
&lt;td style="text-align:right">[ -e $file ] 返回 true。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="56-其他shell的运算符">5.6 其他shell的运算符&lt;/h3>
&lt;ul>
&lt;li>C Shell 运算符：&lt;a href="https://www.tutorialspoint.com/unix/unix-c-shell-operators.htm">C Shell Operators&lt;/a>&lt;/li>
&lt;li>Korn Shell 运算符：&lt;a href="https://www.tutorialspoint.com/unix/unix-korn-shell-operators.htm">Korn Shell Operators&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="6-条件表达式">6. 条件表达式&lt;/h2>
&lt;p>在编写shell脚本时，可能需要从给定的两个路径中采用一个路径。因此，您需要使用条件语句，这些条件语句允许您的程序做出正确的决定并执行正确的操作。&lt;/p>
&lt;h2 id="7-循环">7. 循环&lt;/h2>
&lt;p>循环是功能强大的编程工具，使您能够重复执行一组命令。在本章中，我们将研究以下可供Shell程序员使用的循环类型-&lt;/p>
&lt;ul>
&lt;li>while 循环&lt;/li>
&lt;li>for 循环&lt;/li>
&lt;li>until 循环&lt;/li>
&lt;li>select 循环&lt;/li>
&lt;/ul>
&lt;p>您将根据情况使用不同的循环。&lt;/p>
&lt;h3 id="71-嵌套循环">7.1 嵌套循环&lt;/h3>
&lt;p>所有循环都支持嵌套概念，这意味着您可以将一个循环放入另一个类似的或不同的循环中。根据您的要求，此嵌套最多可以无限次。&lt;/p>
&lt;p>这是嵌套while循环的示例。其他循环可以根据编程要求以类似的方式嵌套-&lt;/p>
&lt;p>可以将while循环用作另一个while循环主体的一部分。
语法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="k">while&lt;/span> command1 &lt;span class="p">;&lt;/span> &lt;span class="c1"># this is loop1, the outer loop&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln"> 3&lt;/span> Statement&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> to be executed &lt;span class="k">if&lt;/span> command1 is &lt;span class="nb">true&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">while&lt;/span> command2 &lt;span class="p">;&lt;/span> &lt;span class="c1"># this is loop2, the inner loop&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln"> 7&lt;/span> Statement&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> to be executed &lt;span class="k">if&lt;/span> command2 is &lt;span class="nb">true&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> Statement&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> to be executed &lt;span class="k">if&lt;/span> command1 is &lt;span class="nb">true&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>示例：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/sh
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -lt &lt;span class="m">10&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="c1"># this is loop1&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="k">do&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$a&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$b&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> -ge &lt;span class="m">0&lt;/span> &lt;span class="o">]&lt;/span> &lt;span class="c1"># this is loop2&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">do&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">echo&lt;/span> -n &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$b&lt;/span>&lt;span class="s2"> &amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nv">b&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="nv">$b&lt;/span> - 1&lt;span class="sb">`&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">done&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nb">echo&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="nv">a&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>expr &lt;span class="nv">$a&lt;/span> + 1&lt;span class="sb">`&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="m">6&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="m">7&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="m">8&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="m">9&lt;/span> &lt;span class="m">8&lt;/span> &lt;span class="m">7&lt;/span> &lt;span class="m">6&lt;/span> &lt;span class="m">5&lt;/span> &lt;span class="m">4&lt;/span> &lt;span class="m">3&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="m">0&lt;/span>
&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>二叉搜索树</title><link>https://ahamoment.cn/post/algorithm-binary-search-tree/</link><pubDate>Wed, 19 Aug 2020 17:05:29 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-binary-search-tree/</guid><description>
&lt;h2 id="1-二叉搜索树的概念">1. 二叉搜索树的概念&lt;/h2>
&lt;p>二叉搜索树，也称为二叉排序树或二叉查找树。一棵不为空的二叉搜索树满足以下性质：&lt;/p>
&lt;ol>
&lt;li>非空左子树的所有键值小于其根结点的键值。&lt;/li>
&lt;li>非空右子树的所有键值大于其根结点的键值。&lt;/li>
&lt;li>左，右子树都是二叉搜索树。&lt;/li>
&lt;/ol>
&lt;h2 id="2-二叉搜索树的查找">2. 二叉搜索树的查找&lt;/h2>
&lt;p>从二叉搜索树BST中查找元素X，返回其所在结点的地址。二叉搜索树的查找过程可以描述为以下步骤：&lt;/p>
&lt;ol>
&lt;li>查找从根结点开始，如果树为空，直接返回 null&lt;/li>
&lt;li>若查找树非空，则根结点关键字与 X 进行比较，并进行不同的处理。
&lt;ol>
&lt;li>x 小于根结点的键值，在左子树中搜索；&lt;/li>
&lt;li>x 大于根结点的键值，在右子树中搜索；&lt;/li>
&lt;li>若两者比较的结果相等，搜索完成，直接返回指向结点的指针。&lt;/li>
&lt;/ol>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200820101124146.png" alt="image-20200820101124146">&lt;/p>
&lt;p>我们用递归来实现查找过程，&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;树为空，查找失败！&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//查找失败
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// x 大于根结点的值，向右子树递归查找
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// x 小于根结点的值，向左子树递归查找
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">find&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">// 找到 x 的值，直接返回结点所在的指针
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在这个递归实现中，两个递归过程都是尾递归，可以改成用迭代函数来实现，提高执行效率。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findNonRecursive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">// 向右子树中移动，继续查找
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// 向左子树中移动，继续查找
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// x == bst.data
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 查找成功，返回结点的找到结点的地址
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">// 查找失败
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>除了通用的查找外，二叉搜索树经常要使用到最大和最小元素的查找。对于一棵二叉搜索树来说，最大元素一定是在树的最右分支的端结点上，最小元素一定是在树的最左分支的端结点上。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200827114732562.png" alt="image-20200827114732562">&lt;/p>
&lt;p>最大元素和最小元素的递归和非递归实现为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// 查找树的最小值
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findMin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">// 空的二叉搜索树，返回NULL
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">// 找到最左叶结点并返回
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="c1">// 沿左分支继续查找
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">findMin&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="c1">// 查找树的最大值
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findMax&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1">// 空的二叉搜索树
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">// 找到最右的叶结点并返回
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 沿右分支继续查找
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">findMax&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="c1">// 最小值非递归实现
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findMinNonRecursive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="c1">// 沿左分支继续查找，直到最右叶结点
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">37&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="c1">// 查找最大值非递归实现
&lt;/span>&lt;span class="ln">42&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">findMaxNonRecursive&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="c1">// 沿右分支继续查找，直到最右叶结点
&lt;/span>&lt;span class="ln">46&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">49&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">51&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="3-二叉搜索树的插入">3. 二叉搜索树的插入&lt;/h2>
&lt;p>插入指定结点到一棵二叉树中，这个过程我们关键要找到这个结点要插入的位置，可以采用与查找类似的方法。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// 插入操作
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">// 若原树为空，生成并返回一个结点的二叉搜索树
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 开始查找要插入元素的位置
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">compareTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// 递归插入左子树
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">result&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">// 递归插入右子树
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">insert&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="cm">/*else {
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="cm"> // x 元素已经存在, 不做任何操作
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="cm"> //
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="cm"> }*/&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">bst&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过递归左右子树，找到要插入的位置，然后插入结点。&lt;/p>
&lt;h2 id="4-二叉搜索树的删除">4. 二叉搜索树的删除&lt;/h2>
&lt;p>删除一棵二叉树，分为三种情况，分别来分析一下：&lt;/p>
&lt;p>第一种，要删除的结点是树的叶子结点，那么可以直接删除，并修改其父结点的指针为 null，例如，删除下面这棵二叉搜索树 35 这个结点：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200831180447446.png" alt="image-20200831180447446">&lt;/p>
&lt;p>第二种，要删除的结点有一个孩子结点，那么删除该结点后，要修改其父结点的指针到要删除结点的孩子结点上。例如，删除下面这棵二叉搜索树的33结点。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200831180648814.png" alt="image-20200831180648814">&lt;/p>
&lt;p>第三种，要删除的结点有左、右两个子树，用另一结点替代被删除结点：右子树的最小元素或者左子树的最大元素。例如，删除41 这个结点的时候。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200831180831521.png" alt="image-20200831180831521">&lt;/p>
&lt;p>实现如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln"> 1&lt;/span>public TreeNode&amp;lt;T&amp;gt; delete(T x, TreeNode&amp;lt;T&amp;gt; bst) {
&lt;span class="ln"> 2&lt;/span> TreeNode&amp;lt;T&amp;gt; tmp;
&lt;span class="ln"> 3&lt;/span> if (bst == null) {
&lt;span class="ln"> 4&lt;/span> System.out.println(&amp;#34;树为空，要删除的元素未找到！&amp;#34;);
&lt;span class="ln"> 5&lt;/span> return null;
&lt;span class="ln"> 6&lt;/span> } else if (x.compareTo(bst.data) &amp;lt; 0) { //左子树递归删除
&lt;span class="ln"> 7&lt;/span> bst.left = delete(x, bst.left);
&lt;span class="ln"> 8&lt;/span> } else if (x.compareTo(bst.data) &amp;gt; 0) {
&lt;span class="ln"> 9&lt;/span> bst.right = delete(x, bst.right); //右子树递归删除
&lt;span class="ln">10&lt;/span> } else { //找到要删除的节点
&lt;span class="ln">11&lt;/span> if (bst.left != null &amp;amp;&amp;amp; bst.right != null) { //被删除结点有左右两个子结点
&lt;span class="ln">12&lt;/span> tmp = findMin(bst.right);
&lt;span class="ln">13&lt;/span> // 在右子树中找最小的元素填充删除结点
&lt;span class="ln">14&lt;/span> bst.data = tmp.data;
&lt;span class="ln">15&lt;/span> bst.right = delete(bst.data, bst.right);
&lt;span class="ln">16&lt;/span> } else { // 被删除结点有一个或无子结点
&lt;span class="ln">17&lt;/span> if (bst.left == null) {
&lt;span class="ln">18&lt;/span> // 有右孩子或无子结点
&lt;span class="ln">19&lt;/span> bst = bst.right;
&lt;span class="ln">20&lt;/span> } else if (bst.right == null) {
&lt;span class="ln">21&lt;/span> bst = bst.left;
&lt;span class="ln">22&lt;/span> }
&lt;span class="ln">23&lt;/span> }
&lt;span class="ln">24&lt;/span> }
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> return bst;
&lt;span class="ln">27&lt;/span>}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>题目：是否是同一棵二叉搜索树&lt;/p>
&lt;p>给定一个插入序列就可以唯一确定一棵二叉搜索树。然后，给定一棵二叉搜索树可以由多种不同的插入序列得到。&lt;/p>
&lt;p>例如，按照序列(2,1,3)和（2，3，1）插入初始为空的二叉搜索树，得到一样的结果。&lt;/p>
&lt;p>问题：对于输入的各种插入序列，你需要判断他们是否能生成一样的二叉搜索树。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;p>【1】浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p></description></item><item><title>二叉树及存储结构</title><link>https://ahamoment.cn/post/algorithm-binary-tree/</link><pubDate>Tue, 11 Aug 2020 10:40:08 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-binary-tree/</guid><description>
&lt;p>摘要：二叉树的定义，遍历二叉树&lt;/p>
&lt;h2 id="1-二叉树的定义">1. 二叉树的定义&lt;/h2>
&lt;blockquote>
&lt;p>二叉树：一个有穷的结点集合。这个集合可以为空，若不为空，则它是由根结点和称为其左子树 T&lt;sub>L&lt;/sub> 和右子树 T&lt;sub>R&lt;/sub> 的两个不想交的二叉树组成。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>
&lt;p>二叉树具体五种基本形态&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811104404571.png" alt="image-20200811104404571">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>二叉树的子树有左右顺序之分&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811104443804.png" alt="image-20200811104443804">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="特殊二叉树">特殊二叉树&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>斜二叉树（Skewed Binary Tree）&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811104827529.png" alt="image-20200811104827529">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完美二叉树（Perfect Binary Tree），又称为满二叉树（Full Binary Tree）&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811104932580.png" alt="image-20200811104932580">&lt;/p>
&lt;p>一棵完美二叉树所有的结点都有左右两个子结点。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>完全二叉树（Complete Binary Tree）&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811105230817.png" alt="image-20200811105230817">&lt;/p>
&lt;p>完全二叉树的最后一层可以却是部分结点，例如右半部分缺失了12-15号结点，但是这样的二叉树不是完全二叉树：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811105352607.png" alt="image-20200811105352607">&lt;/p>
&lt;h2 id="2-二叉树的几个重要性质">2. 二叉树的几个重要性质&lt;/h2>
&lt;ol>
&lt;li>
&lt;p>一个二叉树第 i 层的最大结点数为：$2^{i-1},i\geq1$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>深度为 K 的二叉树有最大结点总数为：$2^{k}-1, k\geq1$&lt;/p>
&lt;/li>
&lt;li>
&lt;p>对任何非空的二叉树 T， 若 $n_0$ 表示叶结点的个数，$n_2$ 是度为2的非叶结点个数，那么两者满足关系 $n_0=n_2+1$&lt;/p>
&lt;p>这个关系很容易可以推导出来，从边的角度出发，我们知道每个二叉树的边是确定的，从最后一层往上看，除根结点外，每个结点都有一条边和上一个结点连接，总的边数为: $n_0+n_1+n_2-1$；从根结点往下，度为2的结点对有两条边跟其他结点连接，度为1的结点为一条，叶结点为0条，即：$2n_2+n_1+0n_0$。 这两个式子相等：
$$
n_0+n_1+n_2-1=2n_2+n_1
$$
化简后就可以得到上面那个式子。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="3-二叉树的抽象数据类型定义">3. 二叉树的抽象数据类型定义&lt;/h2>
&lt;p>二叉树的结构由数据，左子树，右子树组成，操作集包括：判空，遍历，创建一个二叉树。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="cm">/**
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cm"> * 二叉树树节点定义
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="cm"> * @param &amp;lt;T&amp;gt;
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//节点数据
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//指向左子树
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//指向右子树
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">TreeNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">TreeNode&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Tree&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">24&lt;/span>&lt;span class="cm"> * 判别二叉树是否为空
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="cm"> * @param treeNode
&lt;/span>&lt;span class="ln">26&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">treeNode&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">31&lt;/span>&lt;span class="cm"> * 遍历，按某顺序访问每个结点
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="cm"> * 遍历方法有四种：
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="cm"> * 1. 先序遍历：preOrderTraversal
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="cm"> * 2. 中序遍历：inOrderTraversal
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="cm"> * 3. 后序遍历：postOrderTraversal
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="cm"> * 4. 层次遍历：levelOrderTraversal
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="cm"> * @param treeNode
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">traversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">treeNode&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">42&lt;/span>&lt;span class="cm"> * 创建一个二叉树
&lt;/span>&lt;span class="ln">43&lt;/span>&lt;span class="cm"> * @return
&lt;/span>&lt;span class="ln">44&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">createBinTree&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>其中，最重要的就是二叉树的遍历，包括先序，中序，后序和层次遍历四种，后面我们会详细讲一下。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h2 id="4-二叉树的存储结构">4. 二叉树的存储结构&lt;/h2>
&lt;h3 id="41-顺序存储结构">4.1 顺序存储结构&lt;/h3>
&lt;p>二叉树可以采用顺序存储结构来存储，对于一棵完全二叉树来说，按照从上到下，从左到右的顺序存储 n 个结点的完全二叉树的结点父子关系：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811112438176.png" alt="image-20200811112438176">&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811112453094.png" alt="image-20200811112453094">&lt;/p>
&lt;ul>
&lt;li>非根结点的父结点的序号是 $i/2$ 向下取整的值&lt;/li>
&lt;li>结点的左孩子结点的序号是 $2i$，（若$2i\leq n$，否则没有左孩子 ）&lt;/li>
&lt;li>结点的右孩子的序号为$2i+1$，（若 $2i+1 \leq n$, 否则没有右孩子）&lt;/li>
&lt;/ul>
&lt;p>一般的二叉树也可以采用这种结构，但是需要补充空的结点，会造成空间浪费。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811112833149.png" alt="image-20200811112833149">&lt;/p>
&lt;h3 id="42-链表存储">4.2. 链表存储&lt;/h3>
&lt;p>链表的存储结构，我们在前面已经展示过，这里不再过多赘述。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811112958981.png" alt="image-20200811112958981">&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811113009904.png" alt="image-20200811113009904">&lt;/p>
&lt;h2 id="5-二叉树的遍历">5. 二叉树的遍历&lt;/h2>
&lt;p>二叉树的遍历方式一共有四种，分别是：先序遍历，中序遍历，后序遍历和层序遍历。其中先序，中序和后序遍历的实现方式又有两种，分别是递归和非递归。下面，我们就来详细的介绍一下：&lt;/p>
&lt;h3 id="51-递归实现">5.1 递归实现&lt;/h3>
&lt;h5 id="511-先序遍历">5.1.1 先序遍历&lt;/h5>
&lt;p>先序遍历的过程可以描述为：&lt;/p>
&lt;ol>
&lt;li>访问根结点&lt;/li>
&lt;li>先序遍历其左子树&lt;/li>
&lt;li>先序遍历其右子树&lt;/li>
&lt;/ol>
&lt;p>例如，我们有这样一棵树：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200812202856032.png" alt="image-20200812202856032">&lt;/p>
&lt;p>按照先序遍历的顺序将结点打印出来，依此是：A B D F E C G H I，程序描述为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">preOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">preOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">preOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="512-中序遍历">5.1.2 中序遍历&lt;/h5>
&lt;p>中序遍历的过程可以描述为：&lt;/p>
&lt;ol>
&lt;li>中序遍历其左子树&lt;/li>
&lt;li>访问根结点&lt;/li>
&lt;li>中序遍历其右子树&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200812203317277.png" alt="image-20200812203317277">&lt;/p>
&lt;p>按照中序遍历的方式将上面这棵树的结果输出，依次是：D B E F A G H C I ,使用程序描述为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">inOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="n">inOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="n">inOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h5 id="513-后序遍历">5.1.3 后序遍历&lt;/h5>
&lt;p>后序遍历的过程为：&lt;/p>
&lt;ol>
&lt;li>后序遍历其左子树&lt;/li>
&lt;li>后序遍历其右子树&lt;/li>
&lt;li>访问根结点&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200812203613025.png" alt="image-20200812203613025">&lt;/p>
&lt;p>按照后序遍历的方式将上面这棵树的结点输出，依此是：D E F B H G I C A&lt;/p>
&lt;h3 id="52-非递归实现">5.2 非递归实现&lt;/h3>
&lt;p>递归的本质是利用堆栈来做的，那么我们直接使用堆栈来实现上面的三种方式。&lt;/p>
&lt;p>先从中序遍历开始，中序遍历的非递归实现过程可以描述为以下几个步骤：&lt;/p>
&lt;ol>
&lt;li>
&lt;p>遇到一个结点，就把它压栈，并去遍历它的左子树；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>当左子树遍历结束后，从栈顶弹出这个结点并访问它；&lt;/p>
&lt;/li>
&lt;li>
&lt;p>然后按其右指针再去中序遍历该结点的右子树。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200813091042459.png" alt="image-20200813091042459">&lt;/p>
&lt;p>对于上面的这样一棵树，我们按照中序遍历的过程操作堆栈：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/inorder.png" alt="">&lt;/p>
&lt;p>入栈和出栈的过程如上图所示。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">nonRecursiveInOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">// 一直向左并将沿途结点压入堆栈
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// 结点弹出堆栈
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">pop&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">// 访问结点
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">// 转向右子树
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>先序遍历的过程跟中序遍历类似，只需要在第一次遍历到结点的时候把结点的值打印出来即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">nonRecursivePreOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">// 一直向左并将沿途结点压入堆栈
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="c1">// 访问结点
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="c1">// 结点弹出堆栈
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">pop&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="c1">// 转向右子树
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>后序遍历的方式略有不同， 后序遍历应该把数据两次压入堆栈，第二次pop出来再 print 鉴于没有记录访问次数的结构，第二次pop的时候要么右节点是空的，要么右节点刚刚被print。所以，需要另一个指针pt来记录被刚刚print的节点。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">nonRecursivepostOrderTraversal&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">pt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">stack&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Stack&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="c1">// 结点弹出堆栈
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">pop&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)||(&lt;/span>&lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">pt&lt;/span>&lt;span class="o">))&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//判断右节点为空或者右节点已经输出
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">pt&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//记录下上一个被输出的
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">stack&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">push&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">stack&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//第二次入栈（相当于T没有出栈）
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">tmpTree&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">tmpTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//转向右子树
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="53-层序遍历">5.3 层序遍历&lt;/h3>
&lt;p>层序遍历即将树从上到下，从左到右输出，例如下面这样的一棵树，按照层序遍历输出的结果为：A B C D F G I E H.&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200813203404840.png" alt="image-20200813203404840">&lt;/p>
&lt;p>层序遍历可以通过队列来实现，遍历从根结点开始，首先将根结点入队，然后开始执行循环：结点入队，访问该结点、其左右儿子入队。&lt;/p>
&lt;p>层序基本过程：先根结点入队，然后：&lt;/p>
&lt;ol>
&lt;li>从队列中取出一个元素；&lt;/li>
&lt;li>访问该元素所指的结点；&lt;/li>
&lt;li>若该元素所指结点的左、右孩子结点非空，则将其左、右孩子的指针顺序入队。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">levelOrderTraveral&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">SeqQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&amp;gt;&lt;/span> &lt;span class="n">queue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SeqQueue&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">20&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">t&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">// 若是空树则直接返回
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">t&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">delete&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//访问取出队列中的结点
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>&lt;span class="c1">//左结点不为空，则左节点入队
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">queue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">t&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//右节点不为空，则右节点入队
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="6-二叉树应用的例子">6. 二叉树应用的例子&lt;/h2>
&lt;blockquote>
&lt;p>例：输出二叉树中的叶子结点&lt;/p>
&lt;/blockquote>
&lt;p>在二叉树的遍历算法中增加检测结点的判断：左右子树是否都为空&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">preOrderPrintLeaves&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//叶子结点的左右都为空
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">print&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">preOrderPrintLeaves&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">preOrderPrintLeaves&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>求二叉树的高度&lt;/p>
&lt;/blockquote>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200814092320757.png" alt="image-20200814092320757">&lt;/p>
&lt;p>二叉树的高度是左子树和右子树两者中最大的一个再加上根结点的高度1.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">TreeNode&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">binTree&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">hl&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hr&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">maxH&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">hl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">left&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//求左子树的高度
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">hr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">postOrderGetHight&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">binTree&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">right&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//求右子树的高度
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">maxH&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Math&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">max&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">hl&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">hr&lt;/span>&lt;span class="o">);&lt;/span> &lt;span class="c1">//取左右子树较大的深度
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">maxH&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>由两种遍历序列确定二叉树，已知三种遍历中的任意两种遍历序列，能否唯一确定一棵二叉树呢？&lt;/p>
&lt;/blockquote>
&lt;p>答案是：必须要有中序遍历才行。&lt;/p>
&lt;p>假如没有中序遍历，来看个例子：先序：A B，后序：B A，就会出现两种不同的结构。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200814093448865.png" alt="image-20200814093448865">&lt;/p>
&lt;p>在知道中序的情况下，可以利用中序序列分割出左右两个子序列。&lt;/p>
&lt;blockquote>
&lt;p>参考：浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>树的定义及表示</title><link>https://ahamoment.cn/post/algorithm-tree/</link><pubDate>Tue, 11 Aug 2020 10:31:07 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-tree/</guid><description>
&lt;p>这一部分主要介绍一下数据结构中很重要的一个概念：树。那么什么是树呢？在说明这个概念之前，我们先来看看和它相关的一些内容。&lt;/p>
&lt;h2 id="1-查找">1. 查找&lt;/h2>
&lt;p>查找是根据某个给定关键字&lt;strong>K&lt;/strong> ，从集合R中找出关键字与K相同的记录。查找又分为静态查找和动态查找，静态查找的集合中记录是固定的，没有插入和删除操作，只有查找，而动态查找的集合中记录是动态变化的，除了查找外，还可能发生插入和删除操作。&lt;/p>
&lt;h3 id="11-静态查找">1.1 静态查找&lt;/h3>
&lt;h4 id="方法一顺序查找">方法一：顺序查找&lt;/h4>
&lt;p>顺序查找就是从数组中一个一个地找，直到找到我们想要的元素为止。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/%E9%A1%BA%E5%BA%8F%E6%9F%A5%E6%89%BE.png" alt="">&lt;/p>
&lt;p>如图所示，在长度为8的数组中查找元素K，如果我们从最后一个元素找起来，查找成功就返回所在单元下表，不成功返回0。查找过程中，在第一个几点建立哨兵，哨兵的作用可以让程序知道什么时候应该停下来，同时可以少些一个判断条件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">sequentialSearch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">// 建立哨兵
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--)&lt;/span> &lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">// 查找成功返回所在单元下标，不成功返回0
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">Search&lt;/span> &lt;span class="n">search&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Search&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">array&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">9&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">7&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">result&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">search&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sequentialSearch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">array&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">target&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;search for &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">target&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; in array is &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">result&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="方法二二分查找binary-search">方法二：二分查找(Binary Search)&lt;/h4>
&lt;p>二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。 但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。&lt;/p>
&lt;p>注意，二分查找的前提是连续存放（数组）是有序的。&lt;/p>
&lt;p>二分查找示例：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/binserach.png" alt="">&lt;/p>
&lt;p>在一个按从小到大排序的数组中查找 &lt;code>444&lt;/code> 这个元素，用三个指针分别代表左边，右边和中间，每次查找都将中间为止的值和目标值对比，若大于目标值，则在左半部分做二分查找，若小于目标值，则在右半部分做二分查找。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">binarySearch&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">k&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="cm">/*在表Tbl中查找关键字为K的数据元素*/&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">left&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">NoFound&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*初始左边界*/&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*初始右边界*/&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">left&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">right&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">2&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*计算中间元素坐标*/&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">right&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*调整右边界*/&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">k&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">array&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">mid&lt;/span>&lt;span class="o">])&lt;/span> &lt;span class="n">left&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">mid&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*调整左边界*/&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">mid&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*查找成功，返回数据元素的下标*/&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">NoFound&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="cm">/*查找不成功，返回-1*/&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>二分查找的时间复杂度为&lt;code>O(logN)&lt;/code>&lt;/strong>&lt;/p>
&lt;p>二分查找是一种效率比较高的查找算法，整个二分查找的过程可以描述为以下的这种树形结构：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/binsearchtree.png" alt="">&lt;/p>
&lt;p>结点表示的是数组的下标，这样的结构称为二分查找判定树，判定树上每个结点需要的查找次数刚好为该结点所在的层数。反过来讲，我们如果将数据按照树的这种形势存储起来，是不是也能达到二分查找这种效率呢？&lt;/p>
&lt;h2 id="2-树的定义">2. 树的定义&lt;/h2>
&lt;blockquote>
&lt;p>树是 n （n&amp;gt;=0）个结点构成的有限集合。当n=0时，称为空树。&lt;/p>
&lt;/blockquote>
&lt;p>对于任何一棵非空树，具备以下性质：&lt;/p>
&lt;ul>
&lt;li>树中有一个称为 &lt;strong>根（root）&lt;/strong> 的特殊结点&lt;/li>
&lt;li>其余结点可分为 m（m&amp;gt;0) 个互不相交的有限集， 其中每个集合本身又是一棵树，称为原来树的子树。&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811095437831.png" alt="image-20200811095437831">&lt;/p>
&lt;h3 id="21-树的一些基本术语">2.1 树的一些基本术语&lt;/h3>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811095539158.png" alt="image-20200811095539158">&lt;/p>
&lt;ol>
&lt;li>结点的度（Degree）：结点的子树个数。&lt;/li>
&lt;li>树的度：树的所有结点中最大的度数。&lt;/li>
&lt;li>叶结点：度为 0 的结点。&lt;/li>
&lt;li>父结点：有子树的结点是其子树的根结点的父结点。&lt;/li>
&lt;li>子结点：若A结点是B结点的父结点，则称B结点是A结点的子结点；子结点也称孩子结点。&lt;/li>
&lt;li>兄弟结点（sibling）：具有同一父结点的各结点彼此是兄弟结点。&lt;/li>
&lt;li>路径和路径长度：从结点n1到nk的路径为一个结点序列n1, n2,… , nk , ni是ni+1的父结点。路径所包含边的个数为路径的长度。&lt;/li>
&lt;li>祖先结点(Ancestor)：沿树根到某一结点路径上的所有结点都是这个结点的祖先结点。&lt;/li>
&lt;li>子孙结点(Descendant)：某一结点的子树中的所有结点是这个结点的子孙。&lt;/li>
&lt;li>结点的层次（Level）：规定根结点在1层，其它任一结点的层数是其父结点的层数加1。&lt;/li>
&lt;li>树的深度（Depth）：树中所有结点中的最大层次是这棵树的深度。&lt;/li>
&lt;/ol>
&lt;h3 id="22-树的表示">2.2 树的表示&lt;/h3>
&lt;p>采用儿子-兄弟表示法来表示一个树的结点，其中左边的指针指向第一个子节点，右边的指针指向相邻的兄弟结点，兄弟结点或子结点为空则用Null表示。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20200811100529997.png" alt="image-20200811100529997">&lt;/p>
&lt;blockquote>
&lt;p>参考：浙江大学-陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>队列及其实现</title><link>https://ahamoment.cn/post/algorithm-queue/</link><pubDate>Thu, 06 Aug 2020 20:04:38 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-queue/</guid><description>
&lt;h2 id="1-什么是队列">1. 什么是队列&lt;/h2>
&lt;blockquote>
&lt;p>具有一定操作约束的线性表。插入和删除操作，只能在一端插入，另一端删除。&lt;/p>
&lt;/blockquote>
&lt;p>数据插入称之为入队(addQ)，数据删除称之为出队(deleteQ)，队列最重要的特征就是先进先出(FIFO)。生活中有很多跟队列相关的例子，例如超市排队。&lt;/p>
&lt;h2 id="2-队列的抽象数据类型描述">2. 队列的抽象数据类型描述&lt;/h2>
&lt;p>与队列相关的操作主要包括以下几种：&lt;/p>
&lt;ul>
&lt;li>创建队列：生成长度为 size 的空队列。&lt;/li>
&lt;li>判断队列是否满了。&lt;/li>
&lt;li>判断队列是否为空。&lt;/li>
&lt;li>将数据元素插入到队列中。&lt;/li>
&lt;li>将数据元素从队列中删除。&lt;/li>
&lt;/ul>
&lt;h2 id="3-队列的顺序存储实现">3. 队列的顺序存储实现&lt;/h2>
&lt;p>队列的顺序存储结构通常由一个一维数组和一个记录队列头元素位置的变量&lt;strong>front&lt;/strong>以及一个记录队列尾元素位置的变量&lt;strong>rear&lt;/strong>组成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SeqQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[];&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rear&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图所示，用顺序存储实现队列，由于数组的元素从 0 开始，所以 front 和 rear 同时指向 -1 这个位置，添加 Job1，rear 往后移动一个位置，删除 Job1 ，front 往后移动一个位置。当队列满了的时候，就无法添加元素了，但是很明显就能发现，此时之前删除的位置还是空的，队列中还有位置，只是无法添加而已，这样的结构会造成空间浪费，我们需要用循环结构来解决。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/seqqueue.png" alt="">&lt;/p>
&lt;p>循环队列的机构如下图所示。循环结构中，front 和 rear 开始时同时指向 0 这个位置，之后，每一次入队，rear 向着顺时针方向移动一个位置，每一次出队列，front 向顺时针方向移动一个位置。那么这里就有个问题：队列空和满的判别条件是什么？队列空和满的时候，&lt;code>front=rear&lt;/code>，那么就造成无法判断队列空还是满了。那么要如何解决呢？这里提供两个解决方法：&lt;/p>
&lt;ol>
&lt;li>使用额外标记： &lt;strong>Size&lt;/strong>或者&lt;strong>tag&lt;/strong> 。size 用来记录当前元素的个数，当你加入一个元素的时候，size 加 1，删除一个元素的时候，size减1，所以只要根据size是0还是n就知道是空还是满的。tag （0，1）标记，添加一个元素，tag=1，删除一个元素 tag=0，当我们想判断队列是满还是空时，只要判断 tag 的值就知道最后一次操作是添加还是删除。&lt;/li>
&lt;li>仅使用n-1个数组空间。&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/circlequeue.png" alt="">&lt;/p>
&lt;p>我们采用第二种方案，使用求余函数来查看列队是否已满。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">rear&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">front&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>看看具体的实现代码：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nn">leetcode.editor.datastructure.queue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.io.Serializable&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SeqQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;,&lt;/span> &lt;span class="n">Serializable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">DEAFULT_SIZE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">10&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[];&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">rear&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SeqQueue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">DEAFULT_SIZE&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">SeqQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">elementData&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">[])&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">((&lt;/span>&lt;span class="n">rear&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;队列已满&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">rear&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">rear&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">40&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">front&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rear&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;队列为空&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">front&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">elementData&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">elementData&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">front&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">51&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="4-队列的链式存储实现">4. 队列的链式存储实现&lt;/h1>
&lt;blockquote>
&lt;p>队列的链式存储结构也可以用一个&lt;strong>单链表&lt;/strong>实现。插入和删除操作分别在链表的两头进行；队列指针&lt;strong>front&lt;/strong>和&lt;strong>rear&lt;/strong>应该分别指向链表的表头和表尾。&lt;/p>
&lt;/blockquote>
&lt;p>整个队列的结构如下图所示：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/linkqueue.png" alt="">&lt;/p>
&lt;p>与顺序结构不同的是，链式存储实现的队列，出队需要在表头进行，因为是单向链表，如果在表尾进行删除操作，我们无法知道前一个元素是多少。因此入队和出队操作为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LinkedQueue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//指向队头节点
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">rear&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//指向队尾节点
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LinkedQueue&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">add&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">front&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//空队列插入
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//非空队列,尾部插入
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rear&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isEmpty&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">rear&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="nf">delete&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">frontCell&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">frontElem&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">front&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;队列为空&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="n">frontCell&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">front&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">rear&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="c1">//若队列只有一个元素
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rear&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//删除后队列置为空
&lt;/span>&lt;span class="ln">40&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">else&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="n">front&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">front&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">();&lt;/span>&lt;span class="c1">//front移动到下一个元素
&lt;/span>&lt;span class="ln">42&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">frontElem&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">frontCell&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">frontElem&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">46&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">51&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">null&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">56&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">Node&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">T&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">61&lt;/span>
&lt;span class="ln">62&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Node&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">T&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">next&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">63&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">next&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">64&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">65&lt;/span>
&lt;span class="ln">66&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>参考：浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>Java 多线程 - 死锁问题</title><link>https://ahamoment.cn/post/java-multithread-dead-lock/</link><pubDate>Wed, 10 Jun 2020 19:21:07 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-dead-lock/</guid><description>
&lt;p>锁是非常有用的工具，运用场景非常多，因为它使用起来非常方便，而且易于理解。但同时它也会带来一些困扰，那就是可能引起死锁。&lt;/p>
&lt;!-- more -->
&lt;h2 id="1-什么是死锁">1. 什么是死锁&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://baike.baidu.com/item/%E6%AD%BB%E9%94%81/2196938?fr=aladdin">百度百科中对于死锁的定义：&lt;/a>死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。&lt;/p>
&lt;/blockquote>
&lt;p>简而言之，当线程1持有资源A，线程2持有资源B。此时线程1想要获取资源B，线程2想要获取资源A。两个线程都想要获取对方手中的资源，自己又不肯让出已有资源，一直僵持不下就形成了死锁。&lt;/p>
&lt;h2 id="2-死锁产生的四个条件">2. 死锁产生的四个条件&lt;/h2>
&lt;ul>
&lt;li>互斥条件：指进程对所分配到的资源进行排它性使用，即在一段时间内某资源只由一个进程占用。如果此时还有其它进程请求资源，则请求者只能等待，直至占有资源的进程用毕释放。&lt;/li>
&lt;li>请求和保持条件：指进程已经保持至少一个资源，但又提出了新的资源请求，而该资源已被其它进程占有，此时请求进程阻塞，但又对自己已获得的其它资源保持不放。&lt;/li>
&lt;li>不剥夺条件：指进程已获得的资源，在未使用完之前，不能被剥夺，只能在使用完时由自己释放。&lt;/li>
&lt;li>环路等待条件：指在发生死锁时，必然存在一个进程——资源的环形链，即进程集合{P0，P1，P2，···，Pn}中的P0正在等待一个 P1 占用的资源；P1 正在等待 P2 占用的资源，……，Pn 正在等待已被 P0 占用的资源。&lt;/li>
&lt;/ul>
&lt;h2 id="3-案例">3. 案例&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DeadLock&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">OtherService&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setOtherService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">OtherService&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">otherService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// DeadLock的实例的锁-资源A
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">LOCK&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">LOCK&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;********m1********&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s1&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">LOCK&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;********m2********&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">OtherService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">DeadLock&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">setDeadLock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">DeadLock&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">deadLock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="c1">// OtherService的实例的锁-资源B
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">LOCK&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">35&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">s1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">LOCK&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;========s1========&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">41&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">s2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">LOCK&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;========s2========&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">46&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">49&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DeadLockTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="n">DeadLock&lt;/span> &lt;span class="n">deadLock&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DeadLock&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">53&lt;/span> &lt;span class="n">OtherService&lt;/span> &lt;span class="n">otherService&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">OtherService&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setOtherService&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">otherService&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setDeadLock&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">deadLock&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">56&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="n">deadLock&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m1&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">61&lt;/span> &lt;span class="o">},&lt;/span> &lt;span class="s">&amp;#34;T1&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">62&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(()&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">63&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">64&lt;/span> &lt;span class="n">otherService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">s2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">65&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">66&lt;/span> &lt;span class="o">},&lt;/span> &lt;span class="s">&amp;#34;T2&amp;#34;&lt;/span>&lt;span class="o">).&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">67&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">68&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的案例中，两个线程 T1 和 T2 , 其中 T1 线程调用 DeadLock 的 m1 方法，在 m1 方法内部又调用了 OtherService 的 s1 方法，s1 和 m1 这两个方法都含有用 synchronized 关键字修饰的同步代码块。 T2 线程调用 OtherService 的 s2 方法，在 s2 方法内又调用的 DeadLock 的 m2 方法，同样的，s2 和 m1 这两个方法都含有用 synchronized 关键字修饰的同步代码块。整个程序如图所示：&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MTAxODAwMTQwNzAucG5n?x-oss-process=image/format,png" alt="image-20200610180014070">&lt;/p>
&lt;p>当 T1 线程执行的时候，m1 方法获取 DeadLock 的 LOCK 锁，并调用 OtherService 的 s1 方法，同时，T2 线程也开始执行，T2 线程获取到 OtherService 的 LOCK 锁，并调用 DeadLock 的 m2 方法，但是由于 m2 的方法的锁此时已经被 T1 线程占有，T2 线程只能等待 T1 线程释放锁，同理，T1 线程也在等待 T2 线程释放锁，于是就形成了死锁。&lt;/p>
&lt;p>我们使用 jstack 来观察一下死锁。&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MTAxODA1MTM4NjkucG5n?x-oss-process=image/format,png" alt="image-20200610180513869">&lt;/p>
&lt;p>首先看到这两个线程互相持有对象的锁，在等待对方释放锁。&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MTAxODA2MjA2NTUucG5n?x-oss-process=image/format,png" alt="image-20200610180620655">&lt;/p>
&lt;p>jstack 的信息最后也会告诉我们找到一个死锁。&lt;/p>
&lt;h2 id="4-如何避免死锁">4. 如何避免死锁&lt;/h2>
&lt;ul>
&lt;li>避免一个线程同时获取多个锁。&lt;/li>
&lt;li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。&lt;/li>
&lt;li>尝试使用定时锁，使用 lock.tryLock(timeout) 来替代使用内部锁机制。&lt;/li>
&lt;li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。&lt;/li>
&lt;/ul></description></item><item><title>Java 多线程 - 初识 Synchronized</title><link>https://ahamoment.cn/post/java-multithread-synchronized/</link><pubDate>Wed, 10 Jun 2020 19:16:24 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-synchronized/</guid><description>
&lt;h2 id="synchronized-简介">Synchronized 简介&lt;/h2>
&lt;blockquote>
&lt;p>本文出自汪文君老师的《Java 并发编程》课程，如需转载，请注明源出处！&lt;/p>
&lt;/blockquote>
&lt;p>先来看一个例子，这个例子是模拟银行叫号的，使用三个线程模拟三个柜台一起叫号，总共50个号。在不加 synchronized 的关键字的情况下，很容易就会出现并发问题。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BankRunnable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 一个runnable实例被多个线程共享
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">TicketWindowRunnable&lt;/span> &lt;span class="n">ticketWindow&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">TicketWindowRunnable&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">windowThread1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ticketWindow&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;一号窗口&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">windowThread2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ticketWindow&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;二号窗口&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">windowThread3&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ticketWindow&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;三号窗口&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">windowThread1&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">windowThread2&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">windowThread3&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TicketWindowRunnable&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">50&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>&lt;span class="c1">//1
&lt;/span>&lt;span class="ln">23&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()+&lt;/span>&lt;span class="s">&amp;#34; 的号码是：&amp;#34;&lt;/span>&lt;span class="o">+(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++));&lt;/span>&lt;span class="c1">//2
&lt;/span>&lt;span class="ln">32&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>多运行几遍程序，就会出现下面这个问题：&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MDMxOTIyMjA1MTcucG5n?x-oss-process=image/format,png" alt="image-20200603192220517">&lt;/p>
&lt;p>在一号窗口拿完最后一个号码之后，二号窗口和三号窗口又后续拿到了 52 和 51 号。为什么会出现这种现象呢？&lt;/p>
&lt;p>首先当 &lt;code>index=499&lt;/code> 的时候，三个线程均不满足 &lt;code>index &amp;gt; MAX&lt;/code>，都会向下执行。三个线程都可以向下执行，将 index 加 1。&lt;/p>
&lt;p>为了解决这个问题，这里引入了 synchronized 。&lt;/p>
&lt;h2 id="什么是-synchronized">什么是 synchronized&lt;/h2>
&lt;blockquote>
&lt;p>synchronized关键字可以实现一个简单的策略来防止线程干扰和内存一致性错误，如果一个对象对多个线程是可见的，那么对该对象的所有读或者写都将通过同步的方式来进行。&lt;/p>
&lt;/blockquote>
&lt;p>上面这段话是oracle官网对synchronized关键字的解释，具体表现如下：&lt;/p>
&lt;ul>
&lt;li>synchronized关键字提供了一种锁的机制，能够确保共享变量的互斥访问，从而防止数据不一致问题的出现。&lt;/li>
&lt;li>synchronized关键字包括monitor enter和monitor exit两个JVM指令，它能够保证在任何时候任何线程执行到monitor enter成功之前都必须从主内存中获取数据，而不是从缓存中，在monitor exit运行成功之后，共享变量被更新后的值必须刷入主内存（在本书的第三部分会重点介绍）。&lt;/li>
&lt;li>synchronized的指令严格遵守java happens-before规则，一个monitor exit指令之前必定要有一个monitor enter。&lt;/li>
&lt;/ul>
&lt;h2 id="synchronized关键字的用法">synchronized关键字的用法&lt;/h2>
&lt;p>Java通过 synchronized 对共享数据的线程访问提供了一种避免竞争条件的机制。synchronized 可以修饰方法或者代码块，被修饰的方法或者代码块同一时间只会允许一个线程执行，这条执行的线程持有同步部分的锁。synchronized 方法不能用于对class及其变量进行修饰。&lt;/p>
&lt;p>synchronized 关键字可以修饰方法或者代码块，那么这两者有什么区别呢？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// 同步代码块
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">TicketWindowRunnable&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">1&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">500&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">MONITOR&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">MONITOR&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 的号码是：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++));&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>synchronized 方法修饰代码块的时候，使用的是 monitor 锁。再来用 synchronized 修饰一下同步方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 的号码是：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++));&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>运行之后发现都是同一个线程在跑，另外两个线程无法执行。这是因为 synchronized 在修饰方法的时候使用的是 this 锁，当其中一个线程拿到锁进到 while 循环之后，就一直去做事情，直到满足条件退出为止。将 while 里面的代码抽出来放到一个方法里，用 synchronized 来修饰该方法就可以解决这个问题。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">ticket&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="kd">private&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">ticket&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">MAX&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; 的号码是：&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="o">++));&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>synchronized 修饰方法时默认是使用的 this 锁，修饰代码块时使用的是对象锁。synchronized 关键字还可以用来修饰静态方法和静态代码块。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedStatic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m1 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m2&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m2 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedStaticTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;T1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">SynchronizedStatic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m1&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;T2&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="n">SynchronizedStatic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m2&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1">// output
&lt;/span>&lt;span class="ln">41&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">m1&lt;/span> &lt;span class="n">T1&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="n">m2&lt;/span> &lt;span class="n">T2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>静态方法 m1 和 m2 同时被 synchronized 修饰，这个时候线程 T2 会等到线程 T1 执行完再执行，说明这两个方法使用的是同一把锁，这就是 Class 锁。我们把 sleep 的时间变长一点来观察一下是不是 Class 锁。&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MDkxOTE1NTc0NTUucG5n?x-oss-process=image/format,png" alt="image-20200609191557455">&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MDkxOTE2Mjk4NjcucG5n?x-oss-process=image/format,png" alt="image-20200609191629867">&lt;/p>
&lt;p>可以看到，线程 T1 执行的时候，持有的是 Class 锁，此时线程 T2 在等待 T1 执行完释放锁，当 T1 执行完之后，T2 拿到 Class 锁执行代码。&lt;/p>
&lt;p>&lt;img src="https://imgconvert.csdnimg.cn/aHR0cDovL3Fha2dsNmVueC5ia3QuY2xvdWRkbi5jb20vcGljZ28vaW1hZ2UtMjAyMDA2MDkxOTE4MTIwODYucG5n?x-oss-process=image/format,png" alt="image-20200609191812086">&lt;/p>
&lt;p>了解了 synchronized 修饰静态方法使用的是 Class 锁之后，我们再来验证一下当它修饰静态方法的时候是不是也是使用 Class 锁？&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedStatic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m1 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m3&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m3 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedStaticTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;T1&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">SynchronizedStatic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m1&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;T3&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="n">SynchronizedStatic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">m3&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="o">}.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里加了一个没有 synchronized 修饰的静态方法 m3，运行之后很容易知道，这两个线程是同时运行的。我们在 SynchronizedStatic 开始的地方加一个静态代码块，静态代码块内部使用 synchronized 锁。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SynchronizedStatic&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">SynchronizedStatic&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;static &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m1&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m1 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">100_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">m3&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;m3 &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10_000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">31&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="c1">//output
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">static&lt;/span> &lt;span class="n">T1&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="n">m1&lt;/span> &lt;span class="n">T1&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="n">m3&lt;/span> &lt;span class="n">T3&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，T1 线程要先执行静态代码块才能往下走，说明静态代码块使用的锁和静态方法是一样的，另外这个时候没有用 synchronized 修饰的 m3 也要等静态代码块执行实例化才行。&lt;/p>
&lt;p>总结一下，synchronized 关键字能够避免多线程竞争导致的数据不一致，被 synchronized 修饰的方法或者代码块同一时间只会允许一个线程执行，这条执行的线程持有同步部分的锁。synchronized 关键字修饰普通方法时，使用的是 this 锁，修饰静态方法和静态代码块时，使用 Class 锁，修饰代码块时，使用 LOCK 锁。&lt;/p></description></item><item><title>20 常用的 RPM 命令</title><link>https://ahamoment.cn/post/linux-20-rpm-command/</link><pubDate>Tue, 02 Jun 2020 18:51:23 +0800</pubDate><guid>https://ahamoment.cn/post/linux-20-rpm-command/</guid><description>
&lt;blockquote>
&lt;p>本文翻译自&lt;a href="https://www.tecmint.com/20-practical-examples-of-rpm-commands-in-linux/">20 Practical Examples of RPM Commands in Linux&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>RMP (Red Hat Package Manager) 是一款 Red Hat 系统的开源包管理工具，支持安装、更新、卸载、查询、验证和管理系统软件包。RPM以前称为 .rpm 文件，文件内包含编译好的软件和包所需要的库。&lt;/p>
&lt;p>这篇文章主要介绍了 20 个常用的 RPM 命令。&lt;/p>
&lt;h3 id="关于-rpm-的一些常识">关于 RPM 的一些常识&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>RPM 是免费的，并且遵循 GPL 开源协议&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RPM 将所有已安装软件包的信息保存在 &lt;code>/var/lib/rpm&lt;/code> 数据库中。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RPM 是在 Linux 系统下安装软件包的唯一方法，如果您使用源代码安装了软件包，则 rpm 将无法对其进行管理。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>RPM 处理 .rpm 文件，其中包含有关软件包的实际信息，例如：它是什么，它来自哪里，软件依赖信息，版本信息等。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="rpm命令的五个基本模式">RPM命令的五个基本模式&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>Install&lt;/strong> : 使用于安装任意的 RPM 包。&lt;/li>
&lt;li>&lt;strong>Remove&lt;/strong> ：用于擦除，删除或卸载任何 RPM 软件包。&lt;/li>
&lt;li>&lt;strong>Upgrade&lt;/strong> : 用于更新已经存在的 RPM 软件包。&lt;/li>
&lt;li>&lt;strong>Verify&lt;/strong> ：用来验证 RPM 软件包。&lt;/li>
&lt;li>&lt;strong>Query&lt;/strong>：用来查询 RPM 软件包。&lt;/li>
&lt;/ul>
&lt;h3 id="查找和下载-rpm-包">查找和下载 RPM 包&lt;/h3>
&lt;p>以下是rpm网站的列表，您可以在其中找到和下载所有RPM软件包。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://rpmfind.net/">http://rpmfind.net&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.redhat.com/">http://www.redhat.com&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://freshrpms.net/">http://freshrpms.net/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://rpm.pbone.net/">http://rpm.pbone.net/&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="1-检查-rpm-包的签名">1. 检查 RPM 包的签名&lt;/h3>
&lt;p>在将软件包安装在Linux系统上之前，先检查软件包的 PGP 签名，并确保其完整性和来源是正确的。使用 &lt;strong>–-checksig&lt;/strong> (&lt;strong>check signature&lt;/strong>) 命令检查 RPM 包的签名。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm --checksig pidgin-2.7.9-5.el6.2.i686.rpm&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>pidgin-2.7.9-5.el6.2.i686.rpm: rsa sha1 &lt;span class="o">(&lt;/span>md5&lt;span class="o">)&lt;/span> pgp md5 OK
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="2-安装-rpm-包">2. 安装 RPM 包&lt;/h3>
&lt;p>使用 &lt;strong>-i&lt;/strong> 选项安装 RPM 包&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -ivh tree-1.6.0-10.el7.x86_64.rpm&lt;/span>
&lt;span class="ln">2&lt;/span>准备中... &lt;span class="c1">################################# [100%]&lt;/span>
&lt;span class="ln">3&lt;/span>正在升级/安装...
&lt;span class="ln">4&lt;/span> 1:tree-1.6.0-10.el7 &lt;span class="c1">################################# [100%]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>RPM 命令和选项&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>-i&lt;/strong> : 安装包&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-v :&lt;/strong> 详细显示&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>-h&lt;/strong> 在打包归档文件解压缩时打印哈希标记。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="3-安装-rpm-包之前检查包依赖">3. 安装 RPM 包之前检查包依赖&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qpR tree-1.6.0-10.el7.x86_64.rpm&lt;/span>
&lt;span class="ln"> 2&lt;/span>libc.so.6&lt;span class="o">()(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>libc.so.6&lt;span class="o">(&lt;/span>GLIBC_2.14&lt;span class="o">)(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>libc.so.6&lt;span class="o">(&lt;/span>GLIBC_2.2.5&lt;span class="o">)(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 5&lt;/span>libc.so.6&lt;span class="o">(&lt;/span>GLIBC_2.3&lt;span class="o">)(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 6&lt;/span>libc.so.6&lt;span class="o">(&lt;/span>GLIBC_2.3.4&lt;span class="o">)(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>libc.so.6&lt;span class="o">(&lt;/span>GLIBC_2.4&lt;span class="o">)(&lt;/span>64bit&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 8&lt;/span>rpmlib&lt;span class="o">(&lt;/span>CompressedFileNames&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 3.0.4-1
&lt;span class="ln"> 9&lt;/span>rpmlib&lt;span class="o">(&lt;/span>FileDigests&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 4.6.0-1
&lt;span class="ln">10&lt;/span>rpmlib&lt;span class="o">(&lt;/span>PayloadFilesHavePrefix&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 4.0-1
&lt;span class="ln">11&lt;/span>rtld&lt;span class="o">(&lt;/span>GNU_HASH&lt;span class="o">)&lt;/span>
&lt;span class="ln">12&lt;/span>rpmlib&lt;span class="o">(&lt;/span>PayloadIsXz&lt;span class="o">)&lt;/span> &amp;lt;&lt;span class="o">=&lt;/span> 5.2-1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令和选项说明：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>-q :&lt;/strong> 查询一个包&lt;/li>
&lt;li>&lt;strong>-p:&lt;/strong> 列出此软件包提供的功能。&lt;/li>
&lt;li>&lt;strong>-R:&lt;/strong> 列出此程序包所依赖的功能。&lt;/li>
&lt;/ul>
&lt;h3 id="4-忽略依赖安装-rpm-包">4. 忽略依赖安装 RPM 包&lt;/h3>
&lt;p>如果已经知道所有必需的软件包都已安装，那么可以在安装软件包之前使用 &lt;strong>-–nodeps(no dependencies check)&lt;/strong> 选项来忽略那些依赖项。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -ivh --nodeps tree-1.6.0-10.el7.x86_64.rpm&lt;/span>
&lt;span class="ln">2&lt;/span>准备中... &lt;span class="c1">################################# [100%]&lt;/span>
&lt;span class="ln">3&lt;/span> 软件包 tree-1.6.0-10.el7.x86_64 已经安装
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面的命令通过忽略依赖项错误来强制安装rpm软件包，但是如果缺少那些依赖项文件会导致程序将无法运行。&lt;/p>
&lt;h3 id="5-查找一个已经安装的-rpm-包">5. 查找一个已经安装的 RPM 包&lt;/h3>
&lt;p>在软件包名称中使用 &lt;strong>-q&lt;/strong> 选项，将显示是否已安装 rpm 包。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -q tree&lt;/span>
&lt;span class="ln">2&lt;/span>tree-1.6.0-10.el7.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="6-列出已安装的rpm软件包的所有文件">6. 列出已安装的RPM软件包的所有文件&lt;/h3>
&lt;p>要查看已安装的rpm软件包的所有文件，请使用 &lt;strong>-ql（query list）&lt;/strong> rpm 命令。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -ql tree&lt;/span>
&lt;span class="ln">2&lt;/span>/usr/bin/tree
&lt;span class="ln">3&lt;/span>/usr/share/doc/tree-1.6.0
&lt;span class="ln">4&lt;/span>/usr/share/doc/tree-1.6.0/LICENSE
&lt;span class="ln">5&lt;/span>/usr/share/doc/tree-1.6.0/README
&lt;span class="ln">6&lt;/span>/usr/share/man/man1/tree.1.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="7-列出最近安装的-rpm-包">7. 列出最近安装的 RPM 包&lt;/h3>
&lt;p>使用 &lt;strong>-qa(query all)&lt;/strong> 命令，会列出最近安装的所有 RPM 包&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qa --last&lt;/span>
&lt;span class="ln"> 2&lt;/span>tree-1.6.0-10.el7.x86_64 2020年06月01日 星期一 19时04分28秒
&lt;span class="ln"> 3&lt;/span>perl-Git-1.8.3.1-22.el7_8.noarch 2020年06月01日 星期一 14时18分37秒
&lt;span class="ln"> 4&lt;/span>git-1.8.3.1-22.el7_8.x86_64 2020年06月01日 星期一 14时18分36秒
&lt;span class="ln"> 5&lt;/span>perl-TermReadKey-2.30-20.el7.x86_64 2020年06月01日 星期一 14时18分34秒
&lt;span class="ln"> 6&lt;/span>rsync-3.1.2-10.el7.x86_64 2020年06月01日 星期一 14时18分33秒
&lt;span class="ln"> 7&lt;/span>perl-Error-0.17020-2.el7.noarch 2020年06月01日 星期一 14时18分33秒
&lt;span class="ln"> 8&lt;/span>nux-dextop-release-0-5.el7.nux.noarch 2020年05月22日 星期五 19时40分35秒
&lt;span class="ln"> 9&lt;/span>gpg-pubkey-85c6cd8a-4e060c35 2020年05月22日 星期五 19时40分19秒
&lt;span class="ln">10&lt;/span>epel-release-7-11.noarch 2020年05月22日 星期五 19时39分27秒
&lt;span class="ln">11&lt;/span>libtirpc-0.2.4-0.16.el7.x86_64 2020年05月22日 星期五 18时58分40秒
&lt;span class="ln">12&lt;/span>vim-enhanced-7.4.629-6.el7.x86_64 2020年05月22日 星期五 17时48分48秒
&lt;span class="ln">13&lt;/span>vim-common-7.4.629-6.el7.x86_64 2020年05月22日 星期五 17时48分48秒
&lt;span class="ln">14&lt;/span>vim-filesystem-7.4.629-6.el7.x86_64 2020年05月22日 星期五 17时48分44秒
&lt;span class="ln">15&lt;/span>...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="8-列出所有已安装的-rpm-包">8. 列出所有已安装的 RPM 包&lt;/h3>
&lt;p>键入以下命令以打印Linux系统上已安装软件包的所有名称。该命令和 grep 一起使用，即可搜索到我们是否安装过某个包，例如 &lt;code>rpm -qa | grep git&lt;/code>，查看我们是否安装过 git 。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qa&lt;/span>
&lt;span class="ln"> 2&lt;/span>kexec-tools-2.0.15-43.el7.x86_64
&lt;span class="ln"> 3&lt;/span>grub2-common-2.02-0.81.el7.centos.noarch
&lt;span class="ln"> 4&lt;/span>openssh-clients-7.4p1-21.el7.x86_64
&lt;span class="ln"> 5&lt;/span>setup-2.8.71-11.el7.noarch
&lt;span class="ln"> 6&lt;/span>authconfig-6.2.8-30.el7.x86_64
&lt;span class="ln"> 7&lt;/span>basesystem-10.0-7.el7.centos.noarch
&lt;span class="ln"> 8&lt;/span>postfix-2.10.1-9.el7.x86_64
&lt;span class="ln"> 9&lt;/span>ncurses-base-5.9-14.20130511.el7_4.noarch
&lt;span class="ln">10&lt;/span>kbd-1.15.5-15.el7.x86_64
&lt;span class="ln">11&lt;/span>kbd-misc-1.15.5-15.el7.noarch
&lt;span class="ln">12&lt;/span>qemu-guest-agent-2.12.0-3.el7.x86_64
&lt;span class="ln">13&lt;/span>...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="9-更新-rpm-包">9. 更新 RPM 包&lt;/h3>
&lt;p>使用 &lt;strong>-U(upgrade)&lt;/strong> 选项来升级 RPM 包。该命令不仅会将某个 rpm 包升级到最新版本，而且还会维护旧软件包的备份，以便在新的升级软件包不能使用的时候还能使用旧的 RPM 包。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -Uvh tree-1.6.0-10.el7.x86_64.rpm&lt;/span>
&lt;span class="ln">2&lt;/span>准备中... &lt;span class="c1">################################# [100%]&lt;/span>
&lt;span class="ln">3&lt;/span> 软件包 tree-1.6.0-10.el7.x86_64 已经安装
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="10-删除-rpm-包">10. 删除 RPM 包&lt;/h3>
&lt;p>使用 &lt;strong>-e (erase)&lt;/strong> 命令来移除已安装的 rpm 包。如果要移除的 RPM 包不存在，就会有错误提示。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -evv tree&lt;/span>
&lt;span class="ln"> 2&lt;/span>D: loading keyring from pubkeys in /var/lib/rpm/pubkeys/*.key
&lt;span class="ln"> 3&lt;/span>D: couldn&lt;span class="err">&amp;#39;&lt;/span>t find any keys in /var/lib/rpm/pubkeys/*.key
&lt;span class="ln"> 4&lt;/span>D: loading keyring from rpmdb
&lt;span class="ln"> 5&lt;/span>D: opening db environment /var/lib/rpm cdb:0x401
&lt;span class="ln"> 6&lt;/span>D: opening db index /var/lib/rpm/Packages 0x400 &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x0
&lt;span class="ln"> 7&lt;/span>D: locked db index /var/lib/rpm/Packages
&lt;span class="ln"> 8&lt;/span>D: opening db index /var/lib/rpm/Name 0x400 &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x0
&lt;span class="ln"> 9&lt;/span>D: &lt;span class="nb">read&lt;/span> h# &lt;span class="m">302&lt;/span> 头 SHA1 摘要： OK &lt;span class="o">(&lt;/span>489efff35e604042709daf46fb78611fe90a75aa&lt;span class="o">)&lt;/span>
&lt;span class="ln">10&lt;/span>D: added key gpg-pubkey-f4a80eb5-53a7ff4b to keyring
&lt;span class="ln">11&lt;/span>D: &lt;span class="nb">read&lt;/span> h# &lt;span class="m">371&lt;/span> 头 SHA1 摘要： OK &lt;span class="o">(&lt;/span>052c9c3b53cea0014763d9f82c173a87dc743eea&lt;span class="o">)&lt;/span>
&lt;span class="ln">12&lt;/span>D: added key gpg-pubkey-85c6cd8a-4e060c35 to keyring
&lt;span class="ln">13&lt;/span>D: Using legacy gpg-pubkey&lt;span class="o">(&lt;/span>s&lt;span class="o">)&lt;/span> from rpmdb
&lt;span class="ln">14&lt;/span>D: &lt;span class="nb">read&lt;/span> h# &lt;span class="m">380&lt;/span> 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: OK
&lt;span class="ln">15&lt;/span>D: opening db index /var/lib/rpm/Conflictname 0x400 &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x0
&lt;span class="ln">16&lt;/span>D: &lt;span class="o">==========&lt;/span> --- tree-1.6.0-10.el7 x86_64/linux 0x2
&lt;span class="ln">17&lt;/span>D: opening db index /var/lib/rpm/Requirename 0x400 &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x0
&lt;span class="ln">18&lt;/span>D: &lt;span class="o">==========&lt;/span> recording tsort relations
&lt;span class="ln">19&lt;/span>D: &lt;span class="o">==========&lt;/span> tsorting packages &lt;span class="o">(&lt;/span>order, &lt;span class="c1">#predecessors, #succesors, depth)&lt;/span>
&lt;span class="ln">20&lt;/span>D: &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">1&lt;/span> -tree-1.6.0-10.el7.x86_64
&lt;span class="ln">21&lt;/span>D: erasing packages
&lt;span class="ln">22&lt;/span>D: closed db index /var/lib/rpm/Conflictname
&lt;span class="ln">23&lt;/span>D: closed db index /var/lib/rpm/Requirename
&lt;span class="ln">24&lt;/span>D: closed db index /var/lib/rpm/Name
&lt;span class="ln">25&lt;/span>D: closed db index /var/lib/rpm/Packages
&lt;span class="ln">26&lt;/span>D: closed db environment /var/lib/rpm
&lt;span class="ln">27&lt;/span>D: opening db environment /var/lib/rpm cdb:0x401
&lt;span class="ln">28&lt;/span>D: opening db index /var/lib/rpm/Packages &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">29&lt;/span>D: sanity checking &lt;span class="m">1&lt;/span> elements
&lt;span class="ln">30&lt;/span>D: running pre-transaction scripts
&lt;span class="ln">31&lt;/span>D: computing &lt;span class="m">5&lt;/span> file fingerprints
&lt;span class="ln">32&lt;/span>D: opening db index /var/lib/rpm/Name &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">33&lt;/span>D: opening db index /var/lib/rpm/Basenames &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">34&lt;/span>D: opening db index /var/lib/rpm/Group &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">35&lt;/span>D: opening db index /var/lib/rpm/Requirename &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">36&lt;/span>D: opening db index /var/lib/rpm/Providename &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">37&lt;/span>D: opening db index /var/lib/rpm/Conflictname &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">38&lt;/span>D: opening db index /var/lib/rpm/Obsoletename &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">39&lt;/span>D: opening db index /var/lib/rpm/Triggername &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">40&lt;/span>D: opening db index /var/lib/rpm/Dirnames &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">41&lt;/span>D: opening db index /var/lib/rpm/Installtid &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">42&lt;/span>D: opening db index /var/lib/rpm/Sigmd5 &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">43&lt;/span>D: opening db index /var/lib/rpm/Sha1header &lt;span class="o">(&lt;/span>none&lt;span class="o">)&lt;/span> &lt;span class="nv">mode&lt;/span>&lt;span class="o">=&lt;/span>0x42
&lt;span class="ln">44&lt;/span>软件包准备中...
&lt;span class="ln">45&lt;/span>D: computing file dispositions
&lt;span class="ln">46&lt;/span>D: 0x0000fd00 &lt;span class="m">4096&lt;/span> &lt;span class="m">9228841&lt;/span> &lt;span class="m">19356493&lt;/span> /
&lt;span class="ln">47&lt;/span>D: &lt;span class="o">==========&lt;/span> +++ tree-1.6.0-10.el7 x86_64-linux 0x2
&lt;span class="ln">48&lt;/span>D: &lt;span class="nb">read&lt;/span> h# &lt;span class="m">380&lt;/span> 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: OK
&lt;span class="ln">49&lt;/span>D: erase: tree-1.6.0-10.el7 has &lt;span class="m">5&lt;/span> files
&lt;span class="ln">50&lt;/span>tree-1.6.0-10.el7.x86_64
&lt;span class="ln">51&lt;/span>D: erase &lt;span class="m">100644&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span> 0, 0&lt;span class="o">)&lt;/span> &lt;span class="m">4100&lt;/span> /usr/share/man/man1/tree.1.gz
&lt;span class="ln">52&lt;/span>D: erase &lt;span class="m">100644&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span> 0, 0&lt;span class="o">)&lt;/span> &lt;span class="m">4628&lt;/span> /usr/share/doc/tree-1.6.0/README
&lt;span class="ln">53&lt;/span>D: erase &lt;span class="m">100644&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span> 0, 0&lt;span class="o">)&lt;/span> &lt;span class="m">18009&lt;/span> /usr/share/doc/tree-1.6.0/LICENSE
&lt;span class="ln">54&lt;/span>D: erase &lt;span class="m">040755&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">(&lt;/span> 0, 0&lt;span class="o">)&lt;/span> &lt;span class="m">6&lt;/span> /usr/share/doc/tree-1.6.0
&lt;span class="ln">55&lt;/span>D: erase &lt;span class="m">100755&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="o">(&lt;/span> 0, 0&lt;span class="o">)&lt;/span> &lt;span class="m">62768&lt;/span> /usr/bin/tree
&lt;span class="ln">56&lt;/span>D: --- h# &lt;span class="m">380&lt;/span> tree-1.6.0-10.el7.x86_64
&lt;span class="ln">57&lt;/span>D: removing &lt;span class="s2">&amp;#34;tree&amp;#34;&lt;/span> from Name index.
&lt;span class="ln">58&lt;/span>D: removing &lt;span class="m">5&lt;/span> entries from Basenames index.
&lt;span class="ln">59&lt;/span>D: removing &lt;span class="s2">&amp;#34;Applications/File&amp;#34;&lt;/span> from Group index.
&lt;span class="ln">60&lt;/span>D: removing &lt;span class="m">11&lt;/span> entries from Requirename index.
&lt;span class="ln">61&lt;/span>D: removing &lt;span class="m">2&lt;/span> entries from Providename index.
&lt;span class="ln">62&lt;/span>D: removing &lt;span class="m">4&lt;/span> entries from Dirnames index.
&lt;span class="ln">63&lt;/span>D: removing &lt;span class="m">1&lt;/span> entries from Installtid index.
&lt;span class="ln">64&lt;/span>D: removing &lt;span class="m">1&lt;/span> entries from Sigmd5 index.
&lt;span class="ln">65&lt;/span>D: removing &lt;span class="s2">&amp;#34;a09f99f73ee3fe352489e734c63c32fa41b1be56&amp;#34;&lt;/span> from Sha1header index.
&lt;span class="ln">66&lt;/span>D: running post-transaction scripts
&lt;span class="ln">67&lt;/span>D: closed db index /var/lib/rpm/Sha1header
&lt;span class="ln">68&lt;/span>D: closed db index /var/lib/rpm/Sigmd5
&lt;span class="ln">69&lt;/span>D: closed db index /var/lib/rpm/Installtid
&lt;span class="ln">70&lt;/span>D: closed db index /var/lib/rpm/Dirnames
&lt;span class="ln">71&lt;/span>D: closed db index /var/lib/rpm/Triggername
&lt;span class="ln">72&lt;/span>D: closed db index /var/lib/rpm/Obsoletename
&lt;span class="ln">73&lt;/span>D: closed db index /var/lib/rpm/Conflictname
&lt;span class="ln">74&lt;/span>D: closed db index /var/lib/rpm/Providename
&lt;span class="ln">75&lt;/span>D: closed db index /var/lib/rpm/Requirename
&lt;span class="ln">76&lt;/span>D: closed db index /var/lib/rpm/Group
&lt;span class="ln">77&lt;/span>D: closed db index /var/lib/rpm/Basenames
&lt;span class="ln">78&lt;/span>D: closed db index /var/lib/rpm/Name
&lt;span class="ln">79&lt;/span>D: closed db index /var/lib/rpm/Packages
&lt;span class="ln">80&lt;/span>D: closed db environment /var/lib/rpm
&lt;span class="ln">81&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># echo $?&lt;/span>
&lt;span class="ln">82&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">83&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -e tree&lt;/span>
&lt;span class="ln">84&lt;/span>错误：未安装软件包 tree
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="11-忽略依赖地删除rpm-包">11. 忽略依赖地删除RPM 包&lt;/h3>
&lt;p>使用 &lt;strong>--nodeps (Do not check dependencies)&lt;/strong> 命令项强制从系统中删除 RPM 包。需要注意的是，删除特定的软件包可能会破坏其他正在运行的应用程序。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -ev --nodeps tree&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="12-查看一个文件属于哪个-rpm-包">12. 查看一个文件属于哪个 RPM 包&lt;/h3>
&lt;p>假设有一个文件列表，并且想找出这些文件属于哪个 RPM 包的，那么可以使用 &lt;strong>-qf (query file)&lt;/strong> 命令。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qf /usr/bin/tree&lt;/span>
&lt;span class="ln">2&lt;/span>tree-1.6.0-10.el7.x86_64
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="13-查看已安装的-rpm-包的信息">13. 查看已安装的 RPM 包的信息&lt;/h3>
&lt;p>使用 &lt;strong>-qi (query info)&lt;/strong> 命令查询想要知道的 rpm 包的信息。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qi tree&lt;/span>
&lt;span class="ln"> 2&lt;/span>Name : tree
&lt;span class="ln"> 3&lt;/span>Version : 1.6.0
&lt;span class="ln"> 4&lt;/span>Release : 10.el7
&lt;span class="ln"> 5&lt;/span>Architecture: x86_64
&lt;span class="ln"> 6&lt;/span>Install Date: 2020年06月02日 星期二 19时05分24秒
&lt;span class="ln"> 7&lt;/span>Group : Applications/File
&lt;span class="ln"> 8&lt;/span>Size : &lt;span class="m">89505&lt;/span>
&lt;span class="ln"> 9&lt;/span>License : GPLv2+
&lt;span class="ln">10&lt;/span>Signature : RSA/SHA256, 2014年07月04日 星期五 13时36分46秒, Key ID 24c6a8a7f4a80eb5
&lt;span class="ln">11&lt;/span>Source RPM : tree-1.6.0-10.el7.src.rpm
&lt;span class="ln">12&lt;/span>Build Date : 2014年06月10日 星期二 03时28分53秒
&lt;span class="ln">13&lt;/span>Build Host : worker1.bsys.centos.org
&lt;span class="ln">14&lt;/span>Relocations : &lt;span class="o">(&lt;/span>not relocatable&lt;span class="o">)&lt;/span>
&lt;span class="ln">15&lt;/span>Packager : CentOS BuildSystem &amp;lt;http://bugs.centos.org&amp;gt;
&lt;span class="ln">16&lt;/span>Vendor : CentOS
&lt;span class="ln">17&lt;/span>URL : http://mama.indstate.edu/users/ice/tree/
&lt;span class="ln">18&lt;/span>Summary : File system tree viewer
&lt;span class="ln">19&lt;/span>Description :
&lt;span class="ln">20&lt;/span>The tree utility recursively displays the contents of directories in a
&lt;span class="ln">21&lt;/span>tree-like format. Tree is basically a UNIX port of the DOS tree
&lt;span class="ln">22&lt;/span>utility.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="14-在安装之前获取-rpm-包的信息">14. 在安装之前获取 RPM 包的信息&lt;/h3>
&lt;p>假设你从网上下载了一个 rpm 包，并且想要在安装之前知道这个 rpm 包的信息，那么可以使用 &lt;strong>-qip (query info package)&lt;/strong> 这个命令来打印软件包的信息。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qip python3-3.6.8-13.el7.x86_64.rpm&lt;/span>
&lt;span class="ln"> 2&lt;/span>Name : python3
&lt;span class="ln"> 3&lt;/span>Version : 3.6.8
&lt;span class="ln"> 4&lt;/span>Release : 13.el7
&lt;span class="ln"> 5&lt;/span>Architecture: x86_64
&lt;span class="ln"> 6&lt;/span>Install Date: &lt;span class="o">(&lt;/span>not installed&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 7&lt;/span>Group : Unspecified
&lt;span class="ln"> 8&lt;/span>Size : &lt;span class="m">39904&lt;/span>
&lt;span class="ln"> 9&lt;/span>License : Python
&lt;span class="ln">10&lt;/span>Signature : RSA/SHA256, 2020年04月04日 星期六 05时06分11秒, Key ID 24c6a8a7f4a80eb5
&lt;span class="ln">11&lt;/span>Source RPM : python3-3.6.8-13.el7.src.rpm
&lt;span class="ln">12&lt;/span>Build Date : 2020年04月02日 星期四 22时17分47秒
&lt;span class="ln">13&lt;/span>Build Host : x86-01.bsys.centos.org
&lt;span class="ln">14&lt;/span>Relocations : &lt;span class="o">(&lt;/span>not relocatable&lt;span class="o">)&lt;/span>
&lt;span class="ln">15&lt;/span>Packager : CentOS BuildSystem &amp;lt;http://bugs.centos.org&amp;gt;
&lt;span class="ln">16&lt;/span>Vendor : CentOS
&lt;span class="ln">17&lt;/span>URL : https://www.python.org/
&lt;span class="ln">18&lt;/span>Summary : Interpreter of the Python programming language
&lt;span class="ln">19&lt;/span>Description :
&lt;span class="ln">20&lt;/span>Python is an accessible, high-level, dynamically typed, interpreted programming
&lt;span class="ln">21&lt;/span>language, designed with an emphasis on code readability.
&lt;span class="ln">22&lt;/span>It includes an extensive standard library, and has a vast ecosystem of
&lt;span class="ln">23&lt;/span>third-party libraries.
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>The python3 package provides the &lt;span class="s2">&amp;#34;python3&amp;#34;&lt;/span> executable: the reference
&lt;span class="ln">26&lt;/span>interpreter &lt;span class="k">for&lt;/span> the Python language, version 3.
&lt;span class="ln">27&lt;/span>The majority of its standard library is provided in the python3-libs package,
&lt;span class="ln">28&lt;/span>which should be installed automatically along with python3.
&lt;span class="ln">29&lt;/span>The remaining parts of the Python standard library are broken out into the
&lt;span class="ln">30&lt;/span>python3-tkinter and python3-test packages, which may need to be installed
&lt;span class="ln">31&lt;/span>separately.
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span>Documentation &lt;span class="k">for&lt;/span> Python is provided in the python3-docs package.
&lt;span class="ln">34&lt;/span>
&lt;span class="ln">35&lt;/span>Packages containing additional libraries &lt;span class="k">for&lt;/span> Python are generally named with
&lt;span class="ln">36&lt;/span>the &lt;span class="s2">&amp;#34;python3-&amp;#34;&lt;/span> prefix.
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="15-查看-rpm-包安装了哪些目录">15. 查看 RPM 包安装了哪些目录&lt;/h3>
&lt;p>要获取已安装软件包的文件列表，使用选项 &lt;strong>-qdf（query document file)&lt;/strong> 的命令。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -qdf /usr/bin/tree&lt;/span>
&lt;span class="ln">2&lt;/span>/usr/share/doc/tree-1.6.0/LICENSE
&lt;span class="ln">3&lt;/span>/usr/share/doc/tree-1.6.0/README
&lt;span class="ln">4&lt;/span>/usr/share/man/man1/tree.1.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="16-验证一个-rpm-包">16. 验证一个 RPM 包&lt;/h3>
&lt;p>验证软件包会将软件包已安装文件的信息与rpm数据库进行比较。使用 &lt;strong>-Vp (verify package)&lt;/strong> 命令来验证一个软件包。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -Vp python3-3.6.8-13.el7.x86_64.rpm&lt;/span>
&lt;span class="ln"> 2&lt;/span>未满足的依赖关系 python3-3.6.8-13.el7.x86_64：
&lt;span class="ln"> 3&lt;/span> libpython3.6m.so.1.0&lt;span class="o">()(&lt;/span>64bit&lt;span class="o">)&lt;/span> 被 python3-3.6.8-13.el7.x86_64 需要
&lt;span class="ln"> 4&lt;/span> python3-libs&lt;span class="o">(&lt;/span>x86-64&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span> 3.6.8-13.el7 被 python3-3.6.8-13.el7.x86_64 需要
&lt;span class="ln"> 5&lt;/span> python3-pip 被 python3-3.6.8-13.el7.x86_64 需要
&lt;span class="ln"> 6&lt;/span> python3-setuptools 被 python3-3.6.8-13.el7.x86_64 需要
&lt;span class="ln"> 7&lt;/span>遗漏 /usr/bin/pydoc3
&lt;span class="ln"> 8&lt;/span>遗漏 /usr/bin/pydoc3.6
&lt;span class="ln"> 9&lt;/span>遗漏 /usr/bin/python3
&lt;span class="ln">10&lt;/span>遗漏 /usr/bin/python3.6
&lt;span class="ln">11&lt;/span>遗漏 /usr/bin/python3.6m
&lt;span class="ln">12&lt;/span>遗漏 /usr/bin/pyvenv
&lt;span class="ln">13&lt;/span>遗漏 /usr/bin/pyvenv-3.6
&lt;span class="ln">14&lt;/span>遗漏 /usr/share/doc/python3-3.6.8
&lt;span class="ln">15&lt;/span>遗漏 d /usr/share/doc/python3-3.6.8/README.rst
&lt;span class="ln">16&lt;/span>遗漏 /usr/share/licenses/python3-3.6.8
&lt;span class="ln">17&lt;/span>遗漏 l /usr/share/licenses/python3-3.6.8/LICENSE
&lt;span class="ln">18&lt;/span>遗漏 d /usr/share/man/man1/python3.1.gz
&lt;span class="ln">19&lt;/span>遗漏 d /usr/share/man/man1/python3.6.1.gz
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="17-验证所有的-rpm-包">17. 验证所有的 RPM 包&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm -Va&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>S.5....T. c /etc/rc.d/rc.local
&lt;span class="ln">4&lt;/span>.......T. c /etc/dnsmasq.conf
&lt;span class="ln">5&lt;/span>.......T. /etc/ld.so.conf.d/kernel-2.6.32-279.5.2.el6.i686.conf
&lt;span class="ln">6&lt;/span>S.5....T. c /etc/yum.conf
&lt;span class="ln">7&lt;/span>S.5....T. c /etc/yum.repos.d/epel.repo
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="18-导入-gpg-key">18. 导入 GPG key&lt;/h3>
&lt;p>要验证 RHEL / CentOS / Fedora 软件包，必须导入 GPG 密钥。为此，执行以下命令，它将导入CentOS 6 GPG密钥。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost ~&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm --import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="19-列出所有导入的-rpm-gpg-key">19. 列出所有导入的 RPM GPG key&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>[root@localhost ~]# rpm -qa gpg-pubkey*
&lt;span class="ln">2&lt;/span>gpg-pubkey-85c6cd8a-4e060c35
&lt;span class="ln">3&lt;/span>gpg-pubkey-f4a80eb5-53a7ff4b
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="20-重建损坏的rpm数据库">20. 重建损坏的RPM数据库&lt;/h3>
&lt;p>有时rpm数据库损坏并停止rpm和系统上其他应用程序的所有功能。因此，当时我们需要重建rpm数据库并在以下命令的帮助下将其还原。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># cd /var/lib&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># rm __db*&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpm --rebuilddb&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="o">[&lt;/span>root@tecmint&lt;span class="o">]&lt;/span>&lt;span class="c1"># rpmdb_verify Packages&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="21-查看-rpm-的脚本">21. 查看 RPM 的脚本&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>rpm -qp --scripts &amp;lt;rpm file name&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>export LD_LIBRARY_PATH=/apps/svr/python3/lib:$LD_LIBRARY_PATH；&lt;/p></description></item><item><title>JDK1.8 源代码阅读环境搭建</title><link>https://ahamoment.cn/post/java-source-code-learn/</link><pubDate>Mon, 11 May 2020 18:57:51 +0800</pubDate><guid>https://ahamoment.cn/post/java-source-code-learn/</guid><description>
&lt;h2 id="一准备">一、准备&lt;/h2>
&lt;p>Itellj IDEA， jdk1.8 的源代码包(解压 jdk 目录下的 src.zip 包得到)&lt;/p>
&lt;h2 id="二项目结构">二、项目结构&lt;/h2>
&lt;p>IDEA 创建一个普通的 java 项目
&lt;img src="https://img-blog.csdnimg.cn/20200511113652329.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
把解压得到的 jdk1.8 的源代码复制到 source 目录下：
&lt;img src="https://img-blog.csdnimg.cn/20200511113748267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
test 目录用来写测试用例, 这里用不到 Main 方法。&lt;/p>
&lt;h2 id="三idea-设置">三、IDEA 设置&lt;/h2>
&lt;ol>
&lt;li>Project Structure -&amp;gt; Project 设置项目的 SDK (jdk8u221)，language level 选择 &lt;code>8 - Lambdas, type annotations etc.&lt;/code>
&lt;img src="https://img-blog.csdnimg.cn/20200511114245184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/li>
&lt;li>Project Structure -&amp;gt; Dependencies 选择 Modules，SDK 选择 1.8_221
&lt;img src="https://img-blog.csdnimg.cn/2020051111442075.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/li>
&lt;li>设置平台的 SDK 源代码路径为自己项目的 source 目录
&lt;img src="https://img-blog.csdnimg.cn/20200511114621171.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/li>
&lt;li>调整编译线程的堆大小，避免内存不足，编译无法通过，调整到 1G 以上。
&lt;img src="https://img-blog.csdnimg.cn/20200511114759326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/li>
&lt;li>IDEA 默认调试是不会进入到 jdk 的源代码的，在 Debugger 设置中允许进入到 jdk 的包
&lt;img src="https://img-blog.csdnimg.cn/20200511115000586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
到这里，我们完成了 idea 的设置，可以开始写个测试程序编译运行。&lt;/li>
&lt;/ol>
&lt;h2 id="四编译调式">四、编译调式&lt;/h2>
&lt;p>创建一个测试类进行调试：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.HashMap&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="nn">java.util.Map&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">Test&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">Map&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Double&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">hashMap&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">hashMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;k1&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">hashMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;k2&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">2&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">hashMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;k3&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">3&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">hashMap&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;k4&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">4&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>进入 debug 之后，就可以在源代码里写一些笔记了。
&lt;img src="https://img-blog.csdnimg.cn/20200511115402489.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/p>
&lt;h2 id="五编译问题">五、编译问题&lt;/h2>
&lt;p>经常碰到的几个问题：&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>缺少com.sun.tools包&lt;/li>
&lt;li>缺少sun.awt.UNIXToolkit 和 sun.font.FontConfigManager这两个类&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;p>解决办法可以参考这篇博客：&lt;a href="https://www.jianshu.com/p/c00db010265b">JDK1.8源码分析03之idea搭建源码阅读环境&lt;/a>&lt;/p></description></item><item><title>Spring Boot 发送邮件</title><link>https://ahamoment.cn/post/framewordk-springboot-send-email/</link><pubDate>Fri, 27 Mar 2020 18:59:19 +0800</pubDate><guid>https://ahamoment.cn/post/framewordk-springboot-send-email/</guid><description>
&lt;p>这篇文章主要介绍使用&lt;code>spring boot&lt;/code> 发送邮件。&lt;/p>
&lt;h2 id="1-maven-依赖">1. Maven 依赖&lt;/h2>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="ln">1&lt;/span>&lt;span class="c">&amp;lt;!--mail--&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-mail&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>如果需要指定版本，也可以从&lt;a href="https://mvnrepository.com/">mvn repo&lt;/a>中找到你需要的版本号。&lt;/p>
&lt;/blockquote>
&lt;h2 id="2-spring-mail-服务简介">2. Spring Mail 服务简介&lt;/h2>
&lt;p>&lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/integration.html#mail">Spring mail&lt;/a> 是Spring 框架提供的一个程序库，用于发送电子邮件，使我们不受底层邮件系统的限制，只关注客户端进行资源处理。Spring mail 包的内容如下：&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/20200320200922102.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">&lt;/p>
&lt;ul>
&lt;li>&lt;code>MailSender&lt;/code> 接口：核心接口，提供用于发送简单电子邮件的基本功能。&lt;/li>
&lt;li>&lt;code>JavaMailSender&lt;/code> 接口：上述MailSender的子接口。它支持MIME消息，并且通常与MimeMessageHelper类结合使用以创建MimeMessage。&lt;/li>
&lt;li>&lt;code>JavaMailSenderImpl &lt;/code>类：提供JavaMailSender接口的实现。它支持MimeMessage和SimpleMailMessage。&lt;/li>
&lt;li>&lt;code>SimpleMailMessage&lt;/code>类：用于创建简单的邮件，包括&lt;code>from&lt;/code>(发送者)，&lt;code>to&lt;/code>(接收者)，&lt;code>cc&lt;/code>(抄送)，&lt;code>subject&lt;/code>(主题)和&lt;code>text&lt;/code>(文本)等字段。&lt;/li>
&lt;li>&lt;code>MimeMessagePreparator&lt;/code>接口：提供用于接收MIME消息的回调接口。&lt;/li>
&lt;li>&lt;code>MimeMessageHelper&lt;/code>类：用于创建MIME消息的帮助器类。它提供在HTML布局中对图像，典型邮件附件和文本内容的支持。&lt;/li>
&lt;/ul>
&lt;h2 id="3-邮件服务配置">3. 邮件服务配置&lt;/h2>
&lt;p>引入maven依赖之后，下一步就是使用&lt;code>spring.mail.*&lt;/code>namespace 在 &lt;code>application.properties&lt;/code> 文件中配置邮件服务。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mail&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default-encoding&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">UTF-8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#邮件服务器的地址：例如smtp.qq.com,smtp.gmail.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#登陆服务器的用户名和密码&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">username&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">password&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">25&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">properties&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mail&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">smtp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">auth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="c">#启用tls连接&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">starttls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">smtp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">test-connection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-发送邮件">4. 发送邮件&lt;/h2>
&lt;h3 id="41-发送简单邮件">4.1 发送简单邮件&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Service&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MailServiceImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MailService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">JavaMailSender&lt;/span> &lt;span class="n">javaMailSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendSimpleMessage&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">SimpleMailMessage&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SimpleMailMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;abc@qq.com&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;efd@qq.com&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSubject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test send simple mail message&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Hello world!&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">javaMailSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="42-发送附件邮件">4.2 发送附件邮件&lt;/h3>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-json" data-lang="json">&lt;span class="ln"> 1&lt;/span> &lt;span class="err">@Override&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="err">public&lt;/span> &lt;span class="err">void&lt;/span> &lt;span class="err">sendMessageWithAttachment()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="err">MimeMessage&lt;/span> &lt;span class="err">message&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">javaMailSender.createMimeMessage();&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="err">try&lt;/span> &lt;span class="err">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="err">MimeMessageHelper&lt;/span> &lt;span class="err">helper&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">new&lt;/span> &lt;span class="err">MimeMessageHelper(message,&lt;/span> &lt;span class="err">true);&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="err">helper.setTo(&lt;/span>&lt;span class="nt">&amp;#34;to@qq.com&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="err">helper.setFrom(&lt;/span>&lt;span class="s2">&amp;#34;from@qq.com&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="err">helper.setSubject(&lt;/span>&lt;span class="s2">&amp;#34;Send attachment file to email&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="err">helper.setText(&lt;/span>&lt;span class="s2">&amp;#34;attachment file...&amp;#34;&lt;/span>&lt;span class="err">);&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="err">FileSystemResource&lt;/span> &lt;span class="err">file&lt;/span> &lt;span class="err">=&lt;/span> &lt;span class="err">new&lt;/span> &lt;span class="err">FileSystemResource(new&lt;/span> &lt;span class="err">File(&lt;/span>&lt;span class="s2">&amp;#34;Absolute path&amp;#34;&lt;/span>&lt;span class="err">));&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="err">helper.addAttachment(&lt;/span>&lt;span class="s2">&amp;#34;Invoice&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">file);&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="err">javaMailSender.send(message);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="err">catch&lt;/span> &lt;span class="err">(MessagingException&lt;/span> &lt;span class="err">ex)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="err">logger.error(&lt;/span>&lt;span class="nt">&amp;#34;Failed to send email to. error={}&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="err">ex.getMessage());&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="err">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="43-发送模板邮件">4.3 发送模板邮件&lt;/h3>
&lt;p>Spring 中可以作为邮件模板的有几个选择：Velocity，Freemarker，Thymeleaf。 SpringBoot 1.4.0以后 Velocity 废弃了，官方建议用Freemarker。而Thymeleaf的效率没有freemaker高(评测见参考文章【4】）。&lt;/p>
&lt;blockquote>
&lt;p>Freemarker 的语法可以参考官网的手册:https://freemarker.apache.org/docs/index.html
中文手册：https://sourceforge.net/projects/freemarker/files/chinese-manual/&lt;/p>
&lt;/blockquote>
&lt;p>同样，我们先引入 Freemarker 的 Maven 依赖。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>org.springframework.boot&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>spring-boot-starter-freemarker&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后在项目的 &lt;code>/resoource/templates&lt;/code> 目录下添加一个 Freemarker 模板文件 &lt;code>notification.flt&lt;/code>。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello world!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Hello&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">h1&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>My name is ${name}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">8&lt;/span> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">9&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 SpringBoot 的配置文件中加上 Freemarker 的相关配置：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">freemarker&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">template-loader-path&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">classpath:/templates/&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">enabled&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">cache&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">charset&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">UTF-8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">content-type&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">text/html&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">check-template-location&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>在 &lt;code>EmailServiceImpl&lt;/code> 中使用 Freemarker 模板发送邮件：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Service&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MailServiceImpl&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">MailService&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Logger&lt;/span> &lt;span class="n">logger&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">LoggerFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getLogger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">MailServiceImpl&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">JavaMailSender&lt;/span> &lt;span class="n">javaMailSender&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">FreeMarkerConfigurer&lt;/span> &lt;span class="n">freeMarkerConfigurer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendMessageWithFreemarkerTemplate&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">MimeMessage&lt;/span> &lt;span class="n">message&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">javaMailSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createMimeMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">MimeMessageHelper&lt;/span> &lt;span class="n">helper&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">MimeMessageHelper&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setTo&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;to@qq.com&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFrom&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;from@qq.com&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setSubject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Send freemarker template to email&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">Object&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">models&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">HashMap&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">put&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;name&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;freemarker&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">Template&lt;/span> &lt;span class="n">template&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">freeMarkerConfigurer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getConfiguration&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getTemplate&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;notification.flt&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">text&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">FreeMarkerTemplateUtils&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">processTemplateIntoString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">template&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">models&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">helper&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setText&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">text&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="n">javaMailSender&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">send&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="n">logger&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">error&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Failed to send email to. error={}&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>至此实现了三中方式：纯文本，富文本(图片/附件)，Freemarker模版的邮件发送功能，接下来就来测试一下我们的邮件是否能发送出去吧。&lt;/p>
&lt;h2 id="5-测试邮件发送服务">5. 测试邮件发送服务&lt;/h2>
&lt;p>我们为了测试邮件服务的发送功能，暂时可以先不用使用真正的邮件服务器，而是换成&lt;a href="http://www.icegreen.com/greenmail/">GreenMail&lt;/a>。
GreenMail是用于测试目的的电子邮件服务器，可以用于邮件集成测试或用于开发的轻量级沙盒邮件服务器。具体的使用方法可以参考官网上的&lt;a href="https://github.com/greenmail-mail-test/greenmail/tree/master/greenmail-core/src/test/java/com/icegreen/greenmail/examples">用例&lt;/a>。&lt;/p>
&lt;p>这里先引入GreenMail 的Maven依赖：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="ln">1&lt;/span>&lt;span class="nt">&amp;lt;dependency&amp;gt;&lt;/span>
&lt;span class="ln">2&lt;/span> &lt;span class="nt">&amp;lt;groupId&amp;gt;&lt;/span>com.icegreen&lt;span class="nt">&amp;lt;/groupId&amp;gt;&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nt">&amp;lt;artifactId&amp;gt;&lt;/span>greenmail&lt;span class="nt">&amp;lt;/artifactId&amp;gt;&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="nt">&amp;lt;version&amp;gt;&lt;/span>1.5.11&lt;span class="nt">&amp;lt;/version&amp;gt;&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nt">&amp;lt;scope&amp;gt;&lt;/span>test&lt;span class="nt">&amp;lt;/scope&amp;gt;&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nt">&amp;lt;/dependency&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在Spring boot 的测试文件(application-test.yaml)中配置用于邮件服务的相关属性。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="ln"> 1&lt;/span>&lt;span class="nt">spring&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mail&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">default-encoding&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">UTF-8&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">host&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">localhost&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">username&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">abc@qq.com&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">password&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">password&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">port&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="m">3025&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">properties&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">mail&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">smtp&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">debug&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">auth&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">starttls&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">true&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">protocol&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="l">smtp&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="nt">test-connection&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="kc">false&lt;/span>&lt;span class="w">
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们创建一个自定义的 JUnit Rule 来初始化和停止GreenMail邮件服务器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">SmtpServerRule&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">ExternalResource&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="n">设置发送邮件服务的用户的用户名&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">USER_PASSWORD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;password&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="err">#&lt;/span> &lt;span class="n">设置发送邮件服务用户的密码&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="n">USER_NAME&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;abc@qq.com&amp;#34;&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">GreenMail&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">before&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">Throwable&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">before&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">smtpServer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">GreenMail&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServerSetupTest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SMTP&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">// setup user on the mail server
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUser&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">USER_NAME&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">USER_PASSWORD&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="nf">getMessage&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getReceivedMessages&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="kd">protected&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">after&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">after&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="n">smtpServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后就可以开始写我们的测试用例了。
我们使用JUnit @Rule注解配置SmtpServerRule。这标记了在每个集成测试之前和之后要调用的自定义规则。并允许我们拦截传入的电子邮件。最后，我们做出一些断言并验证发送的电子邮件是否等于接收的电子邮件。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@ActiveProfiles&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;test&amp;#34;&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nd">@SpringBootTest&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">webEnvironment&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">SpringBootTest&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">WebEnvironment&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">RANDOM_PORT&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nd">@RunWith&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">SpringRunner&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">class&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MailServiceImplTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="nd">@Rule&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">SmtpServerRule&lt;/span> &lt;span class="n">smtpServerRule&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">SmtpServerRule&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="n">MailService&lt;/span> &lt;span class="n">mailService&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="nd">@Test&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">sendSimpleMessage&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">MessagingException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">mailService&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sendSimpleMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="n">MimeMessage&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">messages&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">smtpServerRule&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMessage&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;Test send simple mail message&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">messages&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getSubject&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;abc@qq.com&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">messages&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getFrom&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="n">assertEquals&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;efd@qq.com&amp;#34;&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">messages&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">getAllRecipients&lt;/span>&lt;span class="o">()[&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">].&lt;/span>&lt;span class="na">toString&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>另外的两种邮件参考上面的代码实现。&lt;/p>
&lt;h2 id="6-总结">6. 总结&lt;/h2>
&lt;p>在这篇文章中，我们展示了如何通过Spring Boot应用程序设置和发送电子邮件。所有这些示例和代码片段的实现都可以在&lt;a href="https://github.com/XueqiangChen/footmark">MyGitHub&lt;/a>项目中找到。&lt;/p>
&lt;h2 id="7-参考文章">7. 参考文章&lt;/h2>
&lt;p>【1】&lt;a href="https://blog.codeleak.pl/2014/09/testing-mail-code-in-spring-boot.html">Testing mail code in Spring Boot application&lt;/a>&lt;/p>
&lt;p>【2】&lt;a href="https://memorynotfound.com/spring-mail-integration-testing-junit-greenmail-example/">Spring Mail Integration Testing with JUnit and GreenMail Example&lt;/a>&lt;/p>
&lt;p>【3】&lt;a href="https://www.baeldung.com/spring-email">Guide to Spring Email&lt;/a>&lt;/p>
&lt;p>【4】&lt;a href="https://blog.52itstyle.vip/archives/1264/?spm=a2c4e.10696291.0.0.621d19a4VEN4S9">SpringBoot开发案例之整合mail发送服务&lt;/a>&lt;/p></description></item><item><title>Linux Shell 输入/输出重定向</title><link>https://ahamoment.cn/post/linux-shell-input-output-redirect/</link><pubDate>Tue, 26 Nov 2019 19:54:15 +0800</pubDate><guid>https://ahamoment.cn/post/linux-shell-input-output-redirect/</guid><description>
&lt;p>大多数 UNIX 系统命令从你的终端接受输入并将所产生的输出发送回到您的终端。一个命令通常从一个叫标准输入的地方读取输入，默认情况下，这恰好是你的终端。同样，一个命令通常将其输出写入到标准输出，默认情况下，这也是你的终端。&lt;/p>
&lt;p>重定向命令列表如下：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>command &amp;gt; file&lt;/td>
&lt;td>将输出重定向到 file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>command &amp;lt; file&lt;/td>
&lt;td>将输入重定向到 file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>command &amp;gt;&amp;gt; file&lt;/td>
&lt;td>将输出以追加的方式重定向到 file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n &amp;gt; file&lt;/td>
&lt;td>将文件描述符为 n 的文件重定向到 file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n &amp;gt;&amp;gt; file&lt;/td>
&lt;td>将文件描述符为 n 的文件以追加的方式重定向到 file。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n &amp;gt;&amp;amp; m&lt;/td>
&lt;td>将输出文件 m 和 n 合并。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>n &amp;lt;&amp;amp; m&lt;/td>
&lt;td>将输入文件 m 和 n 合并。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&amp;lt;&amp;lt; tag&lt;/td>
&lt;td>将开始标记 tag 和结束标记 tag 之间的内容作为输入。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>需要注意的是文件描述符 0 通常是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。&lt;/p>
&lt;/blockquote>
&lt;h2 id="输出重定向">输出重定向&lt;/h2>
&lt;p>重定向一般通过在命令间插入特定的符号来实现。特别的，这些符号的语法如下所示:&lt;/p>
&lt;p>&lt;code>command1 &amp;gt; file1&lt;/code>&lt;/p>
&lt;p>上面这个命令执行command1然后将输出的内容存入file1。&lt;/p>
&lt;p>注意任何file1内的已经存在的内容将被新内容替代。如果要将新内容添加在文件末尾，请使用&amp;gt;&amp;gt;操作符。&lt;/p>
&lt;h3 id="实例">实例&lt;/h3>
&lt;p>执行下面的 who 命令，它将命令的完整的输出重定向在用户文件中(users):&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ who &amp;gt; users
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行后，并没有在终端输出信息，这是因为输出已被从默认的标准输出设备（终端）重定向到指定的文件。&lt;/p>
&lt;p>你可以使用 cat 命令查看文件内容：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ cat users
&lt;span class="ln">2&lt;/span>_mbsetupuser console Oct &lt;span class="m">31&lt;/span> 17:35
&lt;span class="ln">3&lt;/span>laolan console Oct &lt;span class="m">31&lt;/span> 17:35
&lt;span class="ln">4&lt;/span>laolan ttys000 Dec &lt;span class="m">1&lt;/span> 11:33
&lt;/code>&lt;/pre>&lt;/div>&lt;p>输出重定向会覆盖文件内容，请看下面的例子：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;W3Cschool教程：www.w3cschool.cn&amp;#34;&lt;/span> &amp;gt; users
&lt;span class="ln">2&lt;/span>$ cat users
&lt;span class="ln">3&lt;/span>W3Cschool教程：www.w3cschool.cn
&lt;span class="ln">4&lt;/span>$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果不希望文件内容被覆盖，可以使用 &amp;gt;&amp;gt; 追加到文件末尾，例如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ &lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;W3Cschool教程：www.w3cschool.cn&amp;#34;&lt;/span> &amp;gt;&amp;gt; users
&lt;span class="ln">2&lt;/span>$ cat users
&lt;span class="ln">3&lt;/span>W3Cschool教程：www.w3cschool.cn
&lt;span class="ln">4&lt;/span>W3Cschool教程：www.w3cschool.cn
&lt;span class="ln">5&lt;/span>$
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="输入重定向">输入重定向&lt;/h2>
&lt;p>和输出重定向一样，Unix 命令也可以从文件获取输入，语法为：&lt;/p>
&lt;p>&lt;code>command1 &amp;lt; file1&lt;/code>&lt;/p>
&lt;p>这样，本来需要从键盘获取输入的命令会转移到文件读取内容。&lt;/p>
&lt;p>注意：输出重定向是大于号(&amp;gt;)，输入重定向是小于号(&amp;lt;)。&lt;/p>
&lt;h3 id="实例-1">实例&lt;/h3>
&lt;p>接着以上实例，我们需要统计 users 文件的行数,执行以下命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ wc -l users
&lt;span class="ln">2&lt;/span> &lt;span class="m">2&lt;/span> users
&lt;/code>&lt;/pre>&lt;/div>&lt;p>也可以将输入重定向到 users 文件：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ wc -l &amp;lt; users
&lt;span class="ln">2&lt;/span> &lt;span class="m">2&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意：上面两个例子的结果不同：第一个例子，会输出文件名；第二个不会，因为它仅仅知道从标准输入读取内容。&lt;/p>
&lt;p>&lt;code>command1 &amp;lt; infile &amp;gt; outfile&lt;/code>&lt;/p>
&lt;p>同时替换输入和输出，执行command1，从文件infile读取内容，然后将输出写入到outfile中。&lt;/p>
&lt;h2 id="重定向深入讲解">重定向深入讲解&lt;/h2>
&lt;p>一般情况下，每个 Unix/Linux 命令运行时都会打开三个文件：&lt;/p>
&lt;ul>
&lt;li>标准输入文件(stdin)：stdin的文件描述符为0，Unix程序默认从stdin读取数据。&lt;/li>
&lt;li>标准输出文件(stdout)：stdout 的文件描述符为1，Unix程序默认向stdout输出数据。&lt;/li>
&lt;li>标准错误文件(stderr)：stderr的文件描述符为2，Unix程序会向stderr流中写入错误信息。&lt;/li>
&lt;/ul>
&lt;p>默认情况下，command &amp;gt; file 将 stdout 重定向到 file，command &amp;lt; file 将stdin 重定向到 file。&lt;/p>
&lt;p>如果希望 stderr 重定向到 file，可以这样写：&lt;/p>
&lt;p>&lt;code>$ command 2 &amp;gt; file&lt;/code>&lt;/p>
&lt;p>如果希望 stderr 追加到 file 文件末尾，可以这样写：&lt;/p>
&lt;p>&lt;code>$ command 2 &amp;gt;&amp;gt; file&lt;/code>&lt;/p>
&lt;p>2 表示标准错误文件(stderr)。&lt;/p>
&lt;p>如果希望将 stdout 和 stderr 合并后重定向到 file，可以这样写：&lt;/p>
&lt;p>&lt;code>$ command &amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code>&lt;/p>
&lt;p>或者&lt;/p>
&lt;p>&lt;code>$ command &amp;gt;&amp;gt; file 2&amp;gt;&amp;amp;1&lt;/code>&lt;/p>
&lt;p>如果希望对 stdin 和 stdout 都重定向，可以这样写：&lt;/p>
&lt;p>&lt;code>$ command &amp;lt; file1 &amp;gt;file2&lt;/code>&lt;/p>
&lt;p>command 命令将 stdin 重定向到 file1，将 stdout 重定向到 file2。&lt;/p>
&lt;h2 id="here-document">Here Document&lt;/h2>
&lt;p>Here Document 是 Shell 中的一种特殊的重定向方式，用来将输入重定向到一个交互式 Shell 脚本或程序。&lt;/p>
&lt;p>它的基本的形式如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">command&lt;/span> &lt;span class="s">&amp;lt;&amp;lt; delimiter
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s"> document
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s">delimiter&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它的作用是将两个 delimiter 之间的内容(document) 作为输入传递给 command。&lt;/p>
&lt;p>注意：&lt;/p>
&lt;p>结尾的delimiter 一定要顶格写，前面不能有任何字符，后面也不能有任何字符，包括空格和 tab 缩进。
开始的delimiter前后的空格会被忽略掉。&lt;/p>
&lt;h3 id="实例-2">实例&lt;/h3>
&lt;p>在命令行中通过 wc -l 命令计算 Here Document 的行数：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ wc -l &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="s"> 欢迎来到
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="s"> W3Cschool教程
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="s"> www.w3cschool.cn
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="m">3&lt;/span> &lt;span class="c1"># 输出结果为 3 行&lt;/span>
&lt;span class="ln">7&lt;/span>$
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们也可以将 Here Document 用在脚本中，例如：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1"># author:W3Cschool教程&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="c1"># url:www.w3cschool.cn&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; EOF
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="s">欢迎来到
&lt;/span>&lt;span class="ln">7&lt;/span>&lt;span class="s">W3Cschool教程
&lt;/span>&lt;span class="ln">8&lt;/span>&lt;span class="s">www.w3cschool.cn
&lt;/span>&lt;span class="ln">9&lt;/span>&lt;span class="s">EOF&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>执行以上脚本，输出结果：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>欢迎来到
&lt;span class="ln">2&lt;/span>W3Cschool教程
&lt;span class="ln">3&lt;/span>www.w3cschool.cn
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="devnull-文件">/dev/null 文件&lt;/h2>
&lt;p>如果希望执行某个命令，但又不希望在屏幕上显示输出结果，那么可以将输出重定向到 /dev/null：&lt;/p>
&lt;p>&lt;code>$ command &amp;gt; /dev/null&lt;/code>&lt;/p>
&lt;p>/dev/null 是一个特殊的文件，写入到它的内容都会被丢弃；如果尝试从该文件读取内容，那么什么也读不到。但是 /dev/null 文件非常有用，将命令的输出重定向到它，会起到&amp;quot;禁止输出&amp;quot;的效果。&lt;/p>
&lt;p>如果希望屏蔽 stdout 和 stderr，可以这样写：&lt;/p>
&lt;p>&lt;code>$ command &amp;gt; /dev/null 2&amp;gt;&amp;amp;1&lt;/code>&lt;/p>
&lt;blockquote>
&lt;p>注意：0 是标准输入（STDIN），1 是标准输出（STDOUT），2 是标准错误输出（STDERR）。&lt;/p>
&lt;/blockquote></description></item><item><title>IntellJ IDEA 远程调试 Java 程序</title><link>https://ahamoment.cn/post/java-remote-debug/</link><pubDate>Thu, 21 Nov 2019 20:04:16 +0800</pubDate><guid>https://ahamoment.cn/post/java-remote-debug/</guid><description>
&lt;p>&lt;img src="https://img-blog.csdnimg.cn/20191120184024931.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_20,color_FFFFFF,t_70" alt="java remote debug">&lt;/p>
&lt;h2 id="1-前言">1. 前言&lt;/h2>
&lt;p>当我们发现服务器上的应用发生某些故障，并且没有足够的日志来定位问题的时候，就会觉得非常头疼，尤其是在生产环境中想要对应用进行调试并非易事。在本文中，我们使用Java平台提供的标准功能来配置正在运行的Web服务器和调试应用程序。&lt;/p>
&lt;h2 id="2-配置">2. 配置&lt;/h2>
&lt;p>在开始之前，我们有必要介绍一下本文的示例工程所用的工具和环境：&lt;/p>
&lt;ul>
&lt;li>应用使用spring boot框架，部署在linux中，由于 spring boot 内置tomcat服务器，因此部署的时通过maven/gradle打包后，直接用 &lt;code>java -jar test.jar&lt;/code> 命令启动应用。&lt;/li>
&lt;li>调试工具用的是IntelliJ idea&lt;/li>
&lt;/ul>
&lt;h3 id="21-java-启动参数配置">2.1 Java 启动参数配置&lt;/h3>
&lt;p>Java Platform Debugging Architecture（JPDA）是一组可扩展的API，其中一部分是称为JDWP（Java Debug Wire Protocol）的特殊调试协议。&lt;/p>
&lt;p>JDWP是用于在应用程序和调试器进程之间进行通信的协议，可用于对正在运行的Java应用程序进行远程故障排除。&lt;/p>
&lt;p>要配置远程应用程序进行调试，您必须在Java应用的启动参数中为此协议指定参数。&lt;/p>
&lt;p>&lt;code>java -Xdebug -Xrunjdwp:transport=dt_socket,address=8000,server=y,suspend=y Test&lt;/code>&lt;/p>
&lt;p>这些参数要做的事情就是启用远程调试和配置有效的选项：&lt;/p>
&lt;ul>
&lt;li>&lt;code>-Xdebug&lt;/code>：参数启用debug调试特性&lt;/li>
&lt;li>&lt;code>-Xrunjdwp&lt;/code>：使用几个重要参数配置JDWP协议。&lt;/li>
&lt;/ul>
&lt;p>从 JDK5 开始，可以使用 &lt;code>-agentlib:jdwp&lt;/code> 选项，而不是 &lt;code>-Xdebug&lt;/code> 和 &lt;code>-Xrunjdwp&lt;/code>。但如果连接到 JDK5 以前的 VM，只能选择 &lt;code>-Xdebug&lt;/code> 和 &lt;code>-Xrunjdwp&lt;/code>。&lt;/p>
&lt;p>&lt;code>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8001 Test&lt;/code>&lt;/p>
&lt;p>JDK 9 之后， 由于Java 9 JDWP代理默认情况下仅侦听本地网络接口，因此将拒绝远程连接。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://www.oracle.com/technetwork/java/javase/9-notes-3745703.html#JDK-8041435">JDK 9 Realease Notes&lt;/a>
core-svc/debugger
JDWP socket connector accept only local connections by default
The JDWP socket connector has been changed to bind to localhost only if no ip address or hostname is specified on the agent command line. A hostname of asterisk (*) may be used to achieve the old behavior which is to bind the JDWP socket connector to all available interfaces; this is not secure and not recommended.&lt;/p>
&lt;/blockquote>
&lt;p>因此对于 JDK 9 及更高的版本，启动debug的命令如下：&lt;/p>
&lt;p>&lt;code>java -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8001 Test&lt;/code>&lt;/p>
&lt;p>下面介绍一下jdwp提供的一些子选项参数：&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;code>transport&lt;/code>：指定运行的被调试应用和调试者之间的通信协议。这里通常使用套接字传输。但是在 Windows 平台上也可以使用共享内存传输。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>server&lt;/code>：如果值为 y，目标应用程序监听将要连接的调试器应用程序。否则，它将连接到特定地址上的调试器应用程序。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;code>suspend&lt;/code>：如果值为 n 用来告知 JVM 立即执行，不要等待未来将要附着上/连上（attached）的调试者。如果设成 y, 则应用将暂停不运行，直到有调试者连接上&lt;/p>
&lt;blockquote>
&lt;p>suspend=y的一个比较适用的场景是，当debug一个会阻止应用成功启动的问题时， 通过suspend=y可以确保调试者连上来之后再启动应用，否则应用已经启动报错了再调试也没意义了。&lt;/p>
&lt;/blockquote>
&lt;/li>
&lt;li>
&lt;p>&lt;code>address&lt;/code>：远程被调试应用开通的端口，可定义其他端口。&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>服务端使用jdwp的调试参数成功启动后，我们可以看到java进程如下所示：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@test&lt;span class="o">]&lt;/span>$ ps -ef &lt;span class="p">|&lt;/span> grep java
&lt;span class="ln">2&lt;/span>root &lt;span class="m">1323&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="m">99&lt;/span> 11:36 ? 00:00:30 java -Dspring.profiles.active&lt;span class="o">=&lt;/span>default -agentlib:jdwp&lt;span class="o">=&lt;/span>&lt;span class="nv">transport&lt;/span>&lt;span class="o">=&lt;/span>dt_socket,server&lt;span class="o">=&lt;/span>y,suspend&lt;span class="o">=&lt;/span>n,address&lt;span class="o">=&lt;/span>&lt;span class="m">2222&lt;/span> -jar ./test.jar
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="22-intellij-idea-配置">2.2 IntelliJ idea 配置&lt;/h3>
&lt;p>首先保证 IDEA 里面已经打开了需要远程调试的代码，注意代码要与线上的代码一致，这里也可以用war/jar包来调。
然后点击 Run ➝ Edit Configurations ➝ **+ **按钮 ➝ Remote
&lt;img src="https://img-blog.csdnimg.cn/20191121114403417.png" alt="在这里插入图片描述">
&lt;img src="https://img-blog.csdnimg.cn/20191121114516147.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
这里只需要填好服务器的地址和debug端口后，点击&amp;quot;debug&amp;quot;按钮启动即可。
&lt;img src="https://img-blog.csdnimg.cn/20191121114850859.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
当我们看到打印出这行信息时，就可以对需要调试的代码打断点调试了。&lt;/p>
&lt;h2 id="3-远程-jvm-调试的工作原理">3. 远程 JVM 调试的工作原理&lt;/h2>
&lt;p>一切源于被称作 Agents 的东西。&lt;/p>
&lt;p>运行着各种编译过的 .class 文件的JVM， 有一种特性，可以允许外部的库（Java或C++写的libraries）在运行时注入到 JVM 中。这些外部的库就称作 Agents, 他们有能力修改运行中 .class 文件的内容。&lt;/p>
&lt;p>这些 Agents 拥有的这些 JVM 的功能权限， 是在 JVM 内运行的 Java Code 所无法获取的， 他们能用来做一些有趣的事情，比如修改运行中的源码， 性能分析等。 像 JRebel 工具就是用了这些功能达到魔术般的效果。&lt;/p>
&lt;p>传递一个 Agent Lib 给 JVM, 通过添加 &lt;code>agentlib:libname[=options]&lt;/code> 格式的启动参数即可办到。像上面的远程调试我们用的就是
&lt;code>-agentlib:jdwp=transport=dt_socket,address=1043,server=y,suspend=n&lt;/code>来引入 jdwp 这个 Agent 的。&lt;/p>
&lt;p>jdwp 是一个 JVM 特定的 JDWP（Java Debug Wire Protocol） 可选实现，用来定义调试者与运行JVM之间的通讯，它的是通过 JVM 本地库的 jdwp.so 或者 jdwp.dll 支持实现的。&lt;/p>
&lt;p>JPDA 由两个接口（分别是 JVM Tool Interface 和 JDI）、一个协议（Java Debug Wire Protocol）和两个用于合并它们的软件组件（后端和前端）组成。
&lt;img src="https://img-blog.csdnimg.cn/20191121120557909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2N4cTIxMTE1MDQxMDQ=,size_16,color_FFFFFF,t_70" alt="Java 调试平台架构">&lt;/p>
&lt;ul>
&lt;li>JVM TI-Java VM工具接口。JVM TI是J2SE 5.0中引入的新接口，它替代了JVMDI。它定义了VM提供的调试服务。&lt;/li>
&lt;li>JDWP-Java调试线协议。定义调试对象和调试器进程之间的通信。&lt;/li>
&lt;li>JDI-Java调试接口。定义高级Java语言界面，工具开发人员可以轻松地使用该界面来编写远程调试器应用程序。&lt;/li>
&lt;/ul>
&lt;p>简单来说， jdwp agent 会建立运行应用的 JVM 和调试者（本地或者远程）之间的桥梁。既然他是一个Agent Library, 它就有能力拦截运行的代码。&lt;/p>
&lt;p>在 JVM 架构里， debugging 功能在 JVM 本身的内部是找不到的，它是一种抽象到外部工具的方式（也称作调试者 debugger）。这些调试工具或者运行在 JVM 的本地 或者在远程。这是一种解耦，模块化的架构。&lt;/p>
&lt;p>概述此模块化体系结构的所有规范都包含在Java平台中，调试器体系结构，JPDA，您可以在此处阅读其详细介绍： &lt;a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/architecture.html">Java Platform Debugger Architecture Overview.&lt;/a>&lt;/p>
&lt;h2 id="4-总结">4. 总结&lt;/h2>
&lt;p>在本文中，我们简单介绍了如何配置Java服务器以进行远程调试，以及如何使用简单的控制台工具来调试应用程序。但是需要注意的是，调试模式会降低服务器的速度，因为它会禁用一些JVM优化。另外，调试模式可能会带来潜在的安全风险。您需要通过特定端口向调试器提供对服务器的访问权限，这对于用心不良的人来说是另一个潜在的安全漏洞。所以并不建议长期开着调试模式跑应用。&lt;/p>
&lt;h2 id="参考文档">参考文档&lt;/h2>
&lt;p>[1] &lt;a href="https://www.jianshu.com/p/d168ecdce022">Java远程调试（Remote Debugging）的那些事&lt;/a>&lt;/p>
&lt;p>[2] &lt;a href="https://blog.trifork.com/2014/07/14/how-to-remotely-debug-application-running-on-tomcat-from-within-intellij-idea/">How to Remotely Debug Application Running on Tomcat From Within Intellij IDEA&lt;/a>&lt;/p>
&lt;p>[3] &lt;a href="https://stackify.com/java-remote-debugging/">A Practical Guide to Java Remote Debugging&lt;/a>&lt;/p>
&lt;p>[4] &lt;a href="https://www.ibm.com/developerworks/cn/opensource/os-eclipse-javadebug/index.html">使用 Eclipse 远程调试 Java 应用程序&lt;/a>&lt;/p>
&lt;p>[5] &lt;a href="https://docs.oracle.com/javase/7/docs/technotes/guides/jpda/architecture.html">JPDA&lt;/a>&lt;/p>
&lt;p>[6] &lt;a href="https://www.ibm.com/developerworks/cn/java/j-lo-jpda1/index.html">深入 Java 调试体系&lt;/a>&lt;/p>
&lt;p>[7] &lt;a href="http://dev-aux.com/java/java-local-and-remote-jvm-debugging-jdk-8-and-later">Java: local and remote JVM debugging — JDK 8, 9 and later&lt;/a>&lt;/p></description></item><item><title>自动配置Git仓库提交作者</title><link>https://ahamoment.cn/post/tool-git-set-config/</link><pubDate>Sat, 16 Nov 2019 19:12:17 +0800</pubDate><guid>https://ahamoment.cn/post/tool-git-set-config/</guid><description>
&lt;h2 id="1-背景">1. 背景&lt;/h2>
&lt;p>公司使用的代码仓库是&lt;code>Gitlab&lt;/code>，个人代码仓库又是&lt;code>Github&lt;/code>。每次提交代码的时候，需要切换不同的提交作者和提交邮箱，非常容易出错。
这个脚本是根据repo url自动设置提交作者，避免每次手动配置。&lt;/p>
&lt;h2 id="2-方法">2. 方法&lt;/h2>
&lt;h3 id="21-安装git">2.1 安装Git&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Linux&lt;/code> 上安装&lt;code>Git&lt;/code>直接使用 &lt;code>sudo yum install git&lt;/code> 或者 &lt;code>sudo apt-get install git&lt;/code> 命令即可。&lt;/li>
&lt;li>&lt;code>Windows&lt;/code> 上安装到官网下载安装软件安装即可。&lt;a href="https://git-scm.com/downloads">安装地址&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="22-添加脚本">2.2 添加脚本&lt;/h3>
&lt;p>在/root/下添加&lt;code>.git-templates/hooks&lt;/code> 目录，添加脚本&lt;code>post-checkout&lt;/code>，脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">#checkout hook to locally set user name and email based on user defined patterns&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#The patterns are matched against the clone url.&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">#Based on http://www.dvratil.cz/2015/12/git-trick-628-automatically-set-commit-author-based-on-repo-url/&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">function&lt;/span> warn &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> Email and author not initialized in local config!&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local user.email&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local user.name&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="nv">$1&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0000000000000000000000000000000000000000&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> -n &lt;span class="nv">$email&lt;/span> &lt;span class="o">||&lt;/span> -n &lt;span class="nv">$name&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#get remote name:&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># only one: take it&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1"># more: take &amp;#34;origin&amp;#34;, or fail&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="o">[[&lt;/span> &lt;span class="k">$(&lt;/span>git remote &lt;span class="p">|&lt;/span> wc -l&lt;span class="k">)&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git remote &lt;span class="o">||&lt;/span> git remote &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;^origin&lt;/span>$&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="nv">$remote&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">25&lt;/span> warn &lt;span class="s2">&amp;#34;Failed to detect remote.&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local remote.&lt;span class="si">${&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="si">}&lt;/span>.url&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> ! -f ~/.git-clone-init &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">32&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; INPUT &amp;gt; ~/.git-clone-init
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="s">#!/bin/bash
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="s">case &amp;#34;\$url&amp;#34; in
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="s"> *@github.com:* ) email=&amp;#34;&amp;#34;; name=&amp;#34;&amp;#34;;;
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="s"> *//github.com/* ) email=&amp;#34;&amp;#34;; name=&amp;#34;&amp;#34;;;
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="s">esac
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="s">INPUT&lt;/span>
&lt;span class="ln">40&lt;/span> warn &lt;span class="s2">&amp;#34;\nMissing file ~/.git-clone-init. Template created...&amp;#34;&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">43&lt;/span>. ~/.git-clone-init
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="nv">$name&lt;/span> &lt;span class="o">||&lt;/span> -z &lt;span class="nv">$email&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">46&lt;/span> warn &lt;span class="s2">&amp;#34;Failed to detect identity using ~/.git-clone-init.&amp;#34;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">49&lt;/span>
&lt;span class="ln">50&lt;/span>git config --local user.email &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$email&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">51&lt;/span>git config --local user.name &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">52&lt;/span>
&lt;span class="ln">53&lt;/span>&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\nIdentity set to &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2"> &amp;lt;&lt;/span>&lt;span class="nv">$email&lt;/span>&lt;span class="s2">&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-添加配置文件">2.3 添加配置文件&lt;/h3>
&lt;p>在&lt;code>/root/.gitconfig&lt;/code>文件中（没有的话自行创建）添加如下内容，指定使用的模板：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>user&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>init&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nv">templatedir&lt;/span> &lt;span class="o">=&lt;/span> /root/.git-templates
&lt;span class="ln">4&lt;/span>&lt;span class="o">[&lt;/span>push&lt;span class="o">]&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nv">default&lt;/span> &lt;span class="o">=&lt;/span> simple
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>/root/.git-clone-init&lt;/code>中针对不同的git仓库添加提交作者和邮箱：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$url&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;span class="ln">4&lt;/span> *@github.com:* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@qq.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">5&lt;/span> *//github.com/* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@qq.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">6&lt;/span> *@gitlab.com:* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@google.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">7&lt;/span> *//gitlab.com/* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@google.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="24-验证">2.4 验证&lt;/h3>
&lt;ol>
&lt;li>更改脚本&lt;code>post-checkout&lt;/code>的权限并执行。
&lt;code>sudo chmod 777 post-checkout&lt;/code>
&lt;code>sh post-checkout&lt;/code>&lt;/li>
&lt;li>尝试从github 克隆一个仓库：
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@yxj-test git_storage&lt;span class="o">]&lt;/span>&lt;span class="c1"># git clone git@github.com:XueqiangChen/scripts.git&lt;/span>
&lt;span class="ln"> 2&lt;/span>Cloning into &lt;span class="s1">&amp;#39;scripts&amp;#39;&lt;/span>...
&lt;span class="ln"> 3&lt;/span>Warning: Permanently added the RSA host key &lt;span class="k">for&lt;/span> IP address &lt;span class="s1">&amp;#39;52.74.223.119&amp;#39;&lt;/span> to the list of known hosts.
&lt;span class="ln"> 4&lt;/span>remote: Enumerating objects: 8, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 5&lt;/span>remote: Counting objects: 100% &lt;span class="o">(&lt;/span>8/8&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 6&lt;/span>remote: Compressing objects: 100% &lt;span class="o">(&lt;/span>6/6&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 7&lt;/span>remote: Total &lt;span class="m">8&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, reused &lt;span class="m">5&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 8&lt;/span>Receiving objects: 100% &lt;span class="o">(&lt;/span>8/8&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>Identity &lt;span class="nb">set&lt;/span> to XueqiangChen &amp;lt;569503960@qq.com&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>``
可以看到最后一行的打印出来的信息，自动针对该仓库设置了提交作者和邮箱，下一次提交就会使用这个提交作者和邮箱。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>欢迎访问&lt;a href="https://github.com/XueqiangChen/scripts">GITHUB&lt;/a>查看具体代码！！！&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>参考文章&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dvratil.cz/2015/12/git-trick-628-automatically-set-commit-author-based-on-repo-url/">GIT TRICK #628: AUTOMATICALLY SET COMMIT AUTHOR BASED ON REPO URL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的GIT教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item><item><title>Markdown Syntax Guide</title><link>https://ahamoment.cn/post/markdown-syntax/</link><pubDate>Mon, 11 Mar 2019 00:00:00 +0000</pubDate><guid>https://ahamoment.cn/post/markdown-syntax/</guid><description>
&lt;p>This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p>
&lt;h2 id="headings">Headings&lt;/h2>
&lt;p>The following HTML &lt;code>&amp;lt;h1&amp;gt;&lt;/code>—&lt;code>&amp;lt;h6&amp;gt;&lt;/code> elements represent six levels of section headings. &lt;code>&amp;lt;h1&amp;gt;&lt;/code> is the highest section level while &lt;code>&amp;lt;h6&amp;gt;&lt;/code> is the lowest.&lt;/p>
&lt;h1 id="h1">H1&lt;/h1>
&lt;h2 id="h2">H2&lt;/h2>
&lt;h3 id="h3">H3&lt;/h3>
&lt;h4 id="h4">H4&lt;/h4>
&lt;h5 id="h5">H5&lt;/h5>
&lt;h6 id="h6">H6&lt;/h6>
&lt;h2 id="paragraph">Paragraph&lt;/h2>
&lt;p>Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p>
&lt;p>Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p>
&lt;h2 id="blockquotes">Blockquotes&lt;/h2>
&lt;p>The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code>footer&lt;/code> or &lt;code>cite&lt;/code> element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p>
&lt;h4 id="blockquote-without-attribution">Blockquote without attribution&lt;/h4>
&lt;blockquote>
&lt;p>Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong>Note&lt;/strong> that you can use &lt;em>Markdown syntax&lt;/em> within a blockquote.&lt;/p>
&lt;/blockquote>
&lt;h4 id="blockquote-with-attribution">Blockquote with attribution&lt;/h4>
&lt;blockquote>
&lt;p>Don't communicate by sharing memory, share memory by communicating.&lt;br>
— &lt;cite>Rob Pike&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/cite>&lt;/p>
&lt;/blockquote>
&lt;h2 id="tables">Tables&lt;/h2>
&lt;p>Tables aren't part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Name&lt;/th>
&lt;th>Age&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>Bob&lt;/td>
&lt;td>27&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Alice&lt;/td>
&lt;td>23&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h4 id="inline-markdown-within-tables">Inline Markdown within tables&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>Italics&lt;/th>
&lt;th>Bold&lt;/th>
&lt;th>Code&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;em>italics&lt;/em>&lt;/td>
&lt;td>&lt;strong>bold&lt;/strong>&lt;/td>
&lt;td>&lt;code>code&lt;/code>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="code-blocks">Code Blocks&lt;/h2>
&lt;h4 id="code-block-with-backticks">Code block with backticks&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c">&amp;lt;!-- this line is extraneous 2Error from server (Forbidden): deployments.apps is forbidden: User &amp;#34;chiptest&amp;#34; cannot create resource &amp;#34;deployments&amp;#34; in API group &amp;#34;apps&amp;#34; in the namespace &amp;#34;default&amp;#34; --&amp;gt;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="code-block-indented-with-four-spaces">Code block indented with four spaces&lt;/h4>
&lt;pre>&lt;code>&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code>&lt;/pre>
&lt;h4 id="code-block-with-hugos-internal-highlight-shortcode">Code block with Hugo's internal highlight shortcode&lt;/h4>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">&amp;lt;!doctype html&amp;gt;&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span> &lt;span class="na">lang&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;en&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Example HTML5 Document&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>Test&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;h2 id="list-types">List Types&lt;/h2>
&lt;h4 id="ordered-list">Ordered List&lt;/h4>
&lt;ol>
&lt;li>First item&lt;/li>
&lt;li>Second item&lt;/li>
&lt;li>Third item&lt;/li>
&lt;/ol>
&lt;h4 id="unordered-list">Unordered List&lt;/h4>
&lt;ul>
&lt;li>List item&lt;/li>
&lt;li>Another item&lt;/li>
&lt;li>And another item&lt;/li>
&lt;/ul>
&lt;h4 id="nested-list">Nested list&lt;/h4>
&lt;ul>
&lt;li>Fruit
&lt;ul>
&lt;li>Apple&lt;/li>
&lt;li>Orange&lt;/li>
&lt;li>Banana&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Dairy
&lt;ul>
&lt;li>Milk&lt;/li>
&lt;li>Cheese&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="other-elements--abbr-sub-sup-kbd-mark">Other Elements — abbr, sub, sup, kbd, mark&lt;/h2>
&lt;p>&lt;abbr title="Graphics Interchange Format">GIF&lt;/abbr> is a bitmap image format.&lt;/p>
&lt;p>H&lt;sub>2&lt;/sub>O&lt;/p>
&lt;p>X&lt;sup>n&lt;/sup> + Y&lt;sup>n&lt;/sup> = Z&lt;sup>n&lt;/sup>&lt;/p>
&lt;p>Press &lt;kbd>&lt;kbd>CTRL&lt;/kbd>+&lt;kbd>ALT&lt;/kbd>+&lt;kbd>Delete&lt;/kbd>&lt;/kbd> to end the session.&lt;/p>
&lt;p>Most &lt;mark>salamanders&lt;/mark> are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>The above quote is excerpted from Rob Pike's &lt;a href="https://www.youtube.com/watch?v=PAAkCSZUG1c">talk&lt;/a> during Gopherfest, November 18, 2015.&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>Rich Content</title><link>https://ahamoment.cn/post/rich-content/</link><pubDate>Sun, 10 Mar 2019 00:00:00 +0000</pubDate><guid>https://ahamoment.cn/post/rich-content/</guid><description>
&lt;p>Hugo ships with several &lt;a href="https://gohugo.io/content-management/shortcodes/#use-hugo-s-built-in-shortcodes">Built-in Shortcodes&lt;/a> for rich content, along with a &lt;a href="https://gohugo.io/about/hugo-and-gdpr/">Privacy Config&lt;/a> and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.&lt;/p>
&lt;hr>
&lt;h2 id="instagram-simple-shortcode">Instagram Simple Shortcode&lt;/h2>
&lt;br>
&lt;hr>
&lt;h2 id="youtube-privacy-enhanced-shortcode">YouTube Privacy Enhanced Shortcode&lt;/h2>
&lt;div class="video">
&lt;iframe src="https://www.youtube.com/embed/izYiDDt6d8s?controls=1&amp;rel=0" loading="lazy">&lt;/iframe>
&lt;/div>
&lt;br>
&lt;hr>
&lt;h2 id="twitter-simple-shortcode">Twitter Simple Shortcode&lt;/h2>
&lt;style type="text/css">
.twitter-tweet {
font: 14px/1.45 -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",sans-serif;
border-left: 4px solid #2b7bb9;
padding-left: 1.5em;
color: #555;
}
.twitter-tweet a {
color: #2b7bb9;
text-decoration: none;
}
blockquote.twitter-tweet a:hover,
blockquote.twitter-tweet a:focus {
text-decoration: underline;
}
&lt;/style>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">“In addition to being more logical, asymmetry has the advantage that its complete appearance is far more optically effective than symmetry.”&lt;br>— Jan Tschichold &lt;a href="https://t.co/gcv7SrhvJb">pic.twitter.com/gcv7SrhvJb&lt;/a>&lt;/p>&amp;mdash; Graphic Design History (@DesignReviewed) &lt;a href="https://twitter.com/DesignReviewed/status/1085870671291310081?ref_src=twsrc%5Etfw">January 17, 2019&lt;/a>&lt;/blockquote>
&lt;br>
&lt;hr>
&lt;h2 id="vimeo-simple-shortcode">Vimeo Simple Shortcode&lt;/h2>
&lt;style>
.__h_video {
position: relative;
padding-bottom: 56.23%;
height: 0;
overflow: hidden;
width: 100%;
background: #000;
}
.__h_video img {
width: 100%;
height: auto;
color: #000;
}
.__h_video .play {
height: 72px;
width: 72px;
left: 50%;
top: 50%;
margin-left: -36px;
margin-top: -36px;
position: absolute;
cursor: pointer;
}
&lt;/style>
&lt;div class="s_video_simple __h_video">
&lt;a href="https://vimeo.com/4.8912912e&amp;#43;07" rel="noopener" target="_blank">
&lt;img src="https://i.vimeocdn.com/video/337401969_640" srcset="https://i.vimeocdn.com/video/337401969_640 1x, https://i.vimeocdn.com/video/337401969_640 2x" alt="Sing Jan Swing - Kinetic Type">
&lt;div class="play">&lt;svg version="1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 61 61">&lt;circle cx="30.5" cy="30.5" r="30.5" opacity=".8" fill="#000">&lt;/circle>&lt;path d="M25.3 19.2c-2.1-1.2-3.8-.2-3.8 2.2v18.1c0 2.4 1.7 3.4 3.8 2.2l16.6-9.1c2.1-1.2 2.1-3.2 0-4.4l-16.6-9z" fill="#fff">&lt;/path>&lt;/svg>&lt;/div>&lt;/a>&lt;/div></description></item><item><title>Placeholder Text</title><link>https://ahamoment.cn/post/placeholder-text/</link><pubDate>Sat, 09 Mar 2019 00:00:00 +0000</pubDate><guid>https://ahamoment.cn/post/placeholder-text/</guid><description>
&lt;p>Lorem est tota propiore conpellat pectoribus de pectora summo.&lt;/p>
&lt;p>Redit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.&lt;/p>
&lt;ol>
&lt;li>Exierant elisi ambit vivere dedere&lt;/li>
&lt;li>Duce pollice&lt;/li>
&lt;li>Eris modo&lt;/li>
&lt;li>Spargitque ferrea quos palude&lt;/li>
&lt;/ol>
&lt;p>Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.&lt;/p>
&lt;ol>
&lt;li>Comas hunc haec pietate fetum procerum dixit&lt;/li>
&lt;li>Post torum vates letum Tiresia&lt;/li>
&lt;li>Flumen querellas&lt;/li>
&lt;li>Arcanaque montibus omnes&lt;/li>
&lt;li>Quidem et&lt;/li>
&lt;/ol>
&lt;h1 id="vagus-elidunt">Vagus elidunt&lt;/h1>
&lt;p>&lt;svg class="canon" xmlns="http://www.w3.org/2000/svg" overflow="visible" viewBox="0 0 496 373" height="373" width="496">&lt;g fill="none">&lt;path stroke="#000" stroke-width=".75" d="M.599 372.348L495.263 1.206M.312.633l494.95 370.853M.312 372.633L247.643.92M248.502.92l246.76 370.566M330.828 123.869V1.134M330.396 1.134L165.104 124.515">&lt;/path>&lt;path stroke="#ED1C24" stroke-width=".75" d="M275.73 41.616h166.224v249.05H275.73zM54.478 41.616h166.225v249.052H54.478z">&lt;/path>&lt;path stroke="#000" stroke-width=".75" d="M.479.375h495v372h-495zM247.979.875v372">&lt;/path>&lt;ellipse cx="498.729" cy="177.625" rx=".75" ry="1.25">&lt;/ellipse>&lt;ellipse cx="247.229" cy="377.375" rx=".75" ry="1.25">&lt;/ellipse>&lt;/g>&lt;/svg>&lt;/p>
&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Canons_of_page_construction#Van_de_Graaf_canon">The Van de Graaf Canon&lt;/a>&lt;/p>
&lt;h2 id="mane-refeci-capiebant-unda-mulcebat">Mane refeci capiebant unda mulcebat&lt;/h2>
&lt;p>Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. &lt;strong>Faces illo pepulere&lt;/strong> tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.&lt;/p>
&lt;p>Iubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.&lt;/p>
&lt;p>Eurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel &lt;strong>mitis temploque&lt;/strong> vocatus, inque alis, &lt;em>oculos nomen&lt;/em> non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides &lt;strong>parte&lt;/strong>.&lt;/p></description></item><item><title>Math Typesetting</title><link>https://ahamoment.cn/post/math-typesetting/</link><pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate><guid>https://ahamoment.cn/post/math-typesetting/</guid><description>
&lt;p>Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p>
&lt;p>In this example we will be using &lt;a href="https://katex.org/">KaTeX&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Create a partial under &lt;code>/layouts/partials/math.html&lt;/code>&lt;/li>
&lt;li>Within this partial reference the &lt;a href="https://katex.org/docs/autorender.html">Auto-render Extension&lt;/a> or host these scripts locally.&lt;/li>
&lt;li>Include the partial in your templates like so:&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">{{&lt;/span> &lt;span class="k">if&lt;/span> or .Params.math .Site.Params.math &lt;span class="o">}}&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">{{&lt;/span> partial &lt;span class="s2">&amp;#34;math.html&amp;#34;&lt;/span> . &lt;span class="o">}}&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">{{&lt;/span> end &lt;span class="o">}}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>To enable KaTex globally set the parameter &lt;code>math&lt;/code> to &lt;code>true&lt;/code> in a project's configuration&lt;/li>
&lt;li>To enable KaTex on a per page basis include the parameter &lt;code>math: true&lt;/code> in content files&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Note:&lt;/strong> Use the online reference of &lt;a href="https://katex.org/docs/supported.html">Supported TeX Functions&lt;/a>&lt;/p>
&lt;h3 id="examples">Examples&lt;/h3>
&lt;p>Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p></description></item><item><title>Emoji Support</title><link>https://ahamoment.cn/post/emoji-support/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://ahamoment.cn/post/emoji-support/</guid><description>
&lt;p>Emoji can be enabled in a Hugo project in a number of ways.&lt;/p>
&lt;p>The &lt;a href="https://gohugo.io/functions/emojify/">&lt;code>emojify&lt;/code>&lt;/a> function can be called directly in templates or &lt;a href="https://gohugo.io/templates/shortcode-templates/#inline-shortcodes">Inline Shortcodes&lt;/a>.&lt;/p>
&lt;p>To enable emoji globally, set &lt;code>enableEmoji&lt;/code> to &lt;code>true&lt;/code> in your site's &lt;a href="https://gohugo.io/getting-started/configuration/">configuration&lt;/a> and then you can type emoji shorthand codes directly in content files; e.g.&lt;/p>
&lt;p>&lt;span class="nowrap">&lt;span class="emojify">🙈&lt;/span> &lt;code>:see_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙉&lt;/span> &lt;code>:hear_no_evil:&lt;/code>&lt;/span> &lt;span class="nowrap">&lt;span class="emojify">🙊&lt;/span> &lt;code>:speak_no_evil:&lt;/code>&lt;/span>&lt;/p>
&lt;br>
&lt;p>The &lt;a href="http://www.emoji-cheat-sheet.com/">Emoji cheat sheet&lt;/a> is a useful reference for emoji shorthand codes.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>N.B.&lt;/strong> The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="ln">1&lt;/span>.emoji {
&lt;span class="ln">2&lt;/span> font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols;
&lt;span class="ln">3&lt;/span>}&lt;/code>&lt;/pre>&lt;/div></description></item></channel></rss>
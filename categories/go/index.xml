<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Go on Ahamoment</title><link>https://ahamoment.cn/categories/go/</link><description>Recent content in Go on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 01 Apr 2021 16:23:40 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/categories/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 语言中的 new 关键字和 make 关键字的区别</title><link>https://ahamoment.cn/post/go-new-vs-make/</link><pubDate>Thu, 01 Apr 2021 16:23:40 +0800</pubDate><guid>https://ahamoment.cn/post/go-new-vs-make/</guid><description>
&lt;p>Go 语言分配内存的函数包括 new 和 make。new 用来获取类型对应的指针类型，即要获取指针类型的内存分配。make 只用来分配引用类型，即为channel，map，slice分配内存。&lt;/p>
&lt;p>对于值类型的变量，我们通过var 声明，系统会默认为他分配内存空间，并赋该类型的零值。如下，我们声明一个int类型变量i，输出为0。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="kd">var&lt;/span> &lt;span class="nx">i&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="ln">7&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">i&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>而如果我们声明一个指针类型的变量，系统不会为他分配内存，改变量默认就是nil。此时如果你想直接使用，那么系统会抛异常。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span> &lt;span class="c1">//panic: runtime error: invalid memory address or nil pointer dereference
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>也就是说，空指针还没有内存分配，是不能使用的。那么要想使用，此时就需要new出场啦。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">j&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="mi">10&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="nx">j&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>0xc00000a0e0
&lt;span class="ln">2&lt;/span>&lt;span class="m">0&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="m">10&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明指针类型变量后，通过new为他分配内存，有了内存空间，这个变量就可以自由的使用啦。&lt;/p>
&lt;p>我们来看一下new函数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="c1">// The new built-in function allocates memory. The first argument is a type,
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="c1">// not a value, and the value returned is a pointer to a newly
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">// allocated zero value of that type.
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nb">new&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">Type&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nx">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>它只接受一个参数，这个参数是一个类型，分配好内存后，返回一个指向该类型内存地址的指针。同时把分配的内存置为零，也就是类型的零值。&lt;/p>
&lt;p>接着，我们来看一下make函数。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">// The make built-in function allocates and initializes an object of type
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="c1">// slice, map, or chan (only). Like new, the first argument is a type, not a
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">// value. Unlike new, make&amp;#39;s return type is the same as the type of its
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">// argument, not a pointer to it. The specification of the result depends on
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">// the type:
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">// Slice: The size specifies the length. The capacity of the slice is
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">// equal to its length. A second integer argument may be provided to
&lt;/span>&lt;span class="ln"> 8&lt;/span>&lt;span class="c1">// specify a different capacity; it must be no smaller than the
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">// length. For example, make([]int, 0, 10) allocates an underlying array
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">// of size 10 and returns a slice of length 0 and capacity 10 that is
&lt;/span>&lt;span class="ln">11&lt;/span>&lt;span class="c1">// backed by this underlying array.
&lt;/span>&lt;span class="ln">12&lt;/span>&lt;span class="c1">// Map: An empty map is allocated with enough space to hold the
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">// specified number of elements. The size may be omitted, in which case
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">// a small starting size is allocated.
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">// Channel: The channel&amp;#39;s buffer is initialized with the specified
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">// buffer capacity. If zero, or the size is omitted, the channel is
&lt;/span>&lt;span class="ln">17&lt;/span>&lt;span class="c1">// unbuffered.
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nx">t&lt;/span> &lt;span class="nx">Type&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">size&lt;/span> &lt;span class="o">...&lt;/span>&lt;span class="nx">IntegerType&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nx">Type&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>make 是分配内存并初始化，初始化并不是置为零值。&lt;/li>
&lt;li>与new一样，它的第一个参数也是一个类型，但是不一样的是，make返回的是传入的类型，而不是指针！&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kd">var&lt;/span> &lt;span class="nx">c&lt;/span> &lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%#v \n&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//(chan int)(nil)
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="nx">c&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="nb">make&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kd">chan&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">4&lt;/span>&lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%#v&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nx">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//(chan int)(0xc000062060)
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>声明管道类型变量c，此时c还是nil，不可用；通过make来分配内存并初始化，c就获得了内存可以使用了。&lt;/p></description></item><item><title>Go 语言工作目录</title><link>https://ahamoment.cn/post/go-project-catalogs/</link><pubDate>Mon, 15 Mar 2021 10:16:45 +0800</pubDate><guid>https://ahamoment.cn/post/go-project-catalogs/</guid><description>
&lt;p>GOPATH 是 Go语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录。&lt;/p>
&lt;p>工作目录是一个工程开发的相对参考目录，好比当你要在公司编写一套服务器代码，你的工位所包含的桌面、计算机及椅子就是你的工作区。工作区的概念与工作目录的概念也是类似的。如果不使用工作目录的概念，在多人开发时，每个人有一套自己的目录结构，读取配置文件的位置不统一，输出的二进制运行文件也不统一，这样会导致开发的标准不统一，影响开发效率。&lt;/p>
&lt;p>GOPATH 适合处理大量 Go语言源码、多个包组合而成的复杂工程。&lt;/p>
&lt;p>在命令行中运行 &lt;code>go env&lt;/code> 来查看当前 GOPATH 路径设置情况：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1"># go env&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nv">GO111MODULE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nv">GOARCH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nv">GOBIN&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nv">GOCACHE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/.cache/go-build&amp;#34;&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nv">GOENV&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/.config/go/env&amp;#34;&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nv">GOEXE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nv">GOFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nv">GOHOSTARCH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;amd64&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nv">GOHOSTOS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;linux&amp;#34;&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="nv">GOINSECURE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">GOMODCACHE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/go/pkg/mod&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">GONOPROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nv">GONOSUMDB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nv">GOOS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;linux&amp;#34;&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/root/go&amp;#34;&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="nv">GOPRIVATE&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nv">GOPROXY&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;https://proxy.golang.org,direct&amp;#34;&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nv">GOROOT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/go&amp;#34;&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nv">GOSUMDB&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;sum.golang.org&amp;#34;&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="nv">GOTMPDIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">GOTOOLDIR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/usr/local/go/pkg/tool/linux_amd64&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="nv">GOVCS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="nv">GOVERSION&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;go1.16&amp;#34;&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="nv">GCCGO&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gccgo&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="nv">AR&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;ar&amp;#34;&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="nv">CC&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;gcc&amp;#34;&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="nv">CXX&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;g++&amp;#34;&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nv">CGO_ENABLED&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;1&amp;#34;&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="nv">GOMOD&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;/dev/null&amp;#34;&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="nv">CGO_CFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="nv">CGO_CPPFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="nv">CGO_CXXFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="nv">CGO_FFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="nv">CGO_LDFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-g -O2&amp;#34;&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="nv">PKG_CONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;pkg-config&amp;#34;&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="nv">GOGCCFLAGS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build439564896=/tmp/go-build -gno-record-gcc-switches&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令行输出的说明如下：&lt;/p>
&lt;ul>
&lt;li>GOARCH 表示目标处理器的架构&lt;/li>
&lt;li>GOBIN 表示编译器和链接器的安装位置&lt;/li>
&lt;li>GOOS 表示目标操作系统&lt;/li>
&lt;li>GOPATH 表示当前工作目录&lt;/li>
&lt;li>GOROOT 表示GO开发包的安装目录&lt;/li>
&lt;/ul>
&lt;p>从命令行输出可以看出，当前GOPATH 的路径为： /root/go。&lt;/p>
&lt;p>在 GOPATH 指定的工作目录下，代码总是会保存在 &lt;code>$GOPATH/src&lt;/code> 目录下。在工程经过 go build、go install 或 go get 等指令后，会将产生的二进制可执行文件放在 &lt;code>$GOPATH/bin&lt;/code> 目录下，生成的中间缓存文件会被保存在 &lt;code>$GOPATH/pkg&lt;/code> 下。&lt;/p>
&lt;p>如果需要将整个源码添加到版本管理工具（Version Control System，VCS）中时，只需要添加 $GOPATH/src 目录的源码即可。bin 和 pkg 目录的内容都可以由 src 目录生成。&lt;/p>
&lt;h2 id="设置和使用-gopath">设置和使用 GOPATH&lt;/h2>
&lt;p>本节以 Linux 为演示平台，为大家演示使用 GOPATH 的方法。&lt;/p>
&lt;h3 id="1-设置当前目录为gopath">1. 设置当前目录为GOPATH&lt;/h3>
&lt;p>选择一个目录，在目录中的命令行中执行下面的指令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="nb">export&lt;/span> &lt;span class="nv">GOPATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="sb">`&lt;/span>&lt;span class="nb">pwd&lt;/span>&lt;span class="sb">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>该指令中的 pwd 将输出当前的目录，使用反引号将 pwd 指令括起来表示命令行替换，也就是说，使用&lt;code>pwd&lt;/code>将获得 pwd 返回的当前目录的值。例如，假设你的当前目录&lt;code>是“/home/davy/go”，那么使用&lt;/code>pwd将获得返回值“/home/davy/go”。&lt;/p>
&lt;p>使用 export 指令可以将当前目录的值设置到环境变量 GOPATH中。&lt;/p>
&lt;h3 id="2-建立gopath中的源码目录">2. 建立GOPATH中的源码目录&lt;/h3>
&lt;p>使用下面的指令创建 GOPATH 中的src目录，在 src 目录下还有一个 hello 目录，该目录用于保存源代码。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>mkdir -p src/hello
&lt;/code>&lt;/pre>&lt;/div>&lt;p>mkdir 指令的 -p 可以连续创建一个路径。&lt;/p>
&lt;h3 id="3-添加-maingo-源码文件">3. 添加 main.go 源码文件&lt;/h3>
&lt;p>使用 Linux 编辑器将下面的源码保存为 main.go 并保存到 &lt;code>$GOPATH/src/hello&lt;/code> 目录下。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-go" data-lang="go">&lt;span class="ln">1&lt;/span>&lt;span class="kn">package&lt;/span> &lt;span class="nx">main&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="kn">import&lt;/span> &lt;span class="s">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="kd">func&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;span class="ln">6&lt;/span> &lt;span class="nx">fmt&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="nf">Println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;hello&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;span class="ln">7&lt;/span>&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="4-编译源码运行">4. 编译源码运行&lt;/h3>
&lt;p>此时我们已经设置了 GOPATH， 因此在 GO 语言中可以通过 GOPATH 找到工程的位置。&lt;/p>
&lt;p>在命令行中执行如下指令编译源码：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>go install hell
&lt;/code>&lt;/pre>&lt;/div>&lt;p>编译完成的可执行文件会保存在&lt;code>$GOPATH/bin&lt;/code> 目录下。&lt;/p>
&lt;p>在 bin 目录中执行 ./hello，命令行输出如下：&lt;/p>
&lt;p>hello world&lt;/p>
&lt;h2 id="在多项目工程中使用-gopath">在多项目工程中使用 GOPATH&lt;/h2>
&lt;p>在很多与 Go语言相关的书籍、文章中描述的 GOPATH 都是通过修改系统全局的环境变量来实现的。然而，根据笔者多年的 Go语言使用和实践经验及周边朋友、同事的反馈，这种设置全局 GOPATH 的方法可能会导致当前项目错误引用了其他目录的 Go 源码文件从而造成编译输出错误的版本或编译报出一些无法理解的错误提示。&lt;/p>
&lt;p>比如说，将某项目代码保存在 /home/davy/projectA 目录下，将该目录设置为 GOPATH。随着开发进行，需要再次获取一份工程项目的源码，此时源码保存在 /home/davy/projectB 目录下，如果此时需要编译 projectB 目录的项目，但开发者忘记设置 GOPATH 而直接使用命令行编译，则当前的 GOPATH 指向的是 /home/davy/projectA 目录，而不是开发者编译时期望的 projectB 目录。编译完成后，开发者就会将错误的工程版本发布到外网。&lt;/p>
&lt;p>因此，建议大家无论是使用命令行或者使用集成开发环境编译 Go 源码时，GOPATH 跟随项目设定。在 Jetbrains 公司的 GoLand 集成开发环境（IDE）中的 GOPATH 设置分为全局 GOPATH 和项目 GOPATH，如下图所示。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20210315105726821.png" alt="image-20210315105726821">&lt;/p>
&lt;p>图中的 Global GOPATH 代表全局 GOPATH，一般来源于系统环境变量中的 GOPATH；Project GOPATH 代表项目所使用的 GOPATH，该设置会被保存在工作目录的 .idea 目录下，不会被设置到环境变量的 GOPATH 中，但会在编译时使用到这个目录。建议在开发时只填写项目 GOPATH，每一个项目尽量只设置一个 GOPATH，不使用多个 GOPATH 和全局的 GOPATH。&lt;/p>
&lt;h4 id="提示">提示&lt;/h4>
&lt;p>Visual Studio 早期在设计时，允许 C++ 语言在全局拥有一个包含路径。当一个工程多个版本的编译，或者两个项目混杂有不同的共享全局包含时，会发生难以察觉的错误。在新版本 Visual Studio 中已经废除了这种全局包含的路径设计，并建议开发者将包含目录与项目关联。&lt;/p>
&lt;p>Go语言中的 GOPATH 也是一种类似全局包含的设计，因此鉴于 Visual Studio 在设计上的失误，建议开发者不要设置全局的 GOPATH，而是随项目设置 GOPATH&lt;/p></description></item></channel></rss>
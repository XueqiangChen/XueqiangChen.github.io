<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>云计算 on Ahamoment</title><link>https://ahamoment.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/</link><description>Recent content in 云计算 on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Fri, 11 Sep 2020 18:14:58 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/index.xml" rel="self" type="application/rss+xml"/><item><title>容器内获取 CPU 核数问题</title><link>https://ahamoment.cn/post/cloud-container-get-cpu/</link><pubDate>Fri, 11 Sep 2020 18:14:58 +0800</pubDate><guid>https://ahamoment.cn/post/cloud-container-get-cpu/</guid><description>
&lt;p>现在越来越多的公司将服务通过容器来部署，但这里其实对Java的应用有一个坑。很多超时敏感的应用其实对GC的要求还是比较高的，减少GC的时间变得很重要，比如你可以根据当前机器的CPU核数得到一个较好的并发GC线程数 &lt;em>-XX:ParallelGCThreads&lt;/em>，从而减少STW的时长。&lt;/p>
&lt;p>但在早期的JDK版本中，比如我们使用的Jdk1.8u102，当你使用Java的Runtime获取CPU数量时，在容器里面会返回容器所在宿主机的核数，而不是容器自身的：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">cores&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Runtime&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getRuntime&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">availableProcessors&lt;/span>&lt;span class="o">();&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这其实是JDK的一个问题，已经trace在&lt;a href="https://bugs.openjdk.java.net/browse/JDK-8140793">JDK-8140793&lt;/a>，原因是获取CPU核数是通过读取两个环境变量，其中&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>ENV&lt;/th>
&lt;th>Description&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>_SC_NPROCESSORS_CONF&lt;/td>
&lt;td>number of processors configured&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>_SC_NPROCESSORS_ONLN&lt;/td>
&lt;td>The number of processors currently online (available)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>其中_SC_NPROCESSORS_CONF 就是我们需要容器真实的CPU数量。
&lt;img src="https://img-blog.csdnimg.cn/20200911145803773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlc3RfNjA5,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述">
&lt;a href="https://github.com/obmarg/libsysconfcpus/blob/master/src/libsysconfcpus.c">获取CPU数量的源码&lt;/a>&lt;/p>
&lt;h3 id="怎么解决">怎么解决&lt;/h3>
&lt;p>第一种办法是使用新版本的Jdku131以上的版本&lt;a href="https://blog.csdn.net/west_609/article/details/108534197#fn1">1&lt;/a>。&lt;/p>
&lt;p>另外一个办法是使用自编译上面的源代码，通过LD_PRLOAD的方式将修改后的so文件加载进去Mock掉CPU的核数&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://blogs.oracle.com/java-platform-group/java-se-support-for-docker-cpu-and-memory-limits">Java SE support for Docker CPU and memory limits&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>
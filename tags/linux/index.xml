<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>linux on Ahamoment</title><link>https://ahamoment.cn/tags/linux/</link><description>Recent content in linux on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 10 Feb 2021 11:54:23 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux 常用命令</title><link>https://ahamoment.cn/post/linux-commands/</link><pubDate>Wed, 10 Feb 2021 11:54:23 +0800</pubDate><guid>https://ahamoment.cn/post/linux-commands/</guid><description>
&lt;p>设置 JAVA_HOME&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bas" data-lang="bas">&lt;span class="ln">1&lt;/span>&lt;span class="vg">export&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="vg">JAVA_HOME&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;$(dirname $(dirname $(realpath $(which javac))))&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="tee">tee&lt;/h2>
&lt;p>Linux tee命令用于读取标准输入的数据，并将其内容输出成文件。&lt;/p>
&lt;h3 id="语法">语法&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>tee &lt;span class="o">[&lt;/span>OPTION&lt;span class="o">]&lt;/span>... &lt;span class="o">[&lt;/span>FILE&lt;span class="o">]&lt;/span>...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="说明">说明&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>-a, --append
&lt;span class="ln">2&lt;/span>添加内容到指定文件，不会覆盖源文件内容
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span>-i, --ignore-interrupts
&lt;span class="ln">5&lt;/span>忽略输入
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="awk">awk&lt;/h2>
&lt;p>用法示例&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>说明&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>awk '{print}' c.txt&lt;/code>&lt;/td>
&lt;td>打印整个文件的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>awk '{print $1}' c.txt&lt;/code>&lt;/td>
&lt;td>打印文本的第一列的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>awk '{print $1, $2, $3}' c.txt&lt;/code>&lt;/td>
&lt;td>打印文本的第一列到第三列的内容&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>awk '{print $1 &amp;quot;\t&amp;quot; $2 &amp;quot;\t&amp;quot; $3}' c.txt&lt;/code>&lt;/td>
&lt;td>打印文本的第一列到第三列的内容，并按照制表符间隔&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>awk '{print NR &amp;quot;\t&amp;quot; $1 &amp;quot;\t&amp;quot; $2 &amp;quot;\t&amp;quot; $3}' c.txt&lt;/code>&lt;/td>
&lt;td>打印文本的第一列到第三列的内容和行号，并按照制表符间隔。（NR：number of record）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></description></item><item><title>认识 Linux NSCD 服务缓存</title><link>https://ahamoment.cn/post/linux-nscd/</link><pubDate>Sun, 27 Sep 2020 13:23:05 +0800</pubDate><guid>https://ahamoment.cn/post/linux-nscd/</guid><description>
&lt;p>NSCD(Name Service Cache Daemon)是服务缓存守护进程。&lt;/p>
&lt;h2 id="nscd-安装">NSCD 安装&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>RHEL/CentOS&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>yum -y install nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>Debian/Ubuntu&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>apt-get install nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>RPM&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>https://centos.pkgs.org/7/centos-x86_64/nscd-2.17-307.el7.1.x86_64.rpm.html
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ul>
&lt;p>CentOS7 之后 NSCD 使用 systemd 进行管理。&lt;/p>
&lt;h2 id="nscd-命令选项">NSCD 命令选项&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ nscd --help
&lt;span class="ln"> 2&lt;/span>用法： nscd &lt;span class="o">[&lt;/span>选项...&lt;span class="o">]&lt;/span>
&lt;span class="ln"> 3&lt;/span>Name Service Cache Daemon.
&lt;span class="ln"> 4&lt;/span> -d, --debug Do not fork and display messages on the current
&lt;span class="ln"> 5&lt;/span> tty
&lt;span class="ln"> 6&lt;/span> -f, --config-file&lt;span class="o">=&lt;/span>名称 从NAME中读取配置数据
&lt;span class="ln"> 7&lt;/span> -g, --statistics Print current configuration statistics
&lt;span class="ln"> 8&lt;/span> -i, --invalidate&lt;span class="o">=&lt;/span>TABLE Invalidate the specified cache
&lt;span class="ln"> 9&lt;/span> -K, --shutdown 关闭服务器
&lt;span class="ln">10&lt;/span> -t, --nthreads&lt;span class="o">=&lt;/span>NUMBER 启动 NUMBER 个线程
&lt;span class="ln">11&lt;/span> -?, --help 给出该系统求助列表
&lt;span class="ln">12&lt;/span> --usage 给出简要的用法信息
&lt;span class="ln">13&lt;/span> -V, --version 打印程序版本号
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>长选项的强制或可选参数对对应的短选项也是强制或可选的。
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nscd-配置文件">NSCD 配置文件&lt;/h2>
&lt;p>NSCD配置文件为&lt;code>/etc/nscd.conf&lt;/code>，NSCD程序在启动的时候会读取&lt;code>/etc/nscd.conf&lt;/code>文件，每一行指定一个属性和对应的值，或者指定一个服务和对应的值，#表示注释。有效的服务设定是：passwd, group, hosts, services, or netgroup五个。&lt;/p>
&lt;p>NSCD 的缓存文件路径默认为 &lt;code>/var/db/nscd/&lt;/code>。&lt;/p>
&lt;p>NSCD 的配置文件相关参数&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">#设置日志文件&lt;/span>
&lt;span class="ln"> 2&lt;/span>logfile debug-file-name
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#设置debug记录的级别，默认是0&lt;/span>
&lt;span class="ln"> 5&lt;/span>debug-level value
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">#程序启动时，等待进去请求的处理线程数，至少5个&lt;/span>
&lt;span class="ln"> 8&lt;/span>threads number
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="c1">#最大线程数，默认32&lt;/span>
&lt;span class="ln">11&lt;/span>max-threads number
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="c1">#nscd程序以哪个用户运行,如果设置了该选项，nscd将作为该用户运行，而不是作为root。如果每个用户都使用一个单独的缓存(-S参数)，将忽略该选项。&lt;/span>
&lt;span class="ln">14&lt;/span>server-user user
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="c1">#哪个用户可以请求统计用户&lt;/span>
&lt;span class="ln">17&lt;/span>stat-user user
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#在一个缓存项被删除之前允许使用的次数，默认值是5，代表SUCCESS的缓存在内存中会Reload5次&lt;/span>
&lt;span class="ln">20&lt;/span>reload-count unlimited &lt;span class="p">|&lt;/span> number
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="c1">#是否启用偏执模式，启用会导致nscd周期性重启，默认是no&lt;/span>
&lt;span class="ln">23&lt;/span>paranoia &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">24&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="c1">#如果启用偏执模式，设置的定期重启nscd的时间间隔，默认是3600秒&lt;/span>
&lt;span class="ln">26&lt;/span>restart-interval &lt;span class="nb">time&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="c1">#开启或者关闭服务缓存，默认是no&lt;/span>
&lt;span class="ln">29&lt;/span>enable-cache service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="c1">#为成功请求的元素设置缓存TTL，单位是秒，值越大缓存命中率越高，降低平均响应时间，但会增加缓存的一致性问题&lt;/span>
&lt;span class="ln">32&lt;/span>positive-time-to-live service value
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="c1">#为失败查询元素设置缓存TTL，单位是秒，应保持小值，减小缓存一致性问题&lt;/span>
&lt;span class="ln">35&lt;/span>negative-time-to-live service value
&lt;span class="ln">36&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="c1">#内部的散列表大小，value应该保持一个素数以达到优化效果。默认值是211&lt;/span>
&lt;span class="ln">38&lt;/span>suggested-size service value
&lt;span class="ln">39&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="c1">#启用或者禁用检查文件是否属于指定的服务，这些文件是/etc/passwd、/etc/group、/etc/hosts、/etc/services、/etc/netgroup等&lt;/span>
&lt;span class="ln">41&lt;/span>check-files service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">42&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="c1">#设置缓存在服务器重启后，仍旧能提供缓存服务，在使用偏执模式时有用，默认是no&lt;/span>
&lt;span class="ln">44&lt;/span>persistent service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">45&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="c1">#为客户端共享nscd数据库在内存中做的映射，使客户端可以直接搜索，而不用每次都查询守护进行，默认是no&lt;/span>
&lt;span class="ln">47&lt;/span>shared service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;span class="ln">48&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="c1">#该数据库的最大大小，单位是bytes，默认是33554432&lt;/span>
&lt;span class="ln">50&lt;/span>max-db-size service bytes
&lt;span class="ln">51&lt;/span>
&lt;span class="ln">52&lt;/span>&lt;span class="c1">#此选项仅使用于passwd和group服务&lt;/span>
&lt;span class="ln">53&lt;/span>auto-propagate service &amp;lt;yes&lt;span class="p">|&lt;/span>no&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="nscd-使用示例对dns进行缓存">NSCD 使用示例：对DNS进行缓存&lt;/h2>
&lt;h3 id="dns缓存在服务器上的作用">DNS缓存在服务器上的作用&lt;/h3>
&lt;p>在需要通过域名与外界进行数据交互的时候,dns缓存就派上用场了,它可以减少域名解析的时间,提高效率。例如以下情况&lt;/p>
&lt;ul>
&lt;li>使用爬虫采集网络上的页面数据,&lt;/li>
&lt;li>使用auth2.0协议从其他平台(如微博或QQ)获取用户数据,&lt;/li>
&lt;li>使用第三方支付接口,&lt;/li>
&lt;li>使用短信通道下发短信等.&lt;/li>
&lt;/ul>
&lt;h3 id="开启nscd-dns-缓存服务的优缺点">开启NSCD DNS 缓存服务的优缺点&lt;/h3>
&lt;ul>
&lt;li>优点：
&lt;ul>
&lt;li>本地缓存DNS解析信息，提供解析速度。&lt;/li>
&lt;li>DNS服务挂了也没有问题，在缓存服务时间范围内，解析依旧正常。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺点：
&lt;ul>
&lt;li>DNS解析信息会滞后，如域名解析更改需要手动刷新缓存，NSCD不适合做实时的切换的应用&lt;/li>
&lt;li>多条RR的情况下失去轮询功能，导致缓存周期内单机的负载均衡失效&lt;/li>
&lt;li>域名变更生效可能持续一个TTL+15s，对于一部分讲究变更快速生效的域名而言有一定的变更生效延误&lt;/li>
&lt;li>对于一部分异常导致解析错误的域名，有可能被NSCD缓存导致一段时间内解析都异常&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="配置dns缓存">配置DNS缓存&lt;/h3>
&lt;p>通过编辑&lt;code>/etc/nscd.conf&lt;/code>文件，在其中增加如下一行可以开启本地DNS Cache&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>enable-cache hosts yes &lt;span class="c1">#这个服务除了dns缓存之外还可以缓存passwd,group,servers&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>完整配置如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ cat /etc/nscd.conf
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>logfile /var/log/nscd.log
&lt;span class="ln"> 4&lt;/span>threads &lt;span class="m">5&lt;/span>
&lt;span class="ln"> 5&lt;/span>max-threads &lt;span class="m">32&lt;/span>
&lt;span class="ln"> 6&lt;/span>server-user nscd
&lt;span class="ln"> 7&lt;/span>debug-level &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 8&lt;/span>paranoia no
&lt;span class="ln"> 9&lt;/span>reload-count &lt;span class="m">5&lt;/span>
&lt;span class="ln">10&lt;/span>enable-cache hosts yes
&lt;span class="ln">11&lt;/span>enable-cache passwd no
&lt;span class="ln">12&lt;/span>enable-cache group no
&lt;span class="ln">13&lt;/span>positive-time-to-live hosts &lt;span class="m">60&lt;/span>
&lt;span class="ln">14&lt;/span>negative-time-to-live hosts &lt;span class="m">20&lt;/span>
&lt;span class="ln">15&lt;/span>suggested-size hosts &lt;span class="m">211&lt;/span>
&lt;span class="ln">16&lt;/span>check-files hosts yes
&lt;span class="ln">17&lt;/span>persistent hosts yes
&lt;span class="ln">18&lt;/span>shared hosts yes
&lt;span class="ln">19&lt;/span>max-db-size hosts &lt;span class="m">33554432&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于主动刷新">关于主动刷新&lt;/h4>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>reload-count &lt;span class="m">5&lt;/span> 默认值是5，代表SUCCESS的缓存在内存中会Reload 5次
&lt;/code>&lt;/pre>&lt;/div>&lt;p>reload的time是DNS应答&lt;code>TTL&lt;/code>+&lt;code>CACHE_PRUNE_INTERVAL&lt;/code>，reload过程中NSCD会主动发起DNS请求（非客户端发起），如果期间发生解析结果变更会将结果主动更新至NSCD缓存。这里的CACHE_PRUNE_INTERVAL来自于相关的宏定义：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>#define CACHE_PRUNE_INTERVAL 15
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于非success域名的缓存">关于非success域名的缓存&lt;/h4>
&lt;p>查看代码发现对于非success域名的缓存，NSCD会读取配置中的negative-time-to-live hosts，将缓存一个negative-time-to-live hosts+CACHE_PRUNE_INTERVAL的时间&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>dataset-&amp;gt;head.ttl = ttl == INT32_MAX ? db-&amp;gt;negtimeout : ttl;
&lt;span class="ln">2&lt;/span> timeout = dataset-&amp;gt;head.timeout = t + dataset-&amp;gt;head.ttl;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="关于缓存的rr轮询">关于缓存的RR轮询&lt;/h4>
&lt;p>NSCD是直接缓存了GETHOSTBYNAME/GETHOSTBYADD的应答结果，如果存在多条RR的情况下，将只会读取应答结果中的第一条结果作为函数的返回值。多条RR在NSCD的缓存中并没有RR轮询的效果，直到下一次reload更新缓存结果。这里可能导致域名原本的负载均衡机制失效。&lt;/p>
&lt;h4 id="关于cnamea的结果">关于CNAME+A的结果&lt;/h4>
&lt;p>GLIBC的GETHOSTBYNAME/GETHOSTBYADD返回的TTL中直接读取的是A类型的TTL，代码中并没有针对CNAME的TTL做特殊处理，因此在有CNAME+A的级联应答结果中，缓存的timeout将只会读取对应的A记录的TTL。
当DNS应答结果只有CNAME时，DNS请求将被判定为失败，这时CNAME的TTL将不起作用，缓存的时间将遵循非success域名的timeout计算。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>return ((qtype == T_A || qtype == T_AAAA) &amp;amp;&amp;amp; ap != host_data-&amp;gt;aliases
&lt;span class="ln">2&lt;/span> ? NSS_STATUS_NOTFOUND : NSS_STATUS_TRYAGAIN);
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="启动-nscd-进程">启动 NSCD 进程&lt;/h3>
&lt;p>默认该服务在Redhat或Centos下是关闭的，可以通过以下指令开启&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ systemctl start nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>查看进程，如下所示&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>$ ps aux | grep nscd
&lt;span class="ln">2&lt;/span>nscd 1284 0.1 0.3 708056 1580 ? Ssl 23:37 0:00 /usr/sbin/nscd
&lt;/code>&lt;/pre>&lt;/div>&lt;p>说明已经正常运行了。&lt;/p>
&lt;h3 id="nscd服务查看和清除">NSCD服务查看和清除&lt;/h3>
&lt;p>NSCD缓存DB文件在&lt;code>/var/db/nscd&lt;/code>下。可以通过&lt;code>nscd -g&lt;/code>查看统计的信息，这里列出部分：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>$ nscd -g
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span>nscd 配置：
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="m">0&lt;/span> 服务器调试级别
&lt;span class="ln"> 6&lt;/span> 4s server runtime
&lt;span class="ln"> 7&lt;/span> &lt;span class="m">5&lt;/span> current number of threads
&lt;span class="ln"> 8&lt;/span> &lt;span class="m">32&lt;/span> maximum number of threads
&lt;span class="ln"> 9&lt;/span> &lt;span class="m">0&lt;/span> number of &lt;span class="nb">times&lt;/span> clients had to &lt;span class="nb">wait&lt;/span>
&lt;span class="ln">10&lt;/span> no paranoia mode enabled
&lt;span class="ln">11&lt;/span> &lt;span class="m">3600&lt;/span> restart internal
&lt;span class="ln">12&lt;/span> &lt;span class="m">5&lt;/span> reload count
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span>... 省略输出信息若干 ...
&lt;span class="ln">15&lt;/span>
&lt;span class="ln">16&lt;/span>hosts cache:
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> yes cache is enabled
&lt;span class="ln">19&lt;/span> yes cache is persistent
&lt;span class="ln">20&lt;/span> yes cache is shared
&lt;span class="ln">21&lt;/span> &lt;span class="m">211&lt;/span> suggested size
&lt;span class="ln">22&lt;/span> &lt;span class="m">216064&lt;/span> total data pool size
&lt;span class="ln">23&lt;/span> &lt;span class="m">0&lt;/span> used data pool size
&lt;span class="ln">24&lt;/span> &lt;span class="m">60&lt;/span> seconds &lt;span class="nb">time&lt;/span> to live &lt;span class="k">for&lt;/span> positive entries
&lt;span class="ln">25&lt;/span> &lt;span class="m">20&lt;/span> seconds &lt;span class="nb">time&lt;/span> to live &lt;span class="k">for&lt;/span> negative entries
&lt;span class="ln">26&lt;/span> &lt;span class="m">0&lt;/span> cache hits on positive entries
&lt;span class="ln">27&lt;/span> &lt;span class="m">0&lt;/span> cache hits on negative entries
&lt;span class="ln">28&lt;/span> &lt;span class="m">0&lt;/span> cache misses on positive entries
&lt;span class="ln">29&lt;/span> &lt;span class="m">0&lt;/span> cache misses on negative entries
&lt;span class="ln">30&lt;/span> 0% cache hit rate
&lt;span class="ln">31&lt;/span> &lt;span class="m">0&lt;/span> current number of cached values
&lt;span class="ln">32&lt;/span> &lt;span class="m">0&lt;/span> maximum number of cached values
&lt;span class="ln">33&lt;/span> &lt;span class="m">0&lt;/span> maximum chain length searched
&lt;span class="ln">34&lt;/span> &lt;span class="m">0&lt;/span> number of delays on rdlock
&lt;span class="ln">35&lt;/span> &lt;span class="m">0&lt;/span> number of delays on wrlock
&lt;span class="ln">36&lt;/span> &lt;span class="m">0&lt;/span> memory allocations failed
&lt;span class="ln">37&lt;/span> yes check /etc/hosts &lt;span class="k">for&lt;/span> changes
&lt;span class="ln">38&lt;/span>
&lt;span class="ln">39&lt;/span>... 省略输出信息若干 ...
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="清除指定类型缓存">清除指定类型缓存&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ nscd -i passwd
&lt;span class="ln">2&lt;/span>$ nscd -i group
&lt;span class="ln">3&lt;/span>$ nscd -i hosts
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="关闭服务">关闭服务&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ nscd -K
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>【1】&lt;a href="https://www.hi-linux.com/posts/9461.html">Linux 下开启缓存服务 NSCD&lt;/a>&lt;/p>
&lt;p>【2】&lt;a href="https://zhuanlan.zhihu.com/p/44556919">阿里DNS: NSCD-DNS缓存详解&lt;/a>&lt;/p>
&lt;p>【3】&lt;a href="https://linux.die.net/man/8/nscd">Linux man page&lt;/a>&lt;/p></description></item><item><title>解决setcap导致Java加载libjli.so 失败问题</title><link>https://ahamoment.cn/post/linux-cap/</link><pubDate>Fri, 11 Sep 2020 11:12:43 +0800</pubDate><guid>https://ahamoment.cn/post/linux-cap/</guid><description>
&lt;h2 id="背景">背景&lt;/h2>
&lt;p>最近碰到一个问题，有个应用在启动的时候一直报错，错误信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>java: error &lt;span class="k">while&lt;/span> loading shared libraries: libjli.so: cannot open shared object file: No such file or directory
&lt;/code>&lt;/pre>&lt;/div>&lt;p>错误信息是说 java 应用加载不到 libjli.so 文件，我们使用 &lt;code>java -version&lt;/code> 命令，同样的错误又出现了。使用 ldd 命令查看一下 java 应用是否加载了这个 so 文件，发现 java 应用加载的 so 文件中存在 libjli.so。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ ldd java
&lt;span class="ln">2&lt;/span> linux-vdso.so.1 &lt;span class="o">=&lt;/span>&amp;gt; &lt;span class="o">(&lt;/span>0x00007ffe2a9c7000&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> /usr/local/lib/libsysconfcpus.so &lt;span class="o">(&lt;/span>0x00002ac503ca8000&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span> libz.so.1 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libz.so.1 &lt;span class="o">(&lt;/span>0x00002ac503eaa000&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span> libjli.so &lt;span class="o">=&lt;/span>&amp;gt; /apps/svr/jdk-14.0.1/bin/./../lib/libjli.so &lt;span class="o">(&lt;/span>0x00002ac5040c0000&lt;span class="o">)&lt;/span>
&lt;span class="ln">6&lt;/span> libpthread.so.0 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libpthread.so.0 &lt;span class="o">(&lt;/span>0x00002ac5042d1000&lt;span class="o">)&lt;/span>
&lt;span class="ln">7&lt;/span> libdl.so.2 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libdl.so.2 &lt;span class="o">(&lt;/span>0x00002ac5044ee000&lt;span class="o">)&lt;/span>
&lt;span class="ln">8&lt;/span> libc.so.6 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libc.so.6 &lt;span class="o">(&lt;/span>0x00002ac5046f2000&lt;span class="o">)&lt;/span>
&lt;span class="ln">9&lt;/span> /lib64/ld-linux-x86-64.so.2 &lt;span class="o">(&lt;/span>0x00002ac503883000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>我们接着查看了 &lt;code>LD_LIBRARY_PATH&lt;/code> 和 &lt;code>/etc/ld.so.conf.d/xxx.conf&lt;/code> 文件的配置，发现都是正常的。通过对比其他应用的启动配置，发现该应用使用了 80 端口启动，但是我们的容器只能使用 apps 权限登录，所以在启动前使用 &lt;code>setcap&lt;/code> 命令提升了 java 应用的权限，允许其使用 80 端口，会不会是这个操作导致的呢？在查看原因之前，我们需要先理解几个概念。&lt;/p>
&lt;h2 id="linux-动态库">Linux 动态库&lt;/h2>
&lt;p>动态库(共享库)的代码在可执行程序运行时才载入内存，在编译过程中仅简单的引用，不同的应用程序如果调用相同的库,那么在内存中只需要有一份该动态库(共享库)的实例。这类库的名字一般是libxxx.so，其中so是 Shared Object 的缩写，即可以共享的目标文件。在链接动态库生成可执行文件时，并不会把动态库的代码复制到执行文件中，而是在执行文件中记录对动态库的引用。&lt;/p>
&lt;p>Linux下生成和使用动态库的步骤如下：&lt;/p>
&lt;ol>
&lt;li>编写源文件。&lt;/li>
&lt;li>将一个或几个源文件编译链接，生成共享库。&lt;/li>
&lt;li>通过 &lt;code>-L -lxxx&lt;/code> 的gcc选项链接生成的libxxx.so。例如&lt;code>gcc -fPIC -shared -o libmax.so max.c&lt;/code> , &lt;code>-fPIC&lt;/code> 是编译选项，PIC是 Position Independent Code 的缩写，表示要生成位置无关的代码，这是动态库需要的特性； &lt;code>-shared&lt;/code> 是链接选项，告诉gcc生成动态库而不是可执行文件&lt;/li>
&lt;li>把libxxx.so放入链接库的标准路径，或指定 &lt;code>LD_LIBRARY_PATH&lt;/code>，才能运行链接了libxxx.so的程序。&lt;/li>
&lt;/ol>
&lt;p>Linux是通过 &lt;code>/etc/ld.so.cache&lt;/code> 文件搜寻要链接的动态库的。而 &lt;code>/etc/ld.so.cache&lt;/code> 是 ldconfig 程序读取 &lt;code>/etc/ld.so.conf&lt;/code> 文件生成的。
（注意， &lt;code>/etc/ld.so.conf&lt;/code> 中并不必包含 &lt;code>/lib&lt;/code> 和 &lt;code>/usr/lib&lt;/code>，&lt;code>ldconfig&lt;/code>程序会自动搜索这两个目录）&lt;/p>
&lt;p>我们把要用的 libxx.so 文件所在的路径添加到 &lt;code>/etc/ld.so.conf&lt;/code> 中，再以root权限运行 &lt;code>ldconfig&lt;/code> 程序，更新 &lt;code>/etc/ld.so.cache&lt;/code> ，程序运行时，就可以找到 &lt;code>libxx.so&lt;/code>。另外就是通过配置 &lt;code>LD_LIBRARY_PATH&lt;/code> 的方式来指定通过某些路径寻找链接的动态库。&lt;/p>
&lt;h3 id="ldd-查看程序依赖">ldd 查看程序依赖&lt;/h3>
&lt;p>理解了动态库的概念之后，当碰到某个程序报错缺少某个库文件时，我们应该怎么查看该程序当前加载了哪些库文件呢？可以用 &lt;code>ldd&lt;/code> 命令。&lt;/p>
&lt;p>ldd 命令的作用是用来查看程式运行所需的共享库,常用来解决程式因缺少某个库文件而不能运行的一些问题。&lt;/p>
&lt;p>例如：查看test程序运行所依赖的库:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost testso&lt;span class="o">]&lt;/span>&lt;span class="c1"># ldd /etc/alternatives/java&lt;/span>
&lt;span class="ln">2&lt;/span> linux-vdso.so.1 &lt;span class="o">=&lt;/span>&amp;gt; &lt;span class="o">(&lt;/span>0x00007ffde15f8000&lt;span class="o">)&lt;/span>
&lt;span class="ln">3&lt;/span> libpthread.so.0 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libpthread.so.0 &lt;span class="o">(&lt;/span>0x00007f03f2f8d000&lt;span class="o">)&lt;/span>
&lt;span class="ln">4&lt;/span> libdl.so.2 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libdl.so.2 &lt;span class="o">(&lt;/span>0x00007f03f2d89000&lt;span class="o">)&lt;/span>
&lt;span class="ln">5&lt;/span> libc.so.6 &lt;span class="o">=&lt;/span>&amp;gt; /lib64/libc.so.6 &lt;span class="o">(&lt;/span>0x00007f03f29bb000&lt;span class="o">)&lt;/span>
&lt;span class="ln">6&lt;/span> /lib64/ld-linux-x86-64.so.2 &lt;span class="o">(&lt;/span>0x00007f03f33ab000&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>第一列：程序需要依赖什么库&lt;/li>
&lt;li>第二列: 系统提供的与程序需要的库所对应的库&lt;/li>
&lt;li>第三列：库加载的开始地址&lt;/li>
&lt;/ul>
&lt;p>通过上面的信息，我们可以得到以下几个信息：&lt;/p>
&lt;ol>
&lt;li>通过对比第一列和第二列，我们可以分析程序需要依赖的库和系统实际提供的，是否相匹配&lt;/li>
&lt;li>通过观察第三列，我们可以知道在当前的库中的符号在对应的进程的地址空间中的开始位置&lt;/li>
&lt;/ol>
&lt;p>如果依赖的某个库找不到，通过这个命令可以迅速定位问题所在.&lt;/p>
&lt;h2 id="linux-capability">Linux capability&lt;/h2>
&lt;p>从内核 2.2 开始，Linux 将传统上与超级用户 root 关联的特权划分为不同的单元，称为 capabilites。Capabilites 作为线程(Linux 并不真正区分进程和线程)的属性存在，每个单元可以独立启用和禁用。如此一来，权限检查的过程就变成了：在执行特权操作时，如果进程的有效身份不是 root，就去检查是否具有该特权操作所对应的 capabilites，并以此决定是否可以进行该特权操作。&lt;/p>
&lt;p>下面是从 &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities man page&lt;/a> 中摘取的 capabilites 列表：&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>capability 名称&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>CAP_AUDIT_CONTROL&lt;/td>
&lt;td>启用和禁用内核审计；改变审计过滤规则；检索审计状态和过滤规则&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_AUDIT_READ&lt;/td>
&lt;td>允许通过 multicast netlink 套接字读取审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_AUDIT_WRITE&lt;/td>
&lt;td>将记录写入内核审计日志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_BLOCK_SUSPEND&lt;/td>
&lt;td>使用可以阻止系统挂起的特性&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_CHOWN&lt;/td>
&lt;td>修改文件所有者的权限&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_DAC_OVERRIDE&lt;/td>
&lt;td>忽略文件的 DAC 访问限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_DAC_READ_SEARCH&lt;/td>
&lt;td>忽略文件读及目录搜索的 DAC 访问限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_FOWNER&lt;/td>
&lt;td>忽略文件属主 ID 必须和进程用户 ID 相匹配的限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_FSETID&lt;/td>
&lt;td>允许设置文件的 setuid 位&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_IPC_LOCK&lt;/td>
&lt;td>允许锁定共享内存片段&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_IPC_OWNER&lt;/td>
&lt;td>忽略 IPC 所有权检查&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_KILL&lt;/td>
&lt;td>允许对不属于自己的进程发送信号&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_LEASE&lt;/td>
&lt;td>允许修改文件锁的 FL_LEASE 标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_LINUX_IMMUTABLE&lt;/td>
&lt;td>允许修改文件的 IMMUTABLE 和 APPEND 属性标志&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MAC_ADMIN&lt;/td>
&lt;td>允许 MAC 配置或状态更改&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MAC_OVERRIDE&lt;/td>
&lt;td>覆盖 MAC(Mandatory Access Control)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_MKNOD&lt;/td>
&lt;td>允许使用 mknod() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_ADMIN&lt;/td>
&lt;td>允许执行网络管理任务&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_BIND_SERVICE&lt;/td>
&lt;td>允许绑定到小于 1024 的端口&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_BROADCAST&lt;/td>
&lt;td>允许网络广播和多播访问&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_NET_RAW&lt;/td>
&lt;td>允许使用原始套接字&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETGID&lt;/td>
&lt;td>允许改变进程的 GID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETFCAP&lt;/td>
&lt;td>允许为文件设置任意的 capabilities&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETPCAP&lt;/td>
&lt;td>参考 &lt;a href="http://man7.org/linux/man-pages/man7/capabilities.7.html">capabilities man page&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SETUID&lt;/td>
&lt;td>允许改变进程的 UID&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_ADMIN&lt;/td>
&lt;td>允许执行系统管理任务，如加载或卸载文件系统、设置磁盘配额等&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_BOOT&lt;/td>
&lt;td>允许重新启动系统&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_CHROOT&lt;/td>
&lt;td>允许使用 chroot() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_MODULE&lt;/td>
&lt;td>允许插入和删除内核模块&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_NICE&lt;/td>
&lt;td>允许提升优先级及设置其他进程的优先级&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_PACCT&lt;/td>
&lt;td>允许执行进程的 BSD 式审计&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_PTRACE&lt;/td>
&lt;td>允许跟踪任何进程&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_RAWIO&lt;/td>
&lt;td>允许直接访问 /devport、/dev/mem、/dev/kmem 及原始块设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_RESOURCE&lt;/td>
&lt;td>忽略资源限制&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_TIME&lt;/td>
&lt;td>允许改变系统时钟&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYS_TTY_CONFIG&lt;/td>
&lt;td>允许配置 TTY 设备&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_SYSLOG&lt;/td>
&lt;td>允许使用 syslog() 系统调用&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>CAP_WAKE_ALARM&lt;/td>
&lt;td>允许触发一些能唤醒系统的东西(比如 CLOCK_BOOTTIME_ALARM 计时器)&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;strong>getcap&lt;/strong> 命令和 &lt;strong>setcap&lt;/strong> 命令分别用来查看和设置程序文件的 capabilities 属性。&lt;/p>
&lt;p>例如&lt;strong>为 ping 命令文件添加 capabilities&lt;/strong>&lt;/p>
&lt;p>执行 ping 命令所需的 capabilities 为 cap_net_admin 和 cap_net_raw，通过 setcap 命令可以添加它们：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo setcap cap_net_admin,cap_net_raw+ep /bin/ping
&lt;/code>&lt;/pre>&lt;/div>&lt;p>移除添加的 capabilities ，执行下面的命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>$ sudo setcap cap_net_admin,cap_net_raw-ep /bin/ping
&lt;/code>&lt;/pre>&lt;/div>&lt;p>命令中的 ep 分别表示 Effective 和 Permitted 集合(接下来会介绍)，+ 号表示把指定的 capabilities 添加到这些集合中，- 号表示从集合中移除(对于 Effective 来说是设置或者清除位)。&lt;/p>
&lt;h2 id="解决问题">解决问题&lt;/h2>
&lt;p>回到我们开始的问题，由于我们为非 root 用户赋予了使用 80 端口的权限，调用了如下命令：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>setcap &lt;span class="nv">cap_net_bind_service&lt;/span>&lt;span class="o">=&lt;/span>+ep /usr/bin/java
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当一个可执行文件提升了权限后，运行时加载程序（rtld）— ld.so，它不会与不受信任路径中的库链接。Linux 会为使用了 &lt;code>setcap&lt;/code> 或 &lt;code>suid&lt;/code> 的程序禁用掉 &lt;code>LD_LIBRARY_PATH&lt;/code>。所以就出现了 java 程序加载不到 libjli.so 的情况了，这是 JDK 的一个 bug。&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="http://bugs.sun.com/view_bug.do?bug_id=7157699">JDK-7157699 : can not run java after granting posix capabilities&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>那么既然使用 setcap 后不会加载链接库，我们就可以将 libjli.so 所在的路径添加到 &lt;code>/etc/ld.so.conf/xxx.conf&lt;/code>中，例如：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>% cat /etc/ld.so.conf.d/java.conf
&lt;span class="ln">2&lt;/span>/usr/java/jdk1.8.0_261-amd64/lib/amd64/jli
&lt;/code>&lt;/pre>&lt;/div>&lt;p>使用 &lt;code>ldconfig&lt;/code> 重载 so 文件。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>root@localhost jli&lt;span class="o">]&lt;/span>&lt;span class="c1"># ldconfig -p | grep libjli&lt;/span>
&lt;span class="ln">2&lt;/span> libjli.so &lt;span class="o">(&lt;/span>libc6,x86-64&lt;span class="o">)&lt;/span> &lt;span class="o">=&lt;/span>&amp;gt; /usr/java/jdk1.8.0_261-amd64/lib/amd64/jli/libjli.so% ldconfig &lt;span class="p">|&lt;/span> grep libjli
&lt;span class="ln">3&lt;/span>libjli.so -&amp;gt; libjli.so
&lt;span class="ln">4&lt;/span>.......
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样再次测试就可以了。&lt;/p>
&lt;h2 id="参考文章">参考文章&lt;/h2>
&lt;p>【1】&lt;a href="https://www.cnblogs.com/jiqingwu/p/linux_dynamic_lib_create.html">Linux动态库生成与使用指南&lt;/a>&lt;/p>
&lt;p>【2】&lt;a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/ldd.html#ldd">ldd 查看程序依赖库&lt;/a>&lt;/p>
&lt;p>【3】&lt;a href="https://www.cnblogs.com/sparkdev/p/11417781.html">Linux Capabiliites 简介&lt;/a>&lt;/p>
&lt;p>【4】&lt;a href="https://linux.die.net/man/7/capabilities">capabilities(7) - Linux man page&lt;/a>&lt;/p>
&lt;p>【5】&lt;a href="https://www.boris1993.com/linux/allow-non-root-process-to-bind-low-numbered-ports.html">如何允许非 root 进程绑定低位端口&lt;/a>&lt;/p>
&lt;p>【6】[&lt;a href="https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep">How to get Oracle java 7 to work with setcap cap_net_bind_service+ep&lt;/a>](&lt;a href="https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep">https://unix.stackexchange.com/questions/87978/how-to-get-oracle-java-7-to-work-with-setcap-cap-net-bind-serviceep&lt;/a>)&lt;/p></description></item></channel></rss>
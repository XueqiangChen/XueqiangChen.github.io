<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on AhaMoment</title><link>https://ahamoment.cn/tags/go/</link><description>Recent content in go on AhaMoment</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&amp;copy; 2021</copyright><lastBuildDate>Thu, 01 Apr 2021 16:23:40 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Go 语言中的 new 关键字和 make 关键字的区别</title><link>https://ahamoment.cn/posts/go/go-new-vs-make/</link><pubDate>Thu, 01 Apr 2021 16:23:40 +0800</pubDate><guid>https://ahamoment.cn/posts/go/go-new-vs-make/</guid><description>Go 语言分配内存的函数包括 new 和 make。new 用来获取类型对应的指针类型，即要获取指针类型的内存分配。make 只用来分配引用类型，即为channel，map，slice分配内存。
对于值类型的变量，我们通过var 声明，系统会默认为他分配内存空间，并赋该类型的零值。如下，我们声明一个int类型变量i，输出为0。
package main import &amp;quot;fmt&amp;quot; func main() { var i int fmt.Println(i) } 而如果我们声明一个指针类型的变量，系统不会为他分配内存，改变量默认就是nil。此时如果你想直接使用，那么系统会抛异常。
var j *int fmt.Println(j) *j = 10 //panic: runtime error: invalid memory address or nil pointer dereference 也就是说，空指针还没有内存分配，是不能使用的。那么要想使用，此时就需要new出场啦。
var j *int j = new(int) fmt.Println(j) fmt.Println(*j) *j = 10 fmt.Println(*j) 0xc00000a0e0 0 10 声明指针类型变量后，通过new为他分配内存，有了内存空间，这个变量就可以自由的使用啦。
我们来看一下new函数
// The new built-in function allocates memory. The first argument is a type, // not a value, and the value returned is a pointer to a newly // allocated zero value of that type.</description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>线程池 on Ahamoment</title><link>https://ahamoment.cn/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/</link><description>Recent content in 线程池 on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 12 Nov 2020 10:22:13 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/index.xml" rel="self" type="application/rss+xml"/><item><title>Java 多线程 - 自定义线程池</title><link>https://ahamoment.cn/post/java-multithread-thread-pool/</link><pubDate>Thu, 12 Nov 2020 10:22:13 +0800</pubDate><guid>https://ahamoment.cn/post/java-multithread-thread-pool/</guid><description>
&lt;h2 id="1-为什么要用线程池">1. 为什么要用线程池？&lt;/h2>
&lt;blockquote>
&lt;p>&lt;strong>池化技术相比大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。&lt;/strong>&lt;/p>
&lt;/blockquote>
&lt;p>&lt;strong>线程池&lt;/strong>提供了一种限制和管理资源（包括执行一个任务）。 每个&lt;strong>线程池&lt;/strong>还维护一些基本统计信息，例如已完成任务的数量。&lt;/p>
&lt;p>这里借用《Java 并发编程的艺术》提到的来说一下&lt;strong>使用线程池的好处&lt;/strong>：&lt;/p>
&lt;ul>
&lt;li>&lt;strong>降低资源消耗&lt;/strong>。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。&lt;/li>
&lt;li>&lt;strong>提高响应速度&lt;/strong>。当任务到达时，任务可以不需要的等到线程创建就能立即执行。&lt;/li>
&lt;li>&lt;strong>提高线程的可管理性&lt;/strong>。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。&lt;/li>
&lt;/ul>
&lt;h2 id="2-自定义一个简单的线程池">2. 自定义一个简单的线程池&lt;/h2>
&lt;p>一个线程池应该具备以下要素：&lt;/p>
&lt;ul>
&lt;li>任务队列：用于缓存提交的任务。&lt;/li>
&lt;li>任务线程管理功能：一个线程池必须能够很好地管理和控制线程数量，可通过如下三个参数来实现，比如创建线程池时初始的线程数量init；线程池自动扩充时最大的线程数量max；在线程池空闲时需要释放线程但是也要维护一定数量的活跃数量或者核心数量core。有了这三个参数，就能够很好地控制线程池中的线程数量，将其维护在一个合理的范围之内，三者之间的关系是init＜=core＜=max。&lt;/li>
&lt;li>任务拒绝策略：如果线程数量已达到上限且任务队列已满，则需要有相应的拒绝策略来通知任务提交者。&lt;/li>
&lt;li>线程工厂：主要用于个性化定制线程，比如将线程设置为守护线程以及设置线程名称等。&lt;/li>
&lt;li>QueueSize：任务队列主要存放提交的Runnable，但是为了防止内存溢出，需要有limit数量对其进行控制。&lt;/li>
&lt;li>Keepedalive时间：该时间主要决定线程各个重要参数自动维护的时间间隔。&lt;/li>
&lt;/ul>
&lt;h3 id="21-线程池实现类图">2.1 线程池实现类图&lt;/h3>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/threadpool.png" alt="">&lt;/p>
&lt;p>上图为线程池实现类图，下面看具体的代码。&lt;/p>
&lt;h3 id="22-threadpool">2.2 ThreadPool&lt;/h3>
&lt;p>先定义一个线程池接口，定义常用的方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ThreadPool&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//提交任务到线程池
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 关闭线程池
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 获取线程池的初始化大小
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getInitSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">// 获取线程池的最大线程数
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getMaxSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="c1">// 获取线程池的核心线程数
&lt;/span>&lt;span class="ln">16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getCoreSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="c1">// 获取线程池中用于缓存任务队列的大小
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getQueueSize&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="c1">// 获取线程池中活跃线程的数量
&lt;/span>&lt;span class="ln">22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getActiveCount&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 查看线程池是否已经被shutdown
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isShutdown&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-runnablequeue">2.3 RunnableQueue&lt;/h3>
&lt;p>我们需要一个任务队列，用来存放提交的任务，该队列是一个BlockedQueue，并且有limit的限制。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">RunnableQueue&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 当有新任务进来时首先会offer到队列中
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 工作线程通过take方法获取Runnable
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="nf">take&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 获取任务队列中任务的数量
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="24-threadfactory">2.4 ThreadFactory&lt;/h3>
&lt;p>ThreadFactory提供了创建线程的接口，以便于个性化地定制Thread，比如Thread应该被加到哪个Group中，优先级、线程名字以及是否为守护线程等。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="nd">@FunctionalInterface&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">ThreadFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="nf">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="25-拒绝策略denypolicy">2.5 拒绝策略（DenyPolicy）&lt;/h3>
&lt;p>DenyPolicy主要用于当Queue中的runnable达到了limit上限时，决定采用何种策略通知提交者。该接口中定义了三种默认的实现。&lt;/p>
&lt;ol>
&lt;li>DiscardDenyPolicy：直接将任务丢弃。&lt;/li>
&lt;li>AbortDenyPolicy：向任务提交者抛出异常。&lt;/li>
&lt;li>RunnerDenyPolicy：使用提交者所在的线程执行任务。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln"> 6&lt;/span>&lt;span class="cm"> * 该拒绝策略会直接将任务丢弃
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DiscardDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="c1">//do nothing
&lt;/span>&lt;span class="ln">13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;task will be discard&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">18&lt;/span>&lt;span class="cm"> * 该拒绝策略会向任务提交者抛出异常
&lt;/span>&lt;span class="ln">19&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">AbortDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">21&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">RunnableDenyException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The Runnable &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">runnable&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; will be abort.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">29&lt;/span>&lt;span class="cm"> * 该拒绝策略会使任务在提交者所在的线程中执行任务
&lt;/span>&lt;span class="ln">30&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RunnerDenyPolicy&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">35&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">36&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">37&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">38&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">39&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里还定义了一个 RunnableDenyException ，主要用于通知任务提交者，任务队列已经无法再接收新的任务。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln">1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">RunnableDenyException&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">RuntimeException&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln">2&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">RunnableDenyException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">message&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">4&lt;/span> &lt;span class="kd">super&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">message&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">6&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="26-internaltask">2.6 InternalTask&lt;/h3>
&lt;p>InternalTask是Runnable的一个实现，是实际任务存储的数据结构。主要用于线程池内部，该类会使用到RunnableQueue，然后不断地从queue中取出某个runnable，并运行runnable的run方法。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">InternalTask&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">Runnable&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">InternalTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="c1">// 如果当前任务为running并且没有被中断，则其将不断地从queue中获取runnable，然后执行run方法
&lt;/span>&lt;span class="ln">14&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="c1">// 这是提交到线程池的任务最终运行的地方
&lt;/span>&lt;span class="ln">15&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">running&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">isInterrupted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="n">task&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">take&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="n">task&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">run&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="c1">// 停止当前任务，主要会在线程池的shutdown方法中使用
&lt;/span>&lt;span class="ln">27&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">stop&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">28&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">running&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>代码还对该类增加了一个开关方法stop，主要用于停止当前线程，一般在线程池销毁和线程数量维护的时候会使用到。&lt;/p>
&lt;h3 id="27-线程池详细实现">2.7 线程池详细实现&lt;/h3>
&lt;p>在LinkedRunnableQueue中有几个重要的属性，第一个是limit，也就是Runnable队列的上限；当提交的Runnable数量达到limit上限时，则会调用DenyPolicy的reject方法；runnableList是一个双向循环列表，用于存放Runnable任务&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">LinkedRunnableQueue&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">RunnableQueue&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 任务队列的最大容量，在构造时传入
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 若任务队列已满，则执行拒绝策略
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 存放任务的队列
&lt;/span>&lt;span class="ln">10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">Runnable&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">runnableList&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">LinkedRunnableQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">limit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">denyPolicy&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">17&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="n">limit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="c1">// 无法容纳新的任务，执行拒绝策略
&lt;/span>&lt;span class="ln">25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">reject&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="c1">// 将任务加入队尾，并且唤醒阻塞中的线程
&lt;/span>&lt;span class="ln">28&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">addLast&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">29&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">notifyAll&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">30&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">31&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">32&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">33&lt;/span>
&lt;span class="ln">34&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="cm"> * take方法也是同步方法，线程不断从队列中获取Runnable任务，当队列为空的时候工作线程会陷入阻塞，
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="cm"> * 有可能在阻塞的过程中被中断，为了传递中断信号需要在catch语句块中将异常抛出以通知上游（InternalTask）
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="cm"> * @return 任务
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="cm"> * @throws InterruptedException 中断异常，通知上游(InternalTask)
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">40&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Runnable&lt;/span> &lt;span class="nf">take&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">42&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">43&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isEmpty&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">44&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">45&lt;/span> &lt;span class="c1">// 如果任务队列中没有可执行任务，则当前线程挂起，进入runnableList关联的monitor waitset中等待唤醒
&lt;/span>&lt;span class="ln">46&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">wait&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">48&lt;/span> &lt;span class="c1">// 被中断时需要将异常抛出
&lt;/span>&lt;span class="ln">49&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">50&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">51&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">52&lt;/span> &lt;span class="c1">// 从任务队列头排除一个任务
&lt;/span>&lt;span class="ln">53&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">removeFirst&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">54&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">55&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">56&lt;/span>
&lt;span class="ln">57&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">58&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">59&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableList&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">60&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">61&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">62&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>根据前面的讲解，线程池需要有数量控制属性、创建线程工厂、任务队列策略等功能，线程池初始化代码如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">BasicThreadPool&lt;/span> &lt;span class="kd">extends&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ThreadPool&lt;/span>&lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">// 初始化线程数量
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 线程池最大数量
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="c1">// 线程池核心线程数量
&lt;/span>&lt;span class="ln"> 10&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 11&lt;/span>
&lt;span class="ln"> 12&lt;/span> &lt;span class="c1">// 当前活跃的线程数量
&lt;/span>&lt;span class="ln"> 13&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">activeCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 14&lt;/span>
&lt;span class="ln"> 15&lt;/span> &lt;span class="c1">// 创建线程所需的工厂
&lt;/span>&lt;span class="ln"> 16&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 17&lt;/span>
&lt;span class="ln"> 18&lt;/span> &lt;span class="c1">// 任务队列
&lt;/span>&lt;span class="ln"> 19&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">RunnableQueue&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 20&lt;/span>
&lt;span class="ln"> 21&lt;/span> &lt;span class="c1">// 线程池是否已经被shutdown
&lt;/span>&lt;span class="ln"> 22&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">volatile&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">false&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 23&lt;/span>
&lt;span class="ln"> 24&lt;/span> &lt;span class="c1">// 工作线程队列
&lt;/span>&lt;span class="ln"> 25&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">Queue&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">ThreadTask&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">threadQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ArrayDeque&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 26&lt;/span>
&lt;span class="ln"> 27&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">DEFAULT_DENY_POLICY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DenyPolicy&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">DiscardDenyPolicy&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 28&lt;/span>
&lt;span class="ln"> 29&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">DEFAULT_THREAD_FACTORY&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">DefaultThreadFactory&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 30&lt;/span>
&lt;span class="ln"> 31&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 32&lt;/span>
&lt;span class="ln"> 33&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 34&lt;/span>
&lt;span class="ln"> 35&lt;/span> &lt;span class="c1">// 构造时需要传递的参数：初始的线程数量，最大的线程数量，核心线程数量，任务队列的最大数量
&lt;/span>&lt;span class="ln"> 36&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 37&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DEFAULT_THREAD_FACTORY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DEFAULT_DENY_POLICY&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">10&lt;/span> &lt;span class="o">,&lt;/span>&lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 38&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 39&lt;/span>
&lt;span class="ln"> 40&lt;/span> &lt;span class="c1">// 构造线程池时需要传入的参数，该构造函数需要的参数比较多
&lt;/span>&lt;span class="ln"> 41&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">DenyPolicy&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">TimeUnit&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 42&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 43&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">maxSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 44&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">coreSize&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 45&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadFactory&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 46&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">LinkedRunnableQueue&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">queueSize&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">denyPolicy&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 47&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">keepAliveTime&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 48&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">timeUnit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 49&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">init&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 50&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 51&lt;/span>
&lt;span class="ln"> 52&lt;/span> &lt;span class="c1">// 初始化时，先创建 initSize 个线程
&lt;/span>&lt;span class="ln"> 53&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 54&lt;/span> &lt;span class="n">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 55&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 56&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 57&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 58&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 59&lt;/span>
&lt;span class="ln"> 60&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">newThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 61&lt;/span> &lt;span class="c1">//创建任务线程，并且启动
&lt;/span>&lt;span class="ln"> 62&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">InternalTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 63&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">threadFactory&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">internalTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 64&lt;/span> &lt;span class="n">ThreadTask&lt;/span> &lt;span class="n">threadTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 65&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threadTask&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 66&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">++;&lt;/span>
&lt;span class="ln"> 67&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">start&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 68&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 69&lt;/span>
&lt;span class="ln"> 70&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">removeThread&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 71&lt;/span> &lt;span class="c1">// 从线程池中移除某个线程
&lt;/span>&lt;span class="ln"> 72&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">ThreadTask&lt;/span> &lt;span class="n">threadTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">remove&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 73&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 74&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">--;&lt;/span>
&lt;span class="ln"> 75&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 76&lt;/span>
&lt;span class="ln"> 77&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 78&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">execute&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 79&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 80&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 81&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 82&lt;/span> &lt;span class="c1">// 提交任务只是简单地往任务队列中插入Runnable
&lt;/span>&lt;span class="ln"> 83&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">offer&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">runnable&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 84&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 85&lt;/span>
&lt;span class="ln"> 86&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln"> 87&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">run&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 88&lt;/span> &lt;span class="c1">// run 方法继承自Thread，主要用于维护线程数量，比如扩容、回收工作
&lt;/span>&lt;span class="ln"> 89&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="o">(!&lt;/span>&lt;span class="n">isShutdown&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="o">!&lt;/span>&lt;span class="n">isInterrupted&lt;/span>&lt;span class="o">())&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 90&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 91&lt;/span> &lt;span class="n">timeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">keepAliveTime&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 92&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 93&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 94&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 95&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 96&lt;/span>
&lt;span class="ln"> 97&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 98&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 99&lt;/span> &lt;span class="k">break&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">100&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">101&lt;/span> &lt;span class="c1">//当前队列中有尚未处理，并且activeCount&amp;lt;coreSize则继续扩容
&lt;/span>&lt;span class="ln">102&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">103&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">initSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">104&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">105&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">106&lt;/span> &lt;span class="c1">// continue 的目的在于不想让线程的扩容直接达到maxsize
&lt;/span>&lt;span class="ln">107&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">continue&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">108&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">109&lt;/span> &lt;span class="c1">// 当前队列中有任务尚未处理，并且activeCount&amp;lt;maxSize则继续扩容
&lt;/span>&lt;span class="ln">110&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">111&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">maxSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">112&lt;/span> &lt;span class="n">newThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">113&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">114&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">115&lt;/span>
&lt;span class="ln">116&lt;/span> &lt;span class="c1">// 如果任务队列中没有任务，则需要回收，回收至coreSize即可
&lt;/span>&lt;span class="ln">117&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">activeCount&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">118&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">coreSize&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">activeCount&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">119&lt;/span> &lt;span class="n">removeThread&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">120&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">121&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">122&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">123&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">124&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">125&lt;/span>
&lt;span class="ln">126&lt;/span> &lt;span class="c1">//ThreadTask 只是InternalTask和Thread的一个组合
&lt;/span>&lt;span class="ln">127&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadTask&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">128&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">129&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">130&lt;/span>
&lt;span class="ln">131&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="nf">ThreadTask&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">InternalTask&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">132&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thread&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">thread&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">133&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">internalTask&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">134&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">135&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">136&lt;/span>
&lt;span class="ln">137&lt;/span> &lt;span class="cm">/**
&lt;/span>&lt;span class="ln">138&lt;/span>&lt;span class="cm"> * 销毁线程池主要为了是停止BasicThreadPool线程，停止线程池中的活动线程并且将isShutdown开关变量更改为true。
&lt;/span>&lt;span class="ln">139&lt;/span>&lt;span class="cm"> */&lt;/span>
&lt;span class="ln">140&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">141&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">shutdown&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">142&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">143&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">144&lt;/span> &lt;span class="k">return&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">145&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">146&lt;/span>
&lt;span class="ln">147&lt;/span> &lt;span class="n">isShutdown&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="kc">true&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">148&lt;/span> &lt;span class="n">threadQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">forEach&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">threadTask&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">149&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">internalTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">stop&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">150&lt;/span> &lt;span class="n">threadTask&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">151&lt;/span> &lt;span class="o">});&lt;/span>
&lt;span class="ln">152&lt;/span>
&lt;span class="ln">153&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">interrupt&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">154&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">155&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">156&lt;/span>
&lt;span class="ln">157&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">158&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getInitSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">159&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">160&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">161&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">162&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">initSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">163&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">164&lt;/span>
&lt;span class="ln">165&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">166&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getMaxSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">167&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">168&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">169&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">170&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">maxSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">171&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">172&lt;/span>
&lt;span class="ln">173&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">174&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getCoreSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">175&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">176&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">177&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">178&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">coreSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">179&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">180&lt;/span>
&lt;span class="ln">181&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">182&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getQueueSize&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">183&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">isShutdown&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">184&lt;/span> &lt;span class="k">throw&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">IllegalStateException&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;The thread pool is destroy&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">185&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">186&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">runnableQueue&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">size&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">187&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">188&lt;/span>
&lt;span class="ln">189&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">190&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">getActiveCount&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">191&lt;/span> &lt;span class="kd">synchronized&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">192&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">activeCount&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">193&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">194&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">195&lt;/span>
&lt;span class="ln">196&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">197&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">isShutdown&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">198&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">isShutdown&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">199&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">200&lt;/span>
&lt;span class="ln">201&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">DefaultThreadFactory&lt;/span> &lt;span class="kd">implements&lt;/span> &lt;span class="n">ThreadFactory&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">202&lt;/span>
&lt;span class="ln">203&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicInteger&lt;/span> &lt;span class="n">GROUP_COUNTER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicInteger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">1&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">204&lt;/span>
&lt;span class="ln">205&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadGroup&lt;/span> &lt;span class="n">group&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">ThreadGroup&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;MyThreadPool-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">GROUP_COUNTER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAndIncrement&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">206&lt;/span>
&lt;span class="ln">207&lt;/span> &lt;span class="kd">private&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">AtomicInteger&lt;/span> &lt;span class="n">COUNTER&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">AtomicInteger&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">0&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">208&lt;/span>
&lt;span class="ln">209&lt;/span> &lt;span class="nd">@Override&lt;/span>
&lt;span class="ln">210&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">Thread&lt;/span> &lt;span class="nf">createThread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Runnable&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">211&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">Thread&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">group&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">runnable&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="s">&amp;#34;thread-pool-&amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">COUNTER&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getAndIncrement&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">212&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">213&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">214&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">215&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>自动维护线程的代码块是同步代码块，主要是为了阻止在线程维护过程中线程池销毁引起的数据不一致问题。&lt;/p>
&lt;p>任务队列中若存在积压任务，并且当前活动线程少于核心线程数，则新建 &lt;code>coreSize-initSize&lt;/code>数量的线程，并且将其加入到活动线程队列中，为了防止马上进行&lt;code>maxSize-coreSize&lt;/code>数量的扩充，建议使用&lt;code>continue&lt;/code>终止本次循环。&lt;/p>
&lt;p>任务队列中有积压任务，并且当前活动线程少于最大线程数，则新建&lt;code>maxSize-coreSize&lt;/code>数量的线程，并且将其加入到活动队列中。&lt;/p>
&lt;p>当前线程池不够繁忙时，则需要回收部分线程，回收到&lt;code>coreSize&lt;/code>数量即可，回收时调用&lt;code>removeThread()&lt;/code>方法，在该方法中需要考虑的一点是，如果被回收的线程恰巧从&lt;code>Runnable&lt;/code>任务取出了某个任务，则会继续保持该线程的运行，直到完成了任务的运行为止，详见&lt;code>InternalTask&lt;/code>的run方法。&lt;/p>
&lt;h2 id="3-线程池的应用">3. 线程池的应用&lt;/h2>
&lt;p>写一个简单的程序分别测试线程池的任务提交、线程池线程数量的动态扩展，以及线程池的销毁功能。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">ThreadPoolTest&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="kd">static&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">args&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">InterruptedException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="c1">//定义线程池，初始化线程数为2，核心线程数为4，最大线程数位6，任务队列最多允许1000个任务
&lt;/span>&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kd">final&lt;/span> &lt;span class="n">ThreadPool&lt;/span> &lt;span class="n">threadPool&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">BasicThreadPool&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">6&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">4&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">1000&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 定义20个任务并且提交给线程池
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">20&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">execute&lt;/span>&lt;span class="o">(()-&amp;gt;&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">try&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">10&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">Thread&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">currentThread&lt;/span>&lt;span class="o">().&lt;/span>&lt;span class="na">getName&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="s">&amp;#34; is running and done.&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">12&lt;/span> &lt;span class="o">}&lt;/span> &lt;span class="k">catch&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">InterruptedException&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">e&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">printStackTrace&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="o">});&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">17&lt;/span>
&lt;span class="ln">18&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(;&lt;/span> &lt;span class="o">;)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">19&lt;/span> &lt;span class="c1">//不断输出线程池的信息
&lt;/span>&lt;span class="ln">20&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getActiveCount: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getActiveCount&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">21&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getQueueSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getQueueSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">22&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getCoreSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getCoreSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">23&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;getMaxSize: &amp;#34;&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">threadPool&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">getMaxSize&lt;/span>&lt;span class="o">());&lt;/span>
&lt;span class="ln">24&lt;/span> &lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">out&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">println&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;================================================&amp;#34;&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">25&lt;/span> &lt;span class="n">TimeUnit&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">SECONDS&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">sleep&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">5&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">27&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上述测试代码中，定义了一个Basic线程池，其中初始化线程数量为2，核心线程数量为4，最大线程数量为6，最大任务队列数量为1000，同时提交了20个任务到线程池中，然后在main线程中不断地输出线程池中的线程数量信息监控变化，运行上述代码，截取的部分输出信息如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">18&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">18&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">14&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">16&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">18&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">14&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">23&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">25&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">26&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">28&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">8&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">30&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">32&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">33&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">8&lt;/span>
&lt;span class="ln">34&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">35&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">36&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">37&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">38&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">39&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">40&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">41&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">43&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">44&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">46&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">47&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">49&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">2&lt;/span>
&lt;span class="ln">50&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">51&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">52&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">53&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">54&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">55&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">5&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">56&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">4&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">57&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">1&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">58&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">0&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">59&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">60&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">61&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">62&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">63&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">64&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">65&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">66&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">67&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">68&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">69&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">3&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">70&lt;/span>&lt;span class="n">thread&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">pool&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">2&lt;/span> &lt;span class="n">is&lt;/span> &lt;span class="n">running&lt;/span> &lt;span class="n">and&lt;/span> &lt;span class="n">done&lt;/span>&lt;span class="o">.&lt;/span>
&lt;span class="ln">71&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">5&lt;/span>
&lt;span class="ln">72&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">73&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">74&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">75&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">76&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">5&lt;/span>
&lt;span class="ln">77&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">78&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">79&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">80&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln">81&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">82&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln">83&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">84&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln">85&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>通过上述输出信息可以看出，线程池中线程的动态扩展状况以及任务执行情况，在输出的最后会发现active count停留在了core size的位置，这也符合我们的设计，最后为了确定线程池中的活跃线程数量&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="o">================================================&lt;/span>
&lt;span class="ln"> 7&lt;/span>&lt;span class="nl">getActiveCount:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="nl">getQueueSize:&lt;/span> &lt;span class="n">0&lt;/span>
&lt;span class="ln"> 9&lt;/span>&lt;span class="nl">getCoreSize:&lt;/span> &lt;span class="n">4&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="nl">getMaxSize:&lt;/span> &lt;span class="n">6&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="4-参考">4. 参考&lt;/h2>
&lt;blockquote>
&lt;p>【1】&lt;a href="https://book.douban.com/subject/30255689/">《Java 高并发编程详解》-汪文君&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>
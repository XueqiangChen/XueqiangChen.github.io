<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>项目 on Ahamoment</title><link>https://ahamoment.cn/tags/%E9%A1%B9%E7%9B%AE/</link><description>Recent content in 项目 on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 31 Mar 2021 20:05:46 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/%E9%A1%B9%E7%9B%AE/index.xml" rel="self" type="application/rss+xml"/><item><title>如何快速熟悉一个系统</title><link>https://ahamoment.cn/post/project-quickly-acquainted-a-system/</link><pubDate>Wed, 31 Mar 2021 20:05:46 +0800</pubDate><guid>https://ahamoment.cn/post/project-quickly-acquainted-a-system/</guid><description>
&lt;blockquote>
&lt;p>转自阿里技术&lt;a href="https://mp.weixin.qq.com/s/g7wvEIBa0mK3XbJZ_4ZvRA">《灵魂 36 问，让你快速熟悉一个系统》&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>最近换了工作，面对陌生的领域，陌生的环境，不知道从何下手，突然记起来之前看过的几篇关于如何接手新项目的文章，现在找出来来实践一下。&lt;/p>
&lt;h2 id="业务学习">业务学习&lt;/h2>
&lt;p>业务学习就是从业务角度去学习系统，我们需要了解系统的客户是谁、使用人是谁、带来了什么价值，系统提供了哪些功能等。不清楚业务，就等于不知道系统在干什么。技术是为业务落地而服务，清楚了业务才知道怎样用技术更好地服务业务，所以业务学习是熟悉一个系统的首要任务。这块主要的学习方式有跟产品、运营、开发沟通，学习产品设计文档文档、PRD、自己使用系统，还有一些常见图，如&lt;strong>产品功能架构图、业务流程图、功能树，用例图&lt;/strong>等。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>系统所在行业的情况是怎样？&lt;/li>
&lt;li>系统的目标用户是谁？比如是给公司高层做决策用？给运营或客服用？还是互联网用户用？&lt;/li>
&lt;li>平均有多少人在使用？高峰期多有少人在用？&lt;/li>
&lt;li>系统有什么业务价值？有哪些指标可以衡量系统业务价值？&lt;/li>
&lt;li>系统有哪些功能模块？&lt;/li>
&lt;li>系统有哪些领域概念？梳理下系统的领域模型。&lt;/li>
&lt;li>系统的关键业务流程有哪些？关键业务流程是怎样？&lt;/li>
&lt;li>系统的非功能性需求有哪些？如性能、质量、扩展性、安全性等。&lt;/li>
&lt;li>系统未来的发展规划是怎样？&lt;/li>
&lt;/ul>
&lt;h2 id="技术学习">技术学习&lt;/h2>
&lt;p>技术学习主要学习系统的架构、如何实现、系统的运维等。描述一个系统的架构有五视图方法论，五视图分别是：&lt;strong>逻辑架构、开发架构、运行架构、物理架构、数据架构&lt;/strong>。&lt;/p>
&lt;h3 id="逻辑架构">逻辑架构&lt;/h3>
&lt;p>逻辑架构着重考虑&lt;strong>功能需求&lt;/strong>，系统应当向用户提供什么样的服务，关注点主要是行为或职责的划分。常用表达图形：静态图有&lt;strong>包图、类图、对象图&lt;/strong>，动态图有&lt;strong>序列图、协作图、状态图、活动图&lt;/strong>。逻辑架构的核心设计任务是&lt;strong>模块划分、接口定义、领域模型细化&lt;/strong>。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>有哪些子系统或模块？系统之间是什么样的关系？&lt;/li>
&lt;li>对外上下游接口有哪些？对接人是谁？&lt;/li>
&lt;li>关键业务流程怎么实现的？用类图、序列图等方式表达出来。&lt;/li>
&lt;/ul>
&lt;h3 id="开发架构">开发架构&lt;/h3>
&lt;p>开发架构关主要关注系统源代码、第三方SDK、使用的框架、中间件、工具包。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>代码在哪？&lt;/li>
&lt;li>包怎么划分的？怎么分层？如 mvc、controller-service-dao。&lt;/li>
&lt;li>用了什么框架？如 ssh、dubbo。&lt;/li>
&lt;li>用了哪些工具包？如 apache commons、guava。&lt;/li>
&lt;li>用了哪些中间件？如 metaq、tair、schedulerX、Diamond。&lt;/li>
&lt;li>依赖哪些平台？如权限平台、流程引擎等。&lt;/li>
&lt;/ul>
&lt;h3 id="运行架构">运行架构&lt;/h3>
&lt;p>运行架构的着重考虑运行期质量属性，关注点是系统的&lt;strong>并发、同步、通信&lt;/strong>等问题，这势必涉及到进程、线程、对象等运行时概念，以及相关的并发、同步、通信等。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>系统能支撑多少 qps ？峰值 qps 多少？&lt;/li>
&lt;li>与上下游系统怎么交互的？rpc？http？同步还是异步？&lt;/li>
&lt;/ul>
&lt;h3 id="物理架构">物理架构&lt;/h3>
&lt;p>物理架构的设计着重考虑安装和部署需求，关注点是目标程序及其依赖的运行库和系统软件最终如何安装或部署到物理机器，以及如何部署机器和网络来配合软件系统的可靠性、可伸缩性、持续可用性、性能和安全性等要求。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>系统如何发布部署？有哪些部署环境？&lt;/li>
&lt;li>系统有多少台机器？&lt;/li>
&lt;li>系统部署怎么部署的？关注接入层，部署方式，如集群部署、分布式部署等。&lt;/li>
&lt;li>有没有容器化？&lt;/li>
&lt;li>有没有多机房部署？&lt;/li>
&lt;/ul>
&lt;h3 id="数据架构">数据架构&lt;/h3>
&lt;p>数据架构的设计着重考虑数据需求，关注点是持久化数据的存储方案，不仅包括实体及实体关系数据存储格式，还可能包括数据传递、数据复制、数据同步等策略。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>数据存储在哪？用了什么数据库，如 oracle、mysql。&lt;/li>
&lt;li>梳理 E-R 图。&lt;/li>
&lt;li>数据量有多少？是否有分库分表？&lt;/li>
&lt;li>用了哪些 nosql 库？&lt;/li>
&lt;li>有哪些数据同步任务？&lt;/li>
&lt;li>大数据框架的使用情况如何？&lt;/li>
&lt;/ul>
&lt;h3 id="系统运维">系统运维&lt;/h3>
&lt;p>系统运维重点关注什么时候会出问题，出了问题怎么解决。&lt;/p>
&lt;p>常见问题：&lt;/p>
&lt;ul>
&lt;li>什么时间容易出问题？比如电商双十一，对系统的压力很大，这时候很容易出问题。&lt;/li>
&lt;li>对关键功能是否有监控？需要看系统有配置了哪些报警项，监控了哪些方面。&lt;/li>
&lt;li>出了问题怎么解决？日志在哪？是否有全链路跟踪？是否有一些紧急操作，比如开关配置、降级、限流配置。&lt;/li>
&lt;li>系统有哪些坑？找开发同学回顾历史问题，以免踩坑。通过同事总结的 case，或者与负责的产品、运营、技术与了解。系统总会有一些坑，需要把这些坑填上。历史代码经过多次迭代总会导致复杂度高（分支、嵌套、循环很多），存在设计漏洞，性能隐患等，很难维护，这些就需要我们去重构了。记住有一句话：填的坑越大，能力越大。&lt;/li>
&lt;li>运营、客服反馈的常见问题有哪些？&lt;/li>
&lt;/ul>
&lt;h2 id="实践">实践&lt;/h2>
&lt;p>熟悉了系统的业务和技术后，就要实战了，通过实战进一步加深对系统的熟悉程度。实践可以通过做需求、修 bug、重构等方式，亲自动手编码、调试、测试、上线。&lt;/p>
&lt;h2 id="总结">总结&lt;/h2>
&lt;p>已有系统通常经历了从 0 到 N 的建设过程，熟悉系统其实是一个逆向推导过程，也是一个学习架构、阅读源码的过程。在学习的过程中最好能带上思考，比如为什么要这么设计，为什么要用这个中间件？是否有更好的编码方式？哪些地方可以优化等，以此达到一个深入熟悉的过程。&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>bazel on Ahamoment</title><link>https://ahamoment.cn/tags/bazel/</link><description>Recent content in bazel on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 10 Feb 2021 14:05:07 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/bazel/index.xml" rel="self" type="application/rss+xml"/><item><title>bazel 外部存储库缓存</title><link>https://ahamoment.cn/post/tool-bazel/</link><pubDate>Wed, 10 Feb 2021 14:05:07 +0800</pubDate><guid>https://ahamoment.cn/post/tool-bazel/</guid><description>
&lt;h2 id="bazel-简介">bazel 简介&lt;/h2>
&lt;h3 id="安装">安装&lt;/h3>
&lt;p>centos7：https://docs.bazel.build/versions/4.0.0/install-redhat.html&lt;/p>
&lt;p>Step1：&lt;/p>
&lt;p>从 &lt;a href="https://copr.fedorainfracloud.org/coprs/vbatts/bazel/repo/epel-7/vbatts-bazel-epel-7.repo">Fedora COPR&lt;/a> 下载 &lt;code>.repo&lt;/code> 文件并复制到 &lt;code>/etc/yum.repos.d/&lt;/code> 目录。&lt;/p>
&lt;p>Step2:&lt;/p>
&lt;p>运行 &lt;code>yum install bazel3&lt;/code> 命令安装。&lt;/p>
&lt;h3 id="教程">教程&lt;/h3>
&lt;p>&lt;strong>&lt;a href="https://docs.bazel.build/versions/master/tutorial/java.html">java&lt;/a>&lt;/strong> / &lt;strong>&lt;a href="https://docs.bazel.build/versions/master/tutorial/cpp.html">c++&lt;/a>&lt;/strong>&lt;/p>
&lt;h3 id="常用命令">常用命令&lt;/h3>
&lt;p>命令文档：https://docs.bazel.build/versions/master/command-line-reference.html#fetch-options&lt;/p>
&lt;p>查询依赖关系：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel query --notool_deps --noimplicit_deps &lt;span class="s2">&amp;#34;deps(//:ProjectRunner)&amp;#34;&lt;/span> --output graph
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可视化网站：&lt;/p>
&lt;p>&lt;a href="http://www.webgraphviz.com/">http://www.webgraphviz.com/&lt;/a>&lt;/p>
&lt;p>编译命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel build //:ProjectRunner
&lt;/code>&lt;/pre>&lt;/div>&lt;p>清除命令：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>bazel clean
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>bazel clean&lt;/code>在 &lt;code>outputPath&lt;/code>和&lt;code>action_cache&lt;/code>目录上执行&lt;code>rm -rf&lt;/code>。它还会删除工作空间符号链接。 &lt;code>--expunge&lt;/code>选项将清除整个&lt;code>outputBase&lt;/code>。&lt;/p>
&lt;h2 id="输出目录">输出目录&lt;/h2>
&lt;p>&lt;a href="https://docs.bazel.build/versions/master/output_directories.html">https://docs.bazel.build/versions/master/output_directories.html&lt;/a>&lt;/p>
&lt;ul>
&lt;li>必须从包含WORKSPACE文件的目录（“工作区目录”）或其子目录中调用Bazel。如果不是，它将报告错误。&lt;/li>
&lt;li>&lt;code>outputRoot&lt;/code>目录在Linux上默认为&lt;code>〜/.cache/bazel&lt;/code>，在macOS上默认为&lt;code>/ private/var/tmp&lt;/code>，在Windows上默认为&lt;code>％HOME％&lt;/code>（如果设置），否则默认为&lt;code>％USERPROFILE％&lt;/code>，否则调用&lt;code>SHGetKnownFolderPath()&lt;/code>的结果设置了&lt;code>FOLDERID_Profile&lt;/code>标志。如果设置了环境变量&lt;code>$ TEST_TMPDIR&lt;/code>（如测试bazel本身），则该值将覆盖默认值。&lt;/li>
&lt;li>我们将Bazel用户的构建状态保留在&lt;code>outputRoot/_bazel_$USER&lt;/code>下。这称为 &lt;code>outputUserRoot&lt;/code> 目录。&lt;/li>
&lt;li>在&lt;code>outputUserRoot&lt;/code>目录下，我们创建一个&lt;code>installBase&lt;/code>目录，其名称为&lt;code> install&lt;/code>加上Bazel安装清单的MD5哈希。&lt;/li>
&lt;li>在&lt;code>outputUserRoot&lt;/code>目录下，我们还创建了一个&lt;code>outputBase&lt;/code>目录，该目录的名称是工作区目录的路径名的MD5哈希。因此，例如，如果Bazel在工作空间目录&lt;code>/ home/user/src/my-projec&lt;/code>t中（或在与该目录符号链接的目录中）运行，则我们将创建一个输出基本目录，名为：&lt;code>/home/user/.cache/bazel/ _bazel_user/7ffd56a6e4cb724ea575aba15733d113&lt;/code>。&lt;/li>
&lt;li>用户可以使用Bazel的&lt;code>--output_base&lt;/code>启动选项来覆盖默认的输出基本目录。例如，&lt;code>bazel --output_base = /tmp/bazel/output build x/y:z&lt;/code>。&lt;/li>
&lt;li>用户还可以使用Bazel的&lt;code>--output_user_root&lt;/code>启动选项来覆盖默认的安装基础目录和输出基础目录。例如：&lt;code>bazel --output_user_root=/tmp/bazel build x/y:z&lt;/code>。&lt;/li>
&lt;/ul>
&lt;p>我们在工作区目录中放置了符号链接“bazel-&lt;workspace-name>”, “bazel-out”, “bazel-testlogs”, and “bazel-bin” 。这些符号链接指向输出目录内特定于目标的目录内的某些目录。这些符号链接只是为了方便用户，因为Bazel本身并不使用它们。另外，我们仅在工作空间目录可写时才这样做。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="c1">#机器上所有Bazel输出的根目录：outputRoot&lt;/span>
&lt;span class="ln"> 2&lt;/span>/home/user/.cache/bazel/
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">#给定用户的顶级目录取决于用户名：outputUserRoot&lt;/span>
&lt;span class="ln"> 4&lt;/span> _bazel_&lt;span class="nv">$USER&lt;/span>/
&lt;span class="ln"> 5&lt;/span> &lt;span class="c1">#Bazel安装清单的哈希：installBase&lt;/span>
&lt;span class="ln"> 6&lt;/span> install/
&lt;span class="ln"> 7&lt;/span> fba9a2c87ee9589d72889caf082f1029/
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">#包含从的数据部分解压缩的二进制文件和脚本首次运行时的bazel可执行文件（例如帮助程序脚本和主Java文件BazelServer_deploy.jar）&lt;/span>
&lt;span class="ln"> 9&lt;/span> _embedded_binaries/
&lt;span class="ln">10&lt;/span> &lt;span class="c1">#客户端工作区目录的哈希(/home/some-user/src/my-project):outputBase&lt;/span>
&lt;span class="ln">11&lt;/span> 7ffd56a6e4cb724ea575aba15733d113/
&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="缓存">缓存&lt;/h2>
&lt;h3 id="外部依赖缓存">外部依赖缓存&lt;/h3>
&lt;p>使用 &lt;code>bazel fetch //repo:...&lt;/code>，可以从具有存储库功能的远程源（例如http_archive()或maven_jar())下载外部存储库和工件。有时，网络访问不可用，或者重新下载已下载的存储库是浪费的。&lt;/p>
&lt;p>使用中央缓存，Bazel可以在访问网络之前检查它是否包含请求的存储库。允许多个工作空间共享同一存储库高速缓存，并且缓存也是可移植的。&lt;/p>
&lt;p>&lt;strong>相关联的issue：&lt;/strong>&lt;/p>
&lt;p>Make maven_jar and friends smarter by re-using previously fetched artifacts across different projects&lt;a href="https://github.com/bazelbuild/bazel/issues/1752">＃1752&lt;/a>&lt;/p>
&lt;p>&lt;strong>缓存选项&lt;/strong>&lt;/p>
&lt;p>&lt;code>--experimental_repository_cache&lt;/code>&lt;/p>
&lt;p>&lt;code>--repository_cache&lt;/code>&lt;/p>
&lt;hr>
&lt;blockquote>
&lt;p>参考文档：&lt;/p>
&lt;p>&lt;a href="https://bazel.build/designs/2016/09/30/repository-cache.html">https://bazel.build/designs/2016/09/30/repository-cache.html&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/bazelbuild/bazel/issues/1752">https://github.com/bazelbuild/bazel/issues/1752&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>
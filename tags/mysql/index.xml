<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on Ahamoment</title><link>https://ahamoment.cn/tags/mysql/</link><description>Recent content in MySQL on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Wed, 09 Dec 2020 11:48:24 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQL 面试题</title><link>https://ahamoment.cn/post/interview-mysql/</link><pubDate>Wed, 09 Dec 2020 11:48:24 +0800</pubDate><guid>https://ahamoment.cn/post/interview-mysql/</guid><description>
&lt;h2 id="1-什么是mysql">1. 什么是MySQL？&lt;/h2>
&lt;p>MySQL 是一种关系型数据库，在Java企业级开发中非常常用，因为 MySQL 是开源免费的，并且方便扩展。阿里巴巴数据库系统也大量用到了 MySQL，因此它的稳定性是有保障的。MySQL是开放源代码的，因此任何人都可以在 GPL(General Public License) 的许可下下载并根据个性化的需要对其进行修改。MySQL的默认端口号是&lt;strong>3306&lt;/strong>。&lt;/p>
&lt;h2 id="2-存储引擎">2. 存储引擎&lt;/h2>
&lt;h3 id="21-myisam-和-innodb-的区别">2.1. MyISAM 和 InnoDB 的区别&lt;/h3>
&lt;p>MyISAM是MySQL的默认数据库引擎（5.5版之前）。虽然性能极佳，而且提供了大量的特性，包括&lt;strong>全文索引、压缩、空间函数&lt;/strong>等，但&lt;strong>MyISAM不支持事务和行级锁，而且最大的缺陷就是崩溃后无法安全恢复&lt;/strong>。不过，5.5版本之后，MySQL引入了InnoDB（事务性数据库引擎），MySQL 5.5版本后默认的存储引擎为InnoDB。&lt;/p>
&lt;p>大多数时候我们使用的都是 InnoDB 存储引擎，但是在某些情况下使用 MyISAM 也是合适的比如读密集的情况下。（如果你不介意 MyISAM 崩溃恢复问题的话）。&lt;/p>
&lt;p>&lt;strong>两者的对比：&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>是否支持行级锁&lt;/strong> : MyISAM 只有表级锁(table-level locking)，而InnoDB 支持行级锁(row-level locking)和表级锁，默认为行级锁。&lt;/li>
&lt;li>&lt;strong>是否支持事务和崩溃后的安全恢复： MyISAM&lt;/strong> 强调的是性能，每次查询具有原子性,其执行速度比InnoDB类型更快，但是不提供事务支持。但是&lt;strong>InnoDB&lt;/strong> 提供事务支持，外部键等高级数据库功能。 具有事务(commit)、回滚(rollback)和崩溃修复能力(crash recovery capabilities)的事务安全(transaction-safe (ACID compliant))型表。&lt;/li>
&lt;li>&lt;strong>是否支持外键：&lt;/strong> MyISAM不支持，而InnoDB支持。&lt;/li>
&lt;li>&lt;strong>是否支持MVCC&lt;/strong> ：仅 InnoDB 支持。应对高并发事务, MVCC比单纯的加锁更高效;MVCC只在 &lt;code>READ COMMITTED&lt;/code> 和 &lt;code>REPEATABLE READ&lt;/code> 两个隔离级别下工作;MVCC可以使用 乐观(optimistic)锁 和 悲观(pessimistic)锁来实现;各数据库中MVCC实现并不统一。推荐阅读：&lt;a href="https://segmentfault.com/a/1190000012650596">MySQL-InnoDB-MVCC多版本并发控制&lt;/a>&lt;/li>
&lt;/ol>
&lt;h2 id="3-索引">3. 索引&lt;/h2>
&lt;h3 id="31-什么是索引">3.1. 什么是索引&lt;/h3>
&lt;p>&lt;strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B树， B+树和Hash。&lt;/strong>&lt;/p>
&lt;p>索引的作用就相当于目录的作用。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一页一页的去找我们需要查的那个字，速度很慢。如果有目录了，我们只需要先去目录里查找字的位置，然后直接翻到那一页就行了。&lt;strong>索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B树， B+树和Hash。&lt;/strong>&lt;/p>
&lt;h3 id="32-为什么用索引">3.2. 为什么用索引？&lt;/h3>
&lt;p>&lt;strong>索引的优点&lt;/strong>&lt;/p>
&lt;p>&lt;strong>可以大大加快检索的速度&lt;/strong>，这也是创建索引的最主要的原因。毕竟大部分系统的读请求总是大于写请求的。 另外，通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。&lt;/p>
&lt;p>&lt;strong>索引的缺点&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;strong>创建索引和维护索引需要耗费许多时间&lt;/strong>：当对表中的数据进行增删改的时候，如果数据有索引，那么索引也需要动态的修改，会降低SQL执行效率。&lt;/li>
&lt;li>&lt;strong>占用物理存储空间&lt;/strong> ：索引需要使用物理文件存储，也会耗费一定空间。&lt;/li>
&lt;/ol>
&lt;h3 id="33-索引的原理">3.3. 索引的原理&lt;/h3>
&lt;p>InnoDB 的索引使用的是 B+ 树。&lt;/p>
&lt;p>为什么要用B+树作为索引？而不是B树？&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://tech.meituan.com/2014/06/30/mysql-index.html">MySQL索引原理及慢查询优化&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;h3 id="34-索引类型">3.4 索引类型&lt;/h3>
&lt;h4 id="341-主键索引与二级索引">3.4.1. 主键索引与二级索引&lt;/h4>
&lt;p>&lt;strong>（1）主键索引&lt;/strong>&lt;/p>
&lt;p>数据表的主键列使用的就是主键索引。一张数据表有只能有一个主键，并且主键不能为null，不能重复。在mysql的InnoDB的表中，当没有显示的指定表的主键时，InnoDB会自动先检查表中是否有唯一索引的字段，如果有，则选择该字段为默认的主键，否则InnoDB将会自动创建一个6Byte的自增主键。&lt;/p>
&lt;p>&lt;strong>（2）二级索引&lt;/strong>&lt;/p>
&lt;p>又称为辅助索引，是因为二级索引的叶子节点存储的数据是主键。也就是说，通过二级索引，可以定位主键的位置。唯一索引，普通索引，前缀索引等索引属于二级索引。&lt;/p>
&lt;ol>
&lt;li>&lt;strong>唯一索引(Unique Key)&lt;/strong> ：唯一索引也是一种约束。**唯一索引的属性列不能出现重复的数据，但是允许数据为NULL，一张表允许创建多个唯一索引。**建立唯一索引的目的大部分时候都是为了该属性列的数据的唯一性，而不是为了查询效率。&lt;/li>
&lt;li>&lt;strong>普通索引(Index)&lt;/strong> ：&lt;strong>普通索引的唯一作用就是为了快速查询数据，一张表允许创建多个普通索引，并允许数据重复和NULL。&lt;/strong>&lt;/li>
&lt;li>&lt;strong>前缀索引(Prefix)&lt;/strong> ：前缀索引只适用于字符串类型的数据。前缀索引是对文本的前几个字符创建索引，相比普通索引建立的数据更小， 因为只取前几个字符。&lt;/li>
&lt;li>&lt;strong>全文索引(Full Text)&lt;/strong> ：全文索引主要是为了检索大文本数据中的关键字的信息，是目前搜索引擎数据库使用的一种技术。Mysql5.6之前只有MYISAM引擎支持全文索引，5.6之后InnoDB也支持了全文索引。&lt;/li>
&lt;/ol>
&lt;h4 id="342-聚集索引与非聚集索引">3.4.2. 聚集索引与非聚集索引&lt;/h4>
&lt;p>&lt;strong>（1）聚集索引&lt;/strong>&lt;/p>
&lt;p>聚集索引即索引结构和数据一起存放的索引。主键索引属于聚集索引。&lt;/p>
&lt;p>聚集索引的优点:&lt;/p>
&lt;p>聚集索引的查询速度非常的快，因为整个B+树本身就是一颗多叉平衡树，叶子节点也都是有序的，定位到索引的节点，就相当于定位到了数据。&lt;/p>
&lt;p>聚集索引的缺点:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>依赖于有序的数据&lt;/strong> ：因为B+树是多路平衡树，如果索引的数据不是有序的，那么就需要在插入时排序，如果数据是整型还好，否则类似于字符串或UUID这种又长又难比较的数据，插入或查找的速度肯定比较慢。&lt;/li>
&lt;li>&lt;strong>更新代价大&lt;/strong> ： 如果对索引列的数据被修改时，那么对应的索引也将会被修改， 而且况聚集索引的叶子节点还存放着数据，修改代价肯定是较大的， 所以对于主键索引来说，主键一般都是不可被修改的。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>（2）非聚集索引&lt;/strong>&lt;/p>
&lt;p>非聚集索引即索引结构和数据分开存放的索引。&lt;/p>
&lt;p>非聚集索引的叶子节点并不一定存放数据的指针， 因为二级索引的叶子节点就存放的是主键，根据主键再回表查数据。&lt;/p>
&lt;p>非聚集索引的优点:&lt;/p>
&lt;p>&lt;strong>更新代价比聚集索引要小&lt;/strong> 。非聚集索引的更新代价就没有聚集索引那么大了，非聚集索引的叶子节点是不存放数据的&lt;/p>
&lt;p>非聚集索引的缺点:&lt;/p>
&lt;ol>
&lt;li>跟聚集索引一样，非聚集索引也依赖于有序的数据&lt;/li>
&lt;li>&lt;strong>可能会二次查询(回表)&lt;/strong> :这应该是非聚集索引最大的缺点了。 当查到索引对应的指针或主键后，可能还需要根据指针或主键再到数据文件或表中查询。&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>（3）非聚集索引一定回表查询吗(覆盖索引)?&lt;/strong>&lt;/p>
&lt;p>&lt;strong>非聚集索引不一定回表查询。&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>试想一种情况，用户准备使用SQL查询用户名，而用户名字段正好建立了索引。&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span> SELECT name FROM table WHERE username=&amp;#39;guang19&amp;#39;;
&lt;/code>&lt;/pre>&lt;/div>&lt;blockquote>
&lt;p>那么这个索引的key本身就是name，查到对应的name直接返回就行了，无需回表查询。&lt;/p>
&lt;/blockquote>
&lt;p>主键索引本身的key就是主键，查到返回就行了。这种情况就称之为覆盖索引了。&lt;/p>
&lt;h3 id="35-索引创建原则">3.5. 索引创建原则&lt;/h3>
&lt;p>&lt;strong>（1）单列索引&lt;/strong>&lt;/p>
&lt;p>单列索引即由一列属性组成的索引。&lt;/p>
&lt;p>&lt;strong>（2）联合索引(多列索引)&lt;/strong>&lt;/p>
&lt;p>联合索引既由多列属性组成索引。&lt;/p>
&lt;p>&lt;strong>（3）最左前缀原则&lt;/strong>&lt;/p>
&lt;p>假设创建的联合索引由三个字段组成:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>ALTER TABLE table ADD INDEX index_name (num,name,age)
&lt;/code>&lt;/pre>&lt;/div>&lt;p>那么当查询的条件有为:num / (num AND name) / (num AND name AND age)时，索引才生效。所以在创建联合索引时，尽量把查询最频繁的那个字段作为最左(第一个)字段。查询的时候也尽量以这个字段为第一条件。&lt;/p>
&lt;h2 id="4-事务">4. 事务&lt;/h2>
&lt;p>&lt;strong>事务是逻辑上的一组操作，要么都执行，要么都不执行。&lt;/strong>&lt;/p>
&lt;p>事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账1000元，这个转账会涉及到两个关键操作就是：将小明的余额减少1000元，将小红的余额增加1000元。万一在这两个操作之间突然出现错误比如银行系统崩溃，导致小明余额减少而小红的余额没有增加，这样就不对了。事务就是保证这两个关键操作要么都成功，要么都要失败。&lt;/p>
&lt;h3 id="41-事务的四大特性">4.1. 事务的四大特性&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>原子性（Atomicity）：&lt;/strong> 事务是最小的执行单位，不允许分割。事务的原子性确保动作要么全部完成，要么完全不起作用；&lt;/li>
&lt;li>&lt;strong>一致性（Consistency）：&lt;/strong> 执行事务后，数据库从一个正确的状态变化到另一个正确的状态；&lt;/li>
&lt;li>&lt;strong>隔离性（Isolation）：&lt;/strong> 并发访问数据库时，一个用户的事务不被其他事务所干扰，各并发事务之间数据库是独立的；&lt;/li>
&lt;li>&lt;strong>持久性（Durability）：&lt;/strong> 一个事务被提交之后。它对数据库中数据的改变是持久的，即使数据库发生故障也不应该对其有任何影响。&lt;/li>
&lt;/ol>
&lt;h3 id="42-并发事务带来了哪些问题">4.2. 并发事务带来了哪些问题&lt;/h3>
&lt;p>在典型的应用程序中，多个事务并发运行，经常会操作相同的数据来完成各自的任务（多个用户对同一数据进行操作）。并发虽然是必须的，但可能会导致以下的问题。&lt;/p>
&lt;ul>
&lt;li>&lt;strong>脏读（Dirty read）:&lt;/strong> 当一个事务正在访问数据并且对数据进行了修改，而这种修改还没有提交到数据库中，这时另外一个事务也访问了这个数据，然后使用了这个数据（A 写 B 读）。因为这个数据是还没有提交的数据，那么另外一个事务读到的这个数据是“脏数据”，依据“脏数据”所做的操作可能是不正确的。&lt;/li>
&lt;li>&lt;strong>丢失修改（Lost to modify）:&lt;/strong> 指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改（A写 B 写）。 例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=19，事务1的修改被丢失。&lt;/li>
&lt;li>&lt;strong>不可重复读（Unrepeatableread）:&lt;/strong> 指在一个事务内多次读同一数据。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。这就发生了在一个事务内两次读到的数据是不一样的情况，因此称为不可重复读（A 读 B 写 A 读）。&lt;/li>
&lt;li>&lt;strong>幻读（Phantom read）:&lt;/strong> 幻读与不可重复读类似。它发生在一个事务（T1）读取了几行数据，接着另一个并发事务（T2）插入了一些数据时。在随后的查询中，第一个事务（T1）就会发现多了一些原本不存在的记录，就好像发生了幻觉一样，所以称为幻读。（A 读 B 写 A 读）&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>不可重复读和幻读区别：&lt;/strong>&lt;/p>
&lt;p>不可重复读的重点是修改比如多次读取一条记录发现其中某些列的值被修改，幻读的重点在于新增或者删除比如多次读取一条记录发现记录增多或减少了。&lt;/p>
&lt;h3 id="43-事务的隔离级别">4.3. 事务的隔离级别&lt;/h3>
&lt;ul>
&lt;li>&lt;strong>READ-UNCOMMITTED(读取未提交)：&lt;/strong> 最低的隔离级别，允许读取尚未提交的数据变更，&lt;strong>可能会导致脏读、幻读或不可重复读&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>READ-COMMITTED(读取已提交)：&lt;/strong> 允许读取并发事务已经提交的数据，&lt;strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>REPEATABLE-READ(可重复读)：&lt;/strong> 对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，&lt;strong>可以阻止脏读和不可重复读，但幻读仍有可能发生&lt;/strong>。&lt;/li>
&lt;li>&lt;strong>SERIALIZABLE(可串行化)：&lt;/strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，&lt;strong>该级别可以防止脏读、不可重复读以及幻读&lt;/strong>。&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>隔离级别&lt;/th>
&lt;th>脏读&lt;/th>
&lt;th>不可重复读&lt;/th>
&lt;th>幻影读&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>READ-UNCOMMITTED&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>READ-COMMITTED&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>REPEATABLE-READ&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>√&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>SERIALIZABLE&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;td>×&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>MySQL InnoDB 存储引擎的默认支持的隔离级别是 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong>。我们可以通过&lt;code>SELECT @@tx_isolation;&lt;/code>命令来查看，MySQL 8.0 该命令改为&lt;code>SELECT @@transaction_isolation;&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-sql" data-lang="sql">&lt;span class="ln">1&lt;/span>&lt;span class="n">mysql&lt;/span>&lt;span class="o">&amp;gt;&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">SELECT&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@@&lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="p">;&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;span class="ln">3&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">@@&lt;/span>&lt;span class="n">tx_isolation&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">4&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;span class="ln">5&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="k">REPEATABLE&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="k">READ&lt;/span>&lt;span class="w"> &lt;/span>&lt;span class="o">|&lt;/span>&lt;span class="w">
&lt;/span>&lt;span class="ln">6&lt;/span>&lt;span class="w">&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="c1">-----------------+
&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>这里需要注意的是：与 SQL 标准不同的地方在于 InnoDB 存储引擎在 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong> 事务隔离级别下使用的是&lt;strong>Next-Key Lock&lt;/strong> 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server) 是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 &lt;strong>REPEATABLE-READ（可重读）&lt;/strong> 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的 &lt;strong>SERIALIZABLE(可串行化)&lt;/strong> 隔离级别。因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是 &lt;strong>READ-COMMITTED(读取提交内容)&lt;/strong> ，但是你要知道的是InnoDB 存储引擎默认使用 &lt;strong>REPEAaTABLE-READ（可重读）&lt;/strong> 并不会有任何性能损失。&lt;/p>
&lt;p>InnoDB 存储引擎在 &lt;strong>分布式事务&lt;/strong> 的情况下一般会用到 &lt;strong>SERIALIZABLE(可串行化)&lt;/strong> 隔离级别。N,MF. ÔV &lt;/p></description></item></channel></rss>
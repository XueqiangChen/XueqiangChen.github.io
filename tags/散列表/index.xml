<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>散列表 on Ahamoment</title><link>https://ahamoment.cn/tags/%E6%95%A3%E5%88%97%E8%A1%A8/</link><description>Recent content in 散列表 on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 15 Oct 2020 10:04:54 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/%E6%95%A3%E5%88%97%E8%A1%A8/index.xml" rel="self" type="application/rss+xml"/><item><title>散列表那些事</title><link>https://ahamoment.cn/post/algorithm-hashtable/</link><pubDate>Thu, 15 Oct 2020 10:04:54 +0800</pubDate><guid>https://ahamoment.cn/post/algorithm-hashtable/</guid><description>
&lt;h2 id="基本概念">基本概念&lt;/h2>
&lt;p>在登录QQ的时候，QQ服务器是如何核对你的身份？面对庞大的用户群，如何快速找到用户信息？&lt;/p>
&lt;p>我们已经知道的几种查找方法包括：顺序查找，二分查找（静态查找），二叉搜索树（动态查找）。在这个场景下，如果使用二分查找的话就会面对插入和删除一个新号码要移动大量数据的问题。&lt;/p>
&lt;p>这里我们要用到散列查找的方法，散列（Hashing）的基本思想是：&lt;/p>
&lt;ol>
&lt;li>以关键字 key 为自变量，通过一个确定的**函数 h （散列函数）**计算出对应的函数值h(key)，作为数据对象的存储地址&lt;/li>
&lt;li>可能不同的关键字会映射到同一个散列地址上，称为**“冲突”**，发生冲突后需要某种冲突解决策略来解决冲突。&lt;/li>
&lt;/ol>
&lt;p>散列查找的时间复杂度为 O(1)，即查找时间与问题规模无关。&lt;/p>
&lt;p>一般情况下，设散列表空间大小为m，填入表中的元素个数是n，则称α=n/m为散列表的”装填因子“(Loading Factor)。实用时，通常将散列表大小设计为 &lt;strong>0.5-0.8&lt;/strong> 为宜。&lt;/p>
&lt;p>散列映射法的关键问题有两个：&lt;/p>
&lt;ol>
&lt;li>如何设计散列函数，使得发生冲突的概率尽可能小；&lt;/li>
&lt;li>当冲突或溢出不可避免的时候，如何处理使得表中没有空单元被浪费，同时插入、删除、查找等操作都正确完成。&lt;/li>
&lt;/ol>
&lt;h2 id="散列函数的构造方法">散列函数的构造方法&lt;/h2>
&lt;p>一个好的散列函数一般考虑下列两个因素：&lt;/p>
&lt;ol>
&lt;li>计算简单，以便提高转换速度&lt;/li>
&lt;li>关键字对应的地址空间分不均匀，以尽量减少冲突。即对于关键字集合中的任何一个关键字，经散列函数映射到地址集合中任何一个地址的概率是基本相等的。实际应用过程中，严格的均匀分布也是不可能的，只是不要过于聚集就行了。&lt;/li>
&lt;/ol>
&lt;p>关键字又分为数字关键字和字符串关键字两种类型，分别有不同的散列函数的构造方法：&lt;/p>
&lt;h3 id="数字关键字的散列函数构造">数字关键字的散列函数构造&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>直接定址法&lt;/p>
&lt;p>取关键字的某个线性函数值为散列地址，即&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key) = a*key + b (a,b 为常数)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>除留余数法&lt;/p>
&lt;p>散列函数为&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=key mod p
&lt;/code>&lt;/pre>&lt;/div>&lt;p>假设散列表长为 TableSize （TableSize 的选取通常由关键字集合的大小 n 和允许最大的装填因子 α 决定，一般 TableSize=n/α），选择一个正整数 p &amp;lt;= TableSize。一般选取 p 为小于或者等于散列表表长 TableSize 的某个&lt;strong>最大素数&lt;/strong>比较好。用素数求得得余数作为散列地址，比较均匀地分布在整个地址空间上的可能性比较大，具体证明可以参考&lt;a href="https://blog.csdn.net/liuqiyao_01/article/details/14475159">为什么一般hashtable的桶数会取一个素数&lt;/a>。例如，TableSize=8，p=7;TableSize=16, p=13。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>数字分析法&lt;/p>
&lt;p>分析数字关键字在各位上的变化情况，取比较随机的位作为散列地址。散列函数可以取为：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=atoi(key+7)
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;li>
&lt;p>折叠法&lt;/p>
&lt;p>把关键字分割成位数相同的几个部分，然后叠加取部分值。例如：&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015112018138.png" alt="image-20201015112018138">&lt;/p>
&lt;p>折叠法是希望每一位对最后的结果都能产生影响。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方取中法&lt;/p>
&lt;p>如：56793542&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201015112123029.png" alt="image-20201015112123029">&lt;/p>
&lt;p>平方取中法和折叠法的目的都是一样的，为了让关键字的每一位都对最后的结果产生影响。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h3 id="字符关键字的散列函数构造">字符关键字的散列函数构造&lt;/h3>
&lt;ol>
&lt;li>
&lt;p>一个简单的散列函数：ASCII 码加和法。对字符型关键字key定义散列函数如下：&lt;/p>
&lt;p>$\sum key[i]$ mod TableSize&lt;/p>
&lt;p>这种方法会有严重的冲突&lt;/p>
&lt;/li>
&lt;li>
&lt;p>简单的改进 - 前3个字符移位法&lt;/p>
&lt;p>$h(key)=(key[0]*27^2+key[1]*27+key[2])$ mod TableSize&lt;/p>
&lt;p>这个方法会造成空间的浪费&lt;/p>
&lt;/li>
&lt;li>
&lt;p>好的散列函数：移位法&lt;/p>
&lt;p>涉及关键字所有n个字符，并且分布的很好：&lt;/p>
&lt;p>$h(key)=(\displaystyle \sum^{n-1}_{i=0}{key[n-i-1]*32^i})$ mod TableSize&lt;/p>
&lt;p>该函数用于处理长度位 n 的字符串关键字，每个字符占5位(即 $2^5=32$)，具体实现时并不需要做乘法运算，而是通过一次左移 5 位来完成。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hashString&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">String&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">tableSize&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="c1">//散列函数值，初始化为0
&lt;/span>&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">char&lt;/span>&lt;span class="o">[]&lt;/span> &lt;span class="n">keyArrays&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">key&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">toCharArray&lt;/span>&lt;span class="o">();&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">0&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="n">keyArrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">length&lt;/span>&lt;span class="o">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">keyArrays&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">]&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="sc">&amp;#39;\0&amp;#39;&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">(&lt;/span>&lt;span class="n">h&lt;/span> &lt;span class="o">&amp;lt;&amp;lt;&lt;/span> &lt;span class="n">5&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">keyArrays&lt;/span>&lt;span class="o">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">];&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">h&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">tableSize&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;/li>
&lt;/ol>
&lt;h2 id="冲突处理方法">冲突处理方法&lt;/h2>
&lt;p>常用处理冲突的思路：&lt;/p>
&lt;ul>
&lt;li>换个位置：开放地址法&lt;/li>
&lt;li>同一位置的冲突对象组织在一起：链地址法&lt;/li>
&lt;/ul>
&lt;h3 id="开放定址法">开放定址法&lt;/h3>
&lt;p>一旦产生了冲突（该地址已有其他元素），就按某种规则去寻找另一空地址。假设发生了第 i 次冲突，试探的下一个地址将增加 $d_i$ , 基本公式是：&lt;/p>
&lt;p>$d_i(key)=(h(key)+d_i)$ mod tableSize （1 &amp;lt;= i &amp;lt; tableSize）&lt;/p>
&lt;p>$d_i$决定了不同的解决冲突方案，包括：线性探测、平方探测、双散列。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>线性探测&lt;/p>
&lt;p>$d_i=i$&lt;/p>
&lt;p>以增量序列1,2,......,(tableSize-1) 循环试探下一个存储地址。做插入操作的时候，要找到一个空位置，或者直到散列表满为止；做查找操作时，探测一个比较依次一次关键字，直到找到特定的数据对象，或者探测到一个空位置表示查找失败为止。&lt;/p>
&lt;p>线性探测的缺点就是容易产生聚集的现象，因此引入了平方探测法&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方探测法--二次探测&lt;/p>
&lt;p>平方探测的公式：$d_i=\pm i^2$，每次以增量序列$1^2,-1^2,2^2,-2^2......$循环试探下一个存储地址。&lt;/p>
&lt;p>平方探测法有可能出现散列表中有空间，但是无法探测到的情况。例如:&lt;/p>
&lt;p>散列表的长度为5，插入5,6,7,11这四个元素，散列函数设计为:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>h(key)=key mod 5
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当插入11时，散列函数找到的位置为2，和6这个元素所在的位置产生冲突，使用平方探测法，探测序列为:&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="ln">1&lt;/span>1+1=2
&lt;span class="ln">2&lt;/span>1-1=0
&lt;span class="ln">3&lt;/span>(1+2*2)%5=0
&lt;span class="ln">4&lt;/span>(1-2*2)%5=2
&lt;span class="ln">5&lt;/span>(1+3*3)%5=0
&lt;span class="ln">6&lt;/span>(1-3*3)%5=2
&lt;span class="ln">7&lt;/span>......
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以发现，探测序列一直在0和2这两个位置之间变动，一直找不到空的位置，但是散列表实际上还有空间。有定理显示：如果散列表长度tableSize是某个$4k+3$(k是正整数) 形式的素数时，平方探测法就可以探查到整个散列表空间。&lt;/p>
&lt;p>虽然平方探测法排除了一次聚集，但是散列到同一地址的那些数据对象将探测相同的备选单元，这称为“二次聚集”。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>双散列探测法&lt;/p>
&lt;p>双散列探测法: $d_i=i*h_2(key)$，$h_2(key)$是另一个散列函数，探测序列为：&lt;/p>
&lt;p>$h_2(key), 2h_2(key), 3h_2(key), ......$&lt;/p>
&lt;p>探测序列还应该保证所有的散列存储单元都能被探测到。选择以下形式有良好的效果：&lt;/p>
&lt;p>$h_2(key)=p$ - (key mod p)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>再散列&lt;/p>
&lt;p>当散列表元素太多（即装填因子α太大）时，查找效率会下降，实际使用的时候，装填因子一般取 0.5&amp;lt;=α&amp;lt;=0.85。&lt;/p>
&lt;p>当装填因子过大时，解决的方法时加倍扩大散列表，这个过程叫做“再散列”。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>在开放地址散列表中，删除操作要很小心，通常只能 “懒惰删除”，即需要增加一个删除标记(Deleted)，并不是真正删除它。这是因为插入的时候，为了解决冲突问题，这个位置已经被占用了，如果删除掉它，查找的时候就会出现“断链”的现象。&lt;/p>
&lt;h3 id="分离链接法">分离链接法&lt;/h3>
&lt;p>分离链接法时解决冲突的另一种方法，其做法是将所有关键字为同义词的数据对象通过节点链接存储到同一单向链表中。。&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114030859.png" alt="image-20201021114030859">&lt;/p>
&lt;p>如上图所示，分裂链接法实际上是用一个数组来组织散列表的数据结构，这个数组称为哈希桶，数组中的每个元素都指向一个链表，当元素冲突的时候，就在链表的头节点上插入冲突的元素。新元素插入到表头，这不仅仅为了方便，而且还因为新近插入的元素最有可能被最先访问，这样可以加快在单向链表中的顺序查找速度。&lt;/p>
&lt;h2 id="散列表的性能分析">散列表的性能分析&lt;/h2>
&lt;p>散列表的性能使用平均查找长度（ASL）来度量。&lt;/p>
&lt;ol>
&lt;li>
&lt;p>线性探测法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114435819.png" alt="image-20201021114435819">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>平方探测法和双散列探测法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114511673.png" alt="image-20201021114511673">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>分离链接法的查找性能满足下列公式&lt;/p>
&lt;p>&lt;img src="https://chenxqblog-1258795182.cos.ap-guangzhou.myqcloud.com/image-20201021114554421.png" alt="image-20201021114554421">&lt;/p>
&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>参考：浙江大学陈越老师的&lt;a href="https://www.icourse163.org/learn/ZJU-93001?tid=1207006212#/learn/announce">数据结构课程&lt;/a>&lt;/p>
&lt;/blockquote></description></item></channel></rss>
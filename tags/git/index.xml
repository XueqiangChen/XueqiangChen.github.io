<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>git on Ahamoment</title><link>https://ahamoment.cn/tags/git/</link><description>Recent content in git on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Tue, 24 Nov 2020 14:31:32 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 常用命令汇总</title><link>https://ahamoment.cn/post/tool-git-common-operations/</link><pubDate>Tue, 24 Nov 2020 14:31:32 +0800</pubDate><guid>https://ahamoment.cn/post/tool-git-common-operations/</guid><description>
&lt;h2 id="1-撤销提交">1. 撤销提交&lt;/h2>
&lt;p>撤销提交属于误操作的范畴，Git 误操作的类型主要有以下两个方面：&lt;/p>
&lt;ul>
&lt;li>commit - 分支提交错误&lt;/li>
&lt;li>reset - 误删代码&lt;/li>
&lt;/ul>
&lt;h3 id="11-分支提交错误">1.1 分支提交错误&lt;/h3>
&lt;p>有时我们会遇到这种情况：我们从develop 分支新建一个名为&lt;code>feat/home&lt;/code> 分支去做A功能，然后由于一些其他原因A 功能需要延后，然后我们再从develop分支新建一个分支去做B功能或者C功能，在多分支多功能开发时，就容易出现做B功能时，忘记切换分支，一直等做完了提交了push之后才发现 push 错了远端的分支，并且 push 的改动与该分支需要开发的功能并没有交集，因此我们需要将已经提交错的分支内容回滚并提交push 到正确的远端分支。&lt;/p>
&lt;p>此时有两种情况:&lt;/p>
&lt;h4 id="场景一已经commit但是未push到远端">场景一：已经commit，但是未push到远端&lt;/h4>
&lt;p>使用&lt;code>git reset&lt;/code>命令，可以在提交层面在私有分支舍弃一些没有提交的修改：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 回退到上一个版本&lt;/span>
&lt;span class="ln">2&lt;/span>git reset --hard HEAD^
&lt;/code>&lt;/pre>&lt;/div>&lt;p>git reset 命令主要有三个选项： --soft、--mixed 、--hard，默认参数为 --mixed。&lt;/p>
&lt;p>&lt;strong>git reset --soft 提交&lt;/strong>：&lt;/p>
&lt;p>&lt;code>--soft&lt;/code> 这个版本的命令有“最小”影响，&lt;em>只改变一个符号引用的状态使其指向一个新提交，不会改变其索引和工作目录&lt;/em>， 具体体现如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 模拟一份提交历史&lt;/span>
&lt;span class="ln">2&lt;/span>git add 1.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 1&amp;#34;&lt;/span>
&lt;span class="ln">3&lt;/span>git add 2.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 2&amp;#34;&lt;/span>
&lt;span class="ln">4&lt;/span>git add 3.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 3&amp;#34;&lt;/span>
&lt;span class="ln">5&lt;/span>git add 4.js &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git commit -m &lt;span class="s2">&amp;#34;update part 4&amp;#34;&lt;/span>
&lt;span class="ln">6&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-b446150005c25f5d3dee7141360c1d5b_720w.jpg" alt="img">&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="c1"># 用 --soft 参数尝试回退一个版本&lt;/span>
&lt;span class="ln">2&lt;/span>git reset --soft HEAD~1
&lt;/code>&lt;/pre>&lt;/div>&lt;p>当我们执行&lt;code> --soft&lt;/code> 命令后，可以看到控制台无任何输出，此时再次查看当前提交历史：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图，可以看到版本库已经回退了一个版本：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-63b5fd59bedb05cbc827f74df1419d0e_720w.jpg" alt="img">&lt;/p>
&lt;p>执行 &lt;code>git status&lt;/code>，可以看到SHA1为&lt;code>54b1941&lt;/code> 的commit 上的更改回到了缓存区：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-8e9c7f5733491c923cb5b2bb377e3c88_720w.jpg" alt="img">&lt;/p>
&lt;p>因此我们可以认为 --soft 操作是软重置，只撤销了&lt;code>git commit&lt;/code>操作，保留了 &lt;code>git add&lt;/code> 操作。&lt;/p>
&lt;p>&lt;strong>git reset --hard 提交:&lt;/strong>&lt;/p>
&lt;p>此时接上面的流程，我们这次执行 &lt;code>--hard&lt;/code> 操作，尝试回退两个版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --hard HEAD~2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如下图，可以看到版本库回退了两个版本，并且将本地版本库的头指针全部重置到了指定版本，暂存区也会被重置，工作区的代码也回退到了这一版本：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-63940d55d02820080385baab58ff222e_720w.jpg" alt="img">&lt;/p>
&lt;p>执行&lt;code>git status&lt;/code> 可以看到 我们的 SHA1 为 &lt;code>54b1941&lt;/code>的 commit 上做的修改都“丢失”了，新的文件也被删除了。&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-201eca04452cc16359c3b692e68b7476_720w.jpg" alt="img">&lt;/p>
&lt;p>因此可以知道，&lt;code>git commit --hard&lt;/code> 是具有破坏性，是很危险的操作，它很容易导致数据丢失，如果我们真的进行了该操作想要找回丢失的数据，那么此时可以使用&lt;code>git reflog&lt;/code> 回到未来，找到丢失的commit。这个命令的具体使用会在文章后面介绍。&lt;/p>
&lt;p>&lt;strong>git reset --mixed 提交&lt;/strong>：&lt;/p>
&lt;p>我们重新造一系列 commit 历史：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git add 1.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 1.js&amp;#34;
&lt;span class="ln">2&lt;/span>git add 2.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 2.js&amp;#34;
&lt;span class="ln">3&lt;/span>git add 3.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 3.js&amp;#34;
&lt;span class="ln">4&lt;/span>git add 4.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 4.js&amp;#34;
&lt;span class="ln">5&lt;/span>git add 5.js &amp;amp;&amp;amp; git commit -m &amp;#34;update 5.js&amp;#34;
&lt;span class="ln">6&lt;/span>git log --oneline --graph -4 --decorate
&lt;/code>&lt;/pre>&lt;/div>&lt;p>可以看到当前的 commit 历史如下：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-16293fb7352ea2b7ccd8f7aef878cdfa_720w.jpg" alt="img">&lt;/p>
&lt;p>此时执行--mixed 操作，尝试回退两个版本：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 等价于 git reset HEAD~2
&lt;span class="ln">2&lt;/span>git reset --mixed HEAD~2
&lt;/code>&lt;/pre>&lt;/div>&lt;p>提交历史此时改变为下图所示：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-e78d82234469aa8a1d1144f7413e5752_720w.jpg" alt="img">&lt;/p>
&lt;p>此时执行 &lt;code>git status&lt;/code> ，命令行输出如下：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-b8db70598e55f34a9d9eacc428b63a51_720w.jpg" alt="img">HEAD、索引被更改，工作目录未被更改&lt;/p>
&lt;p>SourceTree 工具上的直观显示如下：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-d5b53a062a54a4e9599d6097c35c1c46_720w.jpg" alt="img">&lt;/p>
&lt;p>可以看出，该命令加上 --mixed 参数会保留提交的源码改动，只是将索引信息回退到了某一个版本，如果还需要继续提交，再次执行 &lt;code>git add&lt;/code> 和 &lt;code>git commit&lt;/code>&lt;/p>
&lt;p>介绍完&lt;code>git reset&lt;/code>，那么我们来说一下如何用该命令解决提交分支错误的问题:&lt;/p>
&lt;p>&lt;strong>第一种方法&lt;/strong>：&lt;/p>
&lt;p>适用于多个分支一起开发的时候将A分支的改动错误的提交到B的场景：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 将该分支的本不应该提交的commit撤销
&lt;span class="ln"> 2&lt;/span>git reset HEAD^
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span># 按需选择想要回到哪个版本
&lt;span class="ln"> 5&lt;/span># 回到HEAD
&lt;span class="ln"> 6&lt;/span>git reset --soft HEAD
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span># 回到HEAD的前一个版本
&lt;span class="ln"> 9&lt;/span>git reset --soft HEAD^
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span># 回到HEAD的前10个版本
&lt;span class="ln">12&lt;/span>git reset --soft HEAD~5
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 利用id回到指定版本
&lt;span class="ln">15&lt;/span>git reset --soft a06ef2f
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 将撤销的代码暂存起来
&lt;span class="ln">18&lt;/span>git stash
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span># 切换到正确的分支
&lt;span class="ln">21&lt;/span>git checkout feat/xxx
&lt;span class="ln">22&lt;/span>
&lt;span class="ln">23&lt;/span># 重新应用缓存
&lt;span class="ln">24&lt;/span>git stash pop
&lt;span class="ln">25&lt;/span>
&lt;span class="ln">26&lt;/span># 在正确的分支进行提交操作
&lt;span class="ln">27&lt;/span>git add . &amp;amp;&amp;amp; git commit -m &amp;#34;update xxxx&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第二种方法&lt;/strong>：&lt;/p>
&lt;p>适用于在不小心在 master 分支上提交了代码，而实际想要在 feature 分支上提交代码的场景：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 新检出一个新分支，但是仍在master 分支上，并不会切换到新分支
&lt;span class="ln">2&lt;/span>git branch feat/update
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span># 恢复master本身提交的状态
&lt;span class="ln">5&lt;/span>git reset --hard origin/master
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span># 提交错的代码已经在新检出的分支上面了，可以继续进行开发或者push
&lt;span class="ln">8&lt;/span>git checkout feat/update
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第三种方法&lt;/strong>：&lt;/p>
&lt;ol>
&lt;li>适用于想要对特定的某一个或几个commit 进行“嫁接”，使其复制一份到正确的 feature 分支的场景；&lt;/li>
&lt;li>在功能性迭代开发中发现一个bug，并提交了一个commit 进行修复，但是发现该bug也存在线上的发布版本上，必须要尽快对线上进行修复，此时可以使用&lt;code>git cherry-pick&lt;/code> 将bug 修复的commit 嫁接到 fix 分支上进行代码修复，并及时发布，解决线上bug。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 先切换到正确的分支
&lt;span class="ln"> 2&lt;/span>git checkout feat/update
&lt;span class="ln"> 3&lt;/span>
&lt;span class="ln"> 4&lt;/span># 取出提交错误的或bug fix的 commit 引入到feat/update 分支中
&lt;span class="ln"> 5&lt;/span>git cherry-pick a06ef2f
&lt;span class="ln"> 6&lt;/span>
&lt;span class="ln"> 7&lt;/span># 回到错误的分支
&lt;span class="ln"> 8&lt;/span>git checkout feat/feedback
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span># 将 a06ef2f 的改动从当前分支销毁
&lt;span class="ln">11&lt;/span>git reset --head a06ef2f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>上面演示的是“嫁接” 一个commit，如果想要嫁接多个 commit 可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 将三个commit 合并过来
&lt;span class="ln">2&lt;/span>git cherry-pick b9dabf9 e2c739d dad9e51
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果想加个一个应用范围内的 commit，可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git cherry-pick 422db47..e2c739d
&lt;/code>&lt;/pre>&lt;/div>&lt;p>需要注意的是无论是对单个 commit 进行 &lt;code>git cherry-pick&lt;/code> ，还是批量处理，注意一定要根据时间线，依照 commit 的先后顺序来处理。&lt;/p>
&lt;p>如果你只想把改动转移到目标分支，但是并不想提交，可以这样做：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># --no-commit 参数会使嫁接过来的改动不会提交，只会放在暂存区
&lt;span class="ln">2&lt;/span>git cherry-pick b9dabf9 --no-commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;strong>第四种方法&lt;/strong>：&lt;/p>
&lt;p>适用于当多个文件被缓存时，发现其中一个文件是其他分支的功能性改动，想直接取消该文件的缓存：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 编辑了 1.js 2.js 3.js
&lt;span class="ln"> 2&lt;/span># 缓存所有改动的文件
&lt;span class="ln"> 3&lt;/span>git add .
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span># 发现 3.js 不应该出现在此时提交的功能上，要取消它的缓存
&lt;span class="ln"> 6&lt;/span>git reset 3.js
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span># 此时3.js 被取消了缓存，我们继续提交1.js 2.js
&lt;span class="ln"> 9&lt;/span>git commit -m &amp;#34;Update 1.js 2.js&amp;#34;
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span># 将3.js 暂存起来
&lt;span class="ln">12&lt;/span>git stash
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 切换到提交 3.js 改动的分支
&lt;span class="ln">15&lt;/span>git checkout feat/update
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 重新应用缓存起来的 stash（3.js）
&lt;span class="ln">18&lt;/span># pop 参数会将缓存栈的第一个stash删除，并将对应修改应用到当前分支目录下
&lt;span class="ln">19&lt;/span>git stash pop
&lt;span class="ln">20&lt;/span>
&lt;span class="ln">21&lt;/span># 继续提交
&lt;span class="ln">22&lt;/span>git add &amp;amp;&amp;amp; git commit -m &amp;#34;update 3.js&amp;#34;
&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="场景2commit之后已经-push-到远端">场景2：Commit之后已经 push 到远端&lt;/h4>
&lt;p>场景：假设我们在 feat/feedback 分支上发现最后一次 commit 的功能是feat/update 分支的改动，此时想要取消这次commit（update 2.js）&lt;/p>
&lt;p>下图是feat/feedback 的提交历史：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-cb8ada46e62932fd5f30c8305293711a_720w.jpg" alt="img">&lt;/p>
&lt;p>此时我们需要借助 git revert 命令来撤销我们的操作。&lt;/p>
&lt;p>解决方式：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 撤销最近的一次提交
&lt;span class="ln">2&lt;/span>git revert HEAD --no-edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>接着我们使用 sourceTree 查看撤销之后的提交历史：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-93b578021734cef32e25d16437966872_720w.jpg" alt="img">&lt;/p>
&lt;p>我们看到想要撤销的 SHA1 为&lt;code> db6bb3&lt;/code> 的 commit（Update 2.js）记录还在，并且多了一个SHA1 为 &lt;code>6e1d7ee&lt;/code> 新的 commit（Revert &amp;quot;Update 2.js&amp;quot;）。因此可以看出，&lt;code>git revert&lt;/code> 是对给定的 commit 提交进行逆过程，该命令会引入一个新的提交来抵消给定提交的影响。 和 &lt;code>git cherry-pick&lt;/code> 一样，revert命令不修改版本库的现存历史记录，相反它只会在记录添加新的提交。&lt;/p>
&lt;p>接下来我们已经解决了错误分支的提交，但是还要把这次提交放到正确的分支上，依然可以使用 &lt;code>git cherry pick&lt;/code> 去操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 将revert commit push到远端
&lt;span class="ln">2&lt;/span>git push origin feat/feedback
&lt;span class="ln">3&lt;/span>
&lt;span class="ln">4&lt;/span># 切换到正确的分支
&lt;span class="ln">5&lt;/span>git checkout feat/update
&lt;span class="ln">6&lt;/span>
&lt;span class="ln">7&lt;/span>将目标commit 嫁接到当前分支
&lt;span class="ln">8&lt;/span>git cherry pick db6bb3f
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>git revert&lt;/code> 后面可以加不同的参数达到不同的撤销效果，常用的如下：&lt;/p>
&lt;p>&lt;code>--edit&lt;/code> ：该参数为&lt;code>git revert&lt;/code> 的默认参数，它会自动创建提交日志提醒，此时会弹出编辑器会话，可以在里面修改提交消息，然后再提交。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert 6ac5152 --edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-6111f7f582edd5cd26854f839e51fb45_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;code>--no-edit&lt;/code> ：表示不编辑 commit 信息，revert 的 commit 会直接自动变回 'Revert + 想要撤销的commit 的message' 的格式。上面例子中使用的就是这种方式。&lt;/p>
&lt;p>&lt;code>--no-commit&lt;/code>：该命令会使撤销的 commit 里面的改动放到暂存区，不进行提交，用户可以自行再次提交。这种参数并且适用于将多个 commit 结果还原到索引中，集体放置在缓冲区，进行用户自定义的操作。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert 13b7faf --no-commit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-24b1be37b46fc4aa9641019f59450d62_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-4b5de95cae663cb6468c80a285b5e28e_720w.jpg" alt="img">&lt;/p>
&lt;h4 id="场景3改动不仅已经-push-到远端并且已经合到主仓库">场景3：改动不仅已经 push 到远端，并且已经合到主仓库&lt;/h4>
&lt;p>当我们把本不属于该分支的代码或者不需要提交的改动提交到主仓库，并合并到了develop 仓库之后，这是想要撤销合到主仓库的改动，解决方式如下：&lt;/p>
&lt;p>&lt;strong>1. 当以pull request 的方式进行的合并&lt;/strong>&lt;/p>
&lt;p>在团队的 github flow 流程中，若我们把问题分支的 pull request 请求通过并合并到develop 之后，我们可以看到在 open a pull request 页面有如下提示：&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-4b5de95cae663cb6468c80a285b5e28e_720w.jpg" alt="img">&lt;/p>
&lt;p>这时我们可以直接点击 【Revert】按钮进行撤回。该撤回操作会提示你需要创建一个 revert pull request，格式默认为： revert-${问题pr号}-${问题分支}&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-0fc06f08ad499c2d4794c1bc461e6c10_720w.jpg" alt="img">&lt;/p>
&lt;p>&lt;img src="https://pic3.zhimg.com/80/v2-3801382ef21d74f80876899913643216_720w.jpg" alt="img">&lt;/p>
&lt;p>最后我们将revert 产生的 pull request 合并到 develop 分支。&lt;/p>
&lt;p>因此对于团队协作中，推荐的工作流程是如上图所示在一个新分支中恢复错误的提交。在这里有人会问，为什么不直接在 develop 分支进行 &lt;code>git revert&lt;/code> 操作，岂不是更方便，何必麻麻烦烦的去多建一个分支出来？&lt;/p>
&lt;p>这么做的原因是：在拥有大量开发人员的团队中， develop、master 分支为保护分支，为了安全不允许或建议去直接修改。&lt;/p>
&lt;p>通过这次操作我们可以了解到：revert 分支的操作实际上是合并进develop 分支的逆操作，它会新产生一个新的分支，将 feat/feedback 的改动还原。&lt;/p>
&lt;p>在团队协作流程中，通常我们会使用 Github 的【Merge pull request】 绿色按钮进行合并pull request 的操作，因为这样会更简单直观，建议始终使用该绿色按钮进行操作。&lt;/p>
&lt;p>&lt;strong>2. 当用命令行执行合并时&lt;/strong>&lt;/p>
&lt;p>上面展示了通过界面按钮去操作如何撤销已经合并develop 分支的改动，那么在个人项目中用命令行操作是怎么样的呢？&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln"> 1&lt;/span># 添加三个文件
&lt;span class="ln"> 2&lt;/span>echo 1 &amp;gt; 1.html
&lt;span class="ln"> 3&lt;/span>echo 2 &amp;gt; 2.html
&lt;span class="ln"> 4&lt;/span>echo 3 &amp;gt; 3.html
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span># 以为提交的是1.html 2.html，将改动推到了远端分支
&lt;span class="ln"> 7&lt;/span>git add . &amp;amp;&amp;amp; git commit -m &amp;#34;Add 1.html 2.html&amp;#34;
&lt;span class="ln"> 8&lt;/span>git push origin feat/update
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span># 将feat/update的改动创建一个“合并提交”合入develop 分支，生成的 Merge commit 的SHA1 为 f439c6f
&lt;span class="ln">11&lt;/span>git checkout develop
&lt;span class="ln">12&lt;/span>git merge feat/update --no-ff
&lt;span class="ln">13&lt;/span>
&lt;span class="ln">14&lt;/span># 如果存在冲突，先解决冲突，然后继续请求合并
&lt;span class="ln">15&lt;/span>git add . &amp;amp;&amp;amp; git merge --continue
&lt;span class="ln">16&lt;/span>
&lt;span class="ln">17&lt;/span># 将develop 合并的最后结果提交到远端
&lt;span class="ln">18&lt;/span>git push origin develop
&lt;span class="ln">19&lt;/span>
&lt;span class="ln">20&lt;/span># 合并之后发现不应该将3.html 不应该放入功能迭代中。需要撤销本次合并
&lt;span class="ln">21&lt;/span># 做任何操作前，先保证本地的develop 代码是最新状态
&lt;span class="ln">22&lt;/span>git pull --rebase origin develop
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span># 从develop分支新建一个 revert 分支
&lt;span class="ln">25&lt;/span>git checkout -b revert-feat/update
&lt;span class="ln">26&lt;/span>
&lt;span class="ln">27&lt;/span># 用 -m 参数指定父编号（从1开始），因为它是“合并提交”
&lt;span class="ln">28&lt;/span>git revert -m 1 f439c6f
&lt;span class="ln">29&lt;/span>
&lt;span class="ln">30&lt;/span># push revert 的改动
&lt;span class="ln">31&lt;/span>git push origin revert-feat/update
&lt;span class="ln">32&lt;/span>
&lt;span class="ln">33&lt;/span># 切换回 develop 分支，将 revert-feat/update 分支进行合并
&lt;span class="ln">34&lt;/span>git checkout develop
&lt;span class="ln">35&lt;/span>git merge revert-feat/update --no-ff
&lt;span class="ln">36&lt;/span>git push origin develop
&lt;/code>&lt;/pre>&lt;/div>&lt;p>图为新建revert 分支：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-8b931ed19dd13ee391cef0acb87d334f_720w.jpg" alt="img">&lt;/p>
&lt;p>图为&lt;code>git revert&lt;/code> 弹出编辑器编辑 revert commit message 过程：&lt;/p>
&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-edc56b72932a310d7249a6b29d7f5d08_720w.jpg" alt="img">&lt;/p>
&lt;p>图为执行完&lt;code>git revert&lt;/code> 之后的 commit 历史记录：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-9319c72557ba7c0889b6c7a599e0cfd9_720w.jpg" alt="img">&lt;/p>
&lt;p>接下来我们想将 3.html 的改动撤销的操作就变成了上面场景 2 的操作流程了。&lt;/p>
&lt;h4 id="场景4revert-错误需要再次补救">场景4：revert 错误，需要再次补救&lt;/h4>
&lt;p>当我们的代码合到主仓库，并且成功发布到生产环境，此时发现线上有集中报错，必须马上将线上代码回滚到最新版本。这是我们需要进行revert 操作。revert 的代码发布到生产之后，发现错误仍旧存在，最后排查到是某个外部服务依赖出现问题，本次revert 的改动无关，并且外部服务已经恢复。此时需要将 revert 的改动再次发布上生产环境。&lt;/p>
&lt;p>我们可以再用一次&lt;code>git revert&lt;/code>，revert 掉我们之前的 revert commit：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git revert HEAD --no-edit
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样 revert 撤销的改动又回来了，此时会发现提交历史上又会出现一个新的revert commit。&lt;/p>
&lt;h3 id="12-误删代码">1.2. 误删代码&lt;/h3>
&lt;p>介绍上面提交错误 commit 的时候，我们提到了&lt;code>git reset --hard&lt;/code>。 如果我们真的使用了&lt;code>git reset --hard&lt;/code> 之后，发现某些修改还有必要的，这时候就需要借助时光机 &lt;code>git reflog&lt;/code> “回来未来”了。&lt;/p>
&lt;p>&lt;code>git reflog&lt;/code> 是非常好用的“后悔药”，它几乎可以恢复我们 commit 过的改动，即使这条 commit 记录已经被我们 reset 掉了。&lt;/p>
&lt;p>具体演示如下：&lt;/p>
&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-c6e8559bf331a08fad732be99477e7c3_720w.jpg" alt="img">&lt;/p>
&lt;p>如上图，在当前提交历史中，我们认为最新的两个commit 已经没有用了，想直接reset 到 SHA1 为 &lt;code>c48a245&lt;/code> 这个 commit：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span># 回到 c48a245 commit
&lt;span class="ln">2&lt;/span>git reset --hard c48a245
&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时提交历史变为现在这样：&lt;/p>
&lt;p>&lt;img src="https://pic2.zhimg.com/80/v2-92259374ff0071516766da5919472ef1_720w.jpg" alt="img">&lt;/p>
&lt;p>此时可以看到SHA1 为&lt;code>c48a245&lt;/code> 的 commit 时间线之后的改动都已经被撤销了。 这时候我们突然想到：commit 信息为 “Add 1.html 2.html” 的提交里面的改动很重要，需要被找回，但是我们使用 &lt;code>git log&lt;/code> 查看过去提交历史，已经找不到这条被我们 reset 掉的历史记录了。这时候进行如下操作：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reflog
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic4.zhimg.com/80/v2-d3a2ca9f0d5b4a1bc2f49212988160e3_720w.jpg" alt="img">&lt;/p>
&lt;p>我们如愿以偿的看到了曾经提交过的这个想要找回的commit（commit: Add 1.html 2.html），它的 SHA1 为 &lt;code>cf2e245&lt;/code>。&lt;/p>
&lt;p>接下来怎么做取决于你具体想要达到什么目的：&lt;/p>
&lt;ul>
&lt;li>想要回到&lt;code>cf2e245&lt;/code> 这个特定的commit：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --hard cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要暂存 &lt;code>cf2e245&lt;/code> 中的改动，并且不想马上提交：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git reset --soft cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要把&lt;code>cf2e245&lt;/code> 嫁接到某个分支目录下：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git checkout feat/xxx
&lt;span class="ln">2&lt;/span>git cherry-pick cf2e245
&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>想要找回 &lt;code>cf2e245&lt;/code> 某个文件的改动，暂存起来：&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="ln">1&lt;/span>git checkout cf2e245 1.html
&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;img src="https://pic1.zhimg.com/80/v2-df5d04e1c971f7bf76b6056a70b34028_720w.jpg" alt="img">&lt;/p>
&lt;p>对于 &lt;code>git reflog&lt;/code> 需要注意的是： 它不是万能的。Git 会定期清理那些你已经不再用到的“对象”，如果你想找到几个月以前的提交，可能会指望不上它。&lt;/p>
&lt;h2 id="2-filemode-的变化">2. filemode 的变化&lt;/h2>
&lt;p>执行git diff filename ,出现 old mode 100644 new mode 100755 的提示，如下图：&lt;/p>
&lt;p>&lt;img src="https://img-blog.csdn.net/20180320172628960?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L2FpMjAwMGFp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">&lt;/p>
&lt;p>但是发现文件内容并没有发生改变&lt;/p>
&lt;p>产生这个问题的原因就是：filemode的变化，文件chmod后其文件某些位是改变了的，如果严格的比较原文件和chmod后的文件，两者是有区别的，但是源代码通常只关心文本内容，因此chmod产生的变化应该忽略，所以设置一下：&lt;/p>
&lt;p>切到源码的根目录下，&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>git config --add core.filemode &lt;span class="nb">false&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>这样你的所有的git库都会忽略filemode变更了。&lt;/p>
&lt;h2 id="参考">参考&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a href="https://zhuanlan.zhihu.com/p/42929114">Git 误操作救命篇一： 如何将改动撤销&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://blog.csdn.net/ai2000ai/article/details/79628896">git diff old mode 100644 new mode 100755&lt;/a>&lt;/p>
&lt;/blockquote></description></item><item><title>自动配置Git仓库提交作者</title><link>https://ahamoment.cn/post/tool-git-set-config/</link><pubDate>Sat, 16 Nov 2019 19:12:17 +0800</pubDate><guid>https://ahamoment.cn/post/tool-git-set-config/</guid><description>
&lt;h2 id="1-背景">1. 背景&lt;/h2>
&lt;p>公司使用的代码仓库是&lt;code>Gitlab&lt;/code>，个人代码仓库又是&lt;code>Github&lt;/code>。每次提交代码的时候，需要切换不同的提交作者和提交邮箱，非常容易出错。
这个脚本是根据repo url自动设置提交作者，避免每次手动配置。&lt;/p>
&lt;h2 id="2-方法">2. 方法&lt;/h2>
&lt;h3 id="21-安装git">2.1 安装Git&lt;/h3>
&lt;ul>
&lt;li>&lt;code>Linux&lt;/code> 上安装&lt;code>Git&lt;/code>直接使用 &lt;code>sudo yum install git&lt;/code> 或者 &lt;code>sudo apt-get install git&lt;/code> 命令即可。&lt;/li>
&lt;li>&lt;code>Windows&lt;/code> 上安装到官网下载安装软件安装即可。&lt;a href="https://git-scm.com/downloads">安装地址&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="22-添加脚本">2.2 添加脚本&lt;/h3>
&lt;p>在/root/下添加&lt;code>.git-templates/hooks&lt;/code> 目录，添加脚本&lt;code>post-checkout&lt;/code>，脚本内容如下：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln"> 2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln"> 3&lt;/span>&lt;span class="c1">#checkout hook to locally set user name and email based on user defined patterns&lt;/span>
&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">#The patterns are matched against the clone url.&lt;/span>
&lt;span class="ln"> 5&lt;/span>&lt;span class="c1">#&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="c1">#Based on http://www.dvratil.cz/2015/12/git-trick-628-automatically-set-commit-author-based-on-repo-url/&lt;/span>
&lt;span class="ln"> 7&lt;/span>
&lt;span class="ln"> 8&lt;/span>&lt;span class="k">function&lt;/span> warn &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\n&lt;/span>&lt;span class="nv">$1&lt;/span>&lt;span class="s2"> Email and author not initialized in local config!&amp;#34;&lt;/span>
&lt;span class="ln">10&lt;/span>&lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local user.email&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">13&lt;/span>&lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local user.name&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">14&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> &lt;span class="nv">$1&lt;/span> !&lt;span class="o">=&lt;/span> &lt;span class="s2">&amp;#34;0000000000000000000000000000000000000000&amp;#34;&lt;/span> &lt;span class="o">||&lt;/span> -n &lt;span class="nv">$email&lt;/span> &lt;span class="o">||&lt;/span> -n &lt;span class="nv">$name&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">16&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">17&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">18&lt;/span>
&lt;span class="ln">19&lt;/span>&lt;span class="c1">#get remote name:&lt;/span>
&lt;span class="ln">20&lt;/span>&lt;span class="c1"># only one: take it&lt;/span>
&lt;span class="ln">21&lt;/span>&lt;span class="c1"># more: take &amp;#34;origin&amp;#34;, or fail&lt;/span>
&lt;span class="ln">22&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>&lt;span class="o">[[&lt;/span> &lt;span class="k">$(&lt;/span>git remote &lt;span class="p">|&lt;/span> wc -l&lt;span class="k">)&lt;/span> -eq &lt;span class="m">1&lt;/span> &lt;span class="o">]]&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> git remote &lt;span class="o">||&lt;/span> git remote &lt;span class="p">|&lt;/span> grep &lt;span class="s2">&amp;#34;^origin&lt;/span>$&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">23&lt;/span>
&lt;span class="ln">24&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="nv">$remote&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">25&lt;/span> warn &lt;span class="s2">&amp;#34;Failed to detect remote.&amp;#34;&lt;/span>
&lt;span class="ln">26&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">27&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">28&lt;/span>
&lt;span class="ln">29&lt;/span>&lt;span class="nv">url&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="k">$(&lt;/span>git config --local remote.&lt;span class="si">${&lt;/span>&lt;span class="nv">remote&lt;/span>&lt;span class="si">}&lt;/span>.url&lt;span class="k">)&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">30&lt;/span>
&lt;span class="ln">31&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> ! -f ~/.git-clone-init &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">32&lt;/span>cat &lt;span class="s">&amp;lt;&amp;lt; INPUT &amp;gt; ~/.git-clone-init
&lt;/span>&lt;span class="ln">33&lt;/span>&lt;span class="s">#!/bin/bash
&lt;/span>&lt;span class="ln">34&lt;/span>&lt;span class="s">
&lt;/span>&lt;span class="ln">35&lt;/span>&lt;span class="s">case &amp;#34;\$url&amp;#34; in
&lt;/span>&lt;span class="ln">36&lt;/span>&lt;span class="s"> *@github.com:* ) email=&amp;#34;&amp;#34;; name=&amp;#34;&amp;#34;;;
&lt;/span>&lt;span class="ln">37&lt;/span>&lt;span class="s"> *//github.com/* ) email=&amp;#34;&amp;#34;; name=&amp;#34;&amp;#34;;;
&lt;/span>&lt;span class="ln">38&lt;/span>&lt;span class="s">esac
&lt;/span>&lt;span class="ln">39&lt;/span>&lt;span class="s">INPUT&lt;/span>
&lt;span class="ln">40&lt;/span> warn &lt;span class="s2">&amp;#34;\nMissing file ~/.git-clone-init. Template created...&amp;#34;&lt;/span>
&lt;span class="ln">41&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">42&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">43&lt;/span>. ~/.git-clone-init
&lt;span class="ln">44&lt;/span>
&lt;span class="ln">45&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="nv">$name&lt;/span> &lt;span class="o">||&lt;/span> -z &lt;span class="nv">$email&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="ln">46&lt;/span> warn &lt;span class="s2">&amp;#34;Failed to detect identity using ~/.git-clone-init.&amp;#34;&lt;/span>
&lt;span class="ln">47&lt;/span> &lt;span class="nb">exit&lt;/span> &lt;span class="m">0&lt;/span>
&lt;span class="ln">48&lt;/span>&lt;span class="k">fi&lt;/span>
&lt;span class="ln">49&lt;/span>
&lt;span class="ln">50&lt;/span>git config --local user.email &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$email&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">51&lt;/span>git config --local user.name &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>
&lt;span class="ln">52&lt;/span>
&lt;span class="ln">53&lt;/span>&lt;span class="nb">echo&lt;/span> -e &lt;span class="s2">&amp;#34;\nIdentity set to &lt;/span>&lt;span class="nv">$name&lt;/span>&lt;span class="s2"> &amp;lt;&lt;/span>&lt;span class="nv">$email&lt;/span>&lt;span class="s2">&amp;gt;&amp;#34;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="23-添加配置文件">2.3 添加配置文件&lt;/h3>
&lt;p>在&lt;code>/root/.gitconfig&lt;/code>文件中（没有的话自行创建）添加如下内容，指定使用的模板：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="o">[&lt;/span>user&lt;span class="o">]&lt;/span>
&lt;span class="ln">2&lt;/span>&lt;span class="o">[&lt;/span>init&lt;span class="o">]&lt;/span>
&lt;span class="ln">3&lt;/span> &lt;span class="nv">templatedir&lt;/span> &lt;span class="o">=&lt;/span> /root/.git-templates
&lt;span class="ln">4&lt;/span>&lt;span class="o">[&lt;/span>push&lt;span class="o">]&lt;/span>
&lt;span class="ln">5&lt;/span> &lt;span class="nv">default&lt;/span> &lt;span class="o">=&lt;/span> simple
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在&lt;code>/root/.git-clone-init&lt;/code>中针对不同的git仓库添加提交作者和邮箱：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln">1&lt;/span>&lt;span class="cp">#!/bin/bash
&lt;/span>&lt;span class="ln">2&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="ln">3&lt;/span>&lt;span class="k">case&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="nv">$url&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span> in
&lt;span class="ln">4&lt;/span> *@github.com:* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@qq.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">5&lt;/span> *//github.com/* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@qq.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">6&lt;/span> *@gitlab.com:* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@google.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">7&lt;/span> *//gitlab.com/* &lt;span class="o">)&lt;/span> &lt;span class="nv">email&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;test@google.com&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nv">name&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s2">&amp;#34;xq&amp;#34;&lt;/span>&lt;span class="p">;;&lt;/span>
&lt;span class="ln">8&lt;/span>&lt;span class="k">esac&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="24-验证">2.4 验证&lt;/h3>
&lt;ol>
&lt;li>更改脚本&lt;code>post-checkout&lt;/code>的权限并执行。
&lt;code>sudo chmod 777 post-checkout&lt;/code>
&lt;code>sh post-checkout&lt;/code>&lt;/li>
&lt;li>尝试从github 克隆一个仓库：
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="ln"> 1&lt;/span>&lt;span class="o">[&lt;/span>root@yxj-test git_storage&lt;span class="o">]&lt;/span>&lt;span class="c1"># git clone git@github.com:XueqiangChen/scripts.git&lt;/span>
&lt;span class="ln"> 2&lt;/span>Cloning into &lt;span class="s1">&amp;#39;scripts&amp;#39;&lt;/span>...
&lt;span class="ln"> 3&lt;/span>Warning: Permanently added the RSA host key &lt;span class="k">for&lt;/span> IP address &lt;span class="s1">&amp;#39;52.74.223.119&amp;#39;&lt;/span> to the list of known hosts.
&lt;span class="ln"> 4&lt;/span>remote: Enumerating objects: 8, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 5&lt;/span>remote: Counting objects: 100% &lt;span class="o">(&lt;/span>8/8&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 6&lt;/span>remote: Compressing objects: 100% &lt;span class="o">(&lt;/span>6/6&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 7&lt;/span>remote: Total &lt;span class="m">8&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, reused &lt;span class="m">5&lt;/span> &lt;span class="o">(&lt;/span>delta 0&lt;span class="o">)&lt;/span>, pack-reused &lt;span class="m">0&lt;/span>
&lt;span class="ln"> 8&lt;/span>Receiving objects: 100% &lt;span class="o">(&lt;/span>8/8&lt;span class="o">)&lt;/span>, &lt;span class="k">done&lt;/span>.
&lt;span class="ln"> 9&lt;/span>
&lt;span class="ln">10&lt;/span>Identity &lt;span class="nb">set&lt;/span> to XueqiangChen &amp;lt;569503960@qq.com&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>``
可以看到最后一行的打印出来的信息，自动针对该仓库设置了提交作者和邮箱，下一次提交就会使用这个提交作者和邮箱。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>欢迎访问&lt;a href="https://github.com/XueqiangChen/scripts">GITHUB&lt;/a>查看具体代码！！！&lt;/strong>&lt;/p>
&lt;blockquote>
&lt;p>参考文章&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://www.dvratil.cz/2015/12/git-trick-628-automatically-set-commit-author-based-on-repo-url/">GIT TRICK #628: AUTOMATICALLY SET COMMIT AUTHOR BASED ON REPO URL&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰的GIT教程&lt;/a>&lt;/li>
&lt;/ul>
&lt;/blockquote></description></item></channel></rss>
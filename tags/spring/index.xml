<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spring on Ahamoment</title><link>https://ahamoment.cn/tags/spring/</link><description>Recent content in spring on Ahamoment</description><generator>Hugo -- gohugo.io</generator><copyright>Copyright © 2008–2018, Steve Francia and the Hugo Authors; all rights reserved.</copyright><lastBuildDate>Thu, 17 Dec 2020 14:21:46 +0800</lastBuildDate><atom:link href="https://ahamoment.cn/tags/spring/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring系列面试题</title><link>https://ahamoment.cn/post/interview-spring/</link><pubDate>Thu, 17 Dec 2020 14:21:46 +0800</pubDate><guid>https://ahamoment.cn/post/interview-spring/</guid><description>
&lt;blockquote>
&lt;p>本文包含spring, spring boot, spring mvc 以及 mybatis的面试题&lt;/p>
&lt;/blockquote>
&lt;h2 id="1-spring">1. Spring&lt;/h2>
&lt;h2 id="2-springboot">2. SpringBoot&lt;/h2>
&lt;h3 id="21-springboot-的常用注解有哪些">2.1. SpringBoot 的常用注解有哪些？&lt;/h3>
&lt;p>&lt;code>@SpringBootApplication&lt;/code>: 标识springboot项目的启动类。&lt;/p>
&lt;p>&lt;code>@Configuration&lt;/code>: 用于定义配置类，指出该类是 Bean 配置的信息源，相当于传统的xml配置文件，一般加在主类上。如果有些第三方库需要用到xml文件，建议仍然通过@Configuration类作为项目的配置主类——可以使用@ImportResource注解加载xml配置文件。&lt;/p>
&lt;p>&lt;code>@ComponentScan&lt;/code>: 组件扫描。让spring Boot扫描到Configuration类并把它加入到程序上下文。默认就会装配标识了&lt;code>@Controller&lt;/code>，&lt;code>@Service&lt;/code>，&lt;code>@Repository&lt;/code>，&lt;code>@Component&lt;/code>注解的类到spring容器中。&lt;/p>
&lt;p>&lt;code>@EnableAutoConfiguration&lt;/code>: 允许 Spring Boot 自动配置注解，开启这个注解之后，Spring Boot 就能根据当前类路径下的包或者类来配置 Spring Bean。&lt;/p>
&lt;p>&lt;code>@RestController&lt;/code>: 用于标注控制层组件，表示这是个控制器bean，并且是将函数的返回值直接填入HTTP响应体中，是REST风格的控制器；它是&lt;code>@Controller&lt;/code>和@&lt;code>ResponseBody&lt;/code>的合集。&lt;/p>
&lt;p>&lt;code>@ResponseBody&lt;/code>: 表示该方法的返回结果直接写入HTTP response body中。一般在异步获取数据时使用，在使用&lt;code>@RequestMapping&lt;/code>后，返回值通常解析为跳转路径，加上&lt;code>@responsebody&lt;/code>后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上&lt;code>@Responsebody&lt;/code>后，会直接返回json数据。&lt;/p>
&lt;p>&lt;code>@RequestMapping&lt;/code>: RequestMapping是一个用来处理请求地址映射的注解；提供路由信息，负责URL到Controller中的具体函数的映射，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。&lt;/p>
&lt;p>&lt;code>@AutoWired&lt;/code>: 把配置好的Bean拿来用，完成属性、方法的组装，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。&lt;/p>
&lt;p>&lt;code>@Qualifier&lt;/code>: 当有多个同一类型的Bean时，可以用@Qualifier(&amp;quot;name&amp;quot;)来指定。与&lt;code>@Autowired&lt;/code>配合使用。&lt;/p>
&lt;p>&lt;code>@Bean&lt;/code>: 放在方法上面，而不是类上面，意思是该方法产生的Bean，交给 Spring 来管理。&lt;/p>
&lt;p>&lt;code>@Component&lt;/code>: 泛指组件，当组件不好归类的时候，我们可以使用这个注解来标注。&lt;/p>
&lt;p>&lt;code>@Service&lt;/code>: 一般作用于 service 层的组件。&lt;/p>
&lt;p>&lt;code>@Repository&lt;/code>: 用于标注数据访问组件，即DAO组件。&lt;/p>
&lt;h3 id="22-springboot-异常处理">2.2. SpringBoot 异常处理&lt;/h3>
&lt;p>通过&lt;code>@ControllerAdvice&lt;/code>和&lt;code>@ExceptionHandler&lt;/code>来处理全局异常。&lt;/p>
&lt;p>详细内容参考文章：&lt;a href="https://snailclimb.gitee.io/springboot-guide/#/./docs/advanced/springboot-handle-exception">《SpringBoot异常处理》&lt;/a>&lt;/p>
&lt;h3 id="23-springboot-中如何实现过滤器和拦截器">2.3. SpringBoot 中如何实现过滤器和拦截器？&lt;/h3>
&lt;p>&lt;strong>（1）过滤器&lt;/strong>&lt;/p>
&lt;p>spring boot 中自定义过滤器只需要实现 Filter 接口，重写里面的&lt;code>init()&lt;/code> ,&lt;code>doFilter()&lt;/code>,&lt;code>destroy()&lt;/code>方法即可。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">interface&lt;/span> &lt;span class="nc">Filter&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 2&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="c1">//初始化过滤器后执行的操作
&lt;/span>&lt;span class="ln"> 4&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">init&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">FilterConfig&lt;/span> &lt;span class="n">filterConfig&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">ServletException&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="c1">// 对请求进行过滤
&lt;/span>&lt;span class="ln"> 7&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">doFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">ServletRequest&lt;/span> &lt;span class="n">var1&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletResponse&lt;/span> &lt;span class="n">var2&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">FilterChain&lt;/span> &lt;span class="n">var3&lt;/span>&lt;span class="o">)&lt;/span> &lt;span class="kd">throws&lt;/span> &lt;span class="n">IOException&lt;/span>&lt;span class="o">,&lt;/span> &lt;span class="n">ServletException&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="c1">// 销毁过滤器后执行的操作，主要用户对某些资源的回收
&lt;/span>&lt;span class="ln"> 9&lt;/span>&lt;span class="c1">&lt;/span> &lt;span class="k">default&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">destroy&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln">10&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">11&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>在配置中注册自定义的过滤器。&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="nd">@Configuration&lt;/span>
&lt;span class="ln"> 2&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kd">class&lt;/span> &lt;span class="nc">MyFilterConfig&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="nd">@Autowired&lt;/span>
&lt;span class="ln"> 4&lt;/span> &lt;span class="n">MyFilter&lt;/span> &lt;span class="n">myFilter&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln"> 5&lt;/span> &lt;span class="nd">@Bean&lt;/span>
&lt;span class="ln"> 6&lt;/span> &lt;span class="kd">public&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="nf">thirdFilter&lt;/span>&lt;span class="o">()&lt;/span> &lt;span class="o">{&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&lt;/span>&lt;span class="n">MyFilter&lt;/span>&lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">new&lt;/span> &lt;span class="n">FilterRegistrationBean&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;();&lt;/span>
&lt;span class="ln"> 8&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setFilter&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">myFilter&lt;/span>&lt;span class="o">);&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">setUrlPatterns&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="k">new&lt;/span> &lt;span class="n">ArrayList&lt;/span>&lt;span class="o">&amp;lt;&amp;gt;(&lt;/span>&lt;span class="n">Arrays&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="na">asList&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="s">&amp;#34;/api/*&amp;#34;&lt;/span>&lt;span class="o">)));&lt;/span>
&lt;span class="ln">12&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">filterRegistrationBean&lt;/span>&lt;span class="o">;&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="o">}&lt;/span>
&lt;span class="ln">15&lt;/span>&lt;span class="o">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果有多个过滤器，可以在配置中设置一下顺序，&lt;code>filterRegistrationBean.setOrder(xx);&lt;/code>&lt;/p>
&lt;p>详情可以参考文章：&lt;a href="https://snailclimb.gitee.io/springboot-guide/#/./docs/basis/springboot-filter">《SpringBoot 实现过滤器》&lt;/a>&lt;/p>
&lt;p>&lt;strong>（2）拦截器&lt;/strong>&lt;/p>
&lt;p>如果你需要自定义 &lt;strong>Interceptor&lt;/strong> 的话必须实现 &lt;code>org.springframework.web.servlet.HandlerInterceptor&lt;/code>接口或继承 &lt;code>org.springframework.web.servlet.handler.HandlerInterceptorAdapter&lt;/code>类，并且需要重写下面下面3个方法：&lt;/p>
&lt;div class="highlight">&lt;pre class="chroma">&lt;code class="language-java" data-lang="java">&lt;span class="ln"> 1&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">boolean&lt;/span> &lt;span class="nf">preHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 2&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 3&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln"> 4&lt;/span>
&lt;span class="ln"> 5&lt;/span>
&lt;span class="ln"> 6&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">postHandle&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 7&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 8&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln"> 9&lt;/span> &lt;span class="n">ModelAndView&lt;/span> &lt;span class="n">modelAndView&lt;/span>&lt;span class="o">)&lt;/span>
&lt;span class="ln">10&lt;/span>
&lt;span class="ln">11&lt;/span>
&lt;span class="ln">12&lt;/span>&lt;span class="kd">public&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">afterCompletion&lt;/span>&lt;span class="o">(&lt;/span>&lt;span class="n">HttpServletRequest&lt;/span> &lt;span class="n">request&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">13&lt;/span> &lt;span class="n">HttpServletResponse&lt;/span> &lt;span class="n">response&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">14&lt;/span> &lt;span class="n">Object&lt;/span> &lt;span class="n">handler&lt;/span>&lt;span class="o">,&lt;/span>
&lt;span class="ln">15&lt;/span> &lt;span class="n">Exception&lt;/span> &lt;span class="n">ex&lt;/span>&lt;span class="o">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>注意： &lt;strong>preHandle&lt;/strong>方法返回 &lt;strong>true&lt;/strong>或 &lt;strong>false&lt;/strong>。如果返回 &lt;strong>true&lt;/strong>，则意味着请求将继续到达 &lt;strong>Controller&lt;/strong> 被处理。&lt;/p>
&lt;h2 id="3-mybatis">3. MyBatis&lt;/h2></description></item></channel></rss>